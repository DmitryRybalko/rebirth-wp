{"version":3,"sources":["main.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Object","defineProperty","value","$","add","els","dom","this","j","toAdd","push","addClass","classes","classNames","arrayFlat","map","split","forEach","el","classList","animate","initialProps","initialParams","window","_ssrWindow","getWindow","props","assign","params","duration","easing","elements","animating","que","easingProgress","progress","Math","cos","PI","stop","frameId","cancelAnimationFrame","each","dom7AnimateInstance","done","complete","shift","index","initialFullValue","initialValue","unit","finalValue","finalFullValue","container","keys","prop","getComputedStyle","getPropertyValue","replace","parseFloat","currentValue","time","startTime","elementsDone","propsDone","began","requestAnimationFrame","render","easeProgress","Date","getTime","begin","max","min","element","style","animateInstance","animationEnd","callback","on","fireCallBack","target","off","append","newChild","document","getDocument","k","tempDiv","createElement","innerHTML","firstChild","appendChild","Dom7","appendTo","parent","attr","attrs","arguments","getAttribute","setAttribute","attrName","change","blur","children","selector","childNodes","is","click","closest","parents","eq","css","data","key","dom7ElementDataStorage","dataKey","dataset","attributes","name","indexOf","string","toLowerCase","match","group","toUpperCase","default","detach","remove","apply","empty","nodeType","parentNode","removeChild","textContent","returnIndex","filter","arrayFilter","find","foundElements","found","querySelectorAll","focusout","focusin","focus","hasClass","className","contains","height","innerHeight","hide","display","html","child","previousSibling","insertAfter","after","insertBefore","nextSibling","cloneNode","before","compareWith","matches","webkitMatchesSelector","msMatchesSelector","mouseup","mouseover","mouseout","mousemove","mouseleave","mouseenter","mousedown","keyup","keypress","keydown","next","nextElementSibling","nextAll","nextEls","args","eventType","targetSelector","listener","capture","undefined","events","event","handlers","dom7Listeners","dom7LiveListeners","handler","dom7proxy","removeEventListener","proxyListener","splice","offset","box","getBoundingClientRect","body","clientTop","clientLeft","scrollTop","scrollY","scrollLeft","scrollX","top","left","handleLiveEvent","eventData","dom7EventData","unshift","handleEvent","addEventListener","once","eventName","onceHandler","eventArgs","outerHeight","includeMargins","styles","offsetHeight","outerWidth","offsetWidth","prepend","prependTo","prev","previousElementSibling","prevAll","prevEls","propName","removeAttr","removeAttribute","removeClass","removeData","scroll","resize","scrollTo","currentTop","currentLeft","maxTop","maxLeft","newTop","newLeft","animateTop","animateLeft","scrollHeight","scrollWidth","show","siblings","submit","text","trim","toggleClass","toggle","touchstart","touchmove","touchend","transform","transition","transitionDuration","transitionEnd","trigger","CustomEvent","evt","detail","bubbles","cancelable","dataIndex","dispatchEvent","val","multiple","nodeName","values","selectedOptions","Array","isArray","options","selected","width","innerWidth","constructor","items","super","obj","proto","__proto__","get","set","makeReactive","arr","res","prototype","context","toCreate","tempParent","qsa","uniqueArray","arrayUnique","fn","noTrigger","shortcut","_default","_typeof","Symbol","iterator","_defineProperties","descriptor","enumerable","configurable","writable","_getPrototypeOf","h","setPrototypeOf","getPrototypeOf","_setPrototypeOf","_possibleConstructorReturn","self","TypeError","ReferenceError","_assertThisInitialized","_superPropBase","object","property","hasOwnProperty","_get","receiver","Reflect","g","base","desc","getOwnPropertyDescriptor","_defineProperty","_arrayLikeToArray","len","arr2","_","Constructor","protoProps","staticProps","instance","b","source","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","subClass","superClass","create","Derived","hasNativeReflectConstruct","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","NewTarget","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","err","_iterableToArrayLimit","minLen","toString","slice","from","test","_unsupportedIterableToArray","_nonIterableRest","isStrict","_rollupPluginBabelHelpersA0b","_htmlMaskElement","_interopRequireDefault","_holder","__esModule","HTMLContenteditableMaskElement","_HTMLMaskElement","_super","root","rootElement","selection","getSelection","anchorOffset","_unsafeSelectionStart","String","start","end","createRange","range","setStart","input","setEnd","lastChild","removeAllRanges","addRange","_maskElement","HTMLMaskElement","_MaskElement","_this","_handlers","getRootNode","activeElement","selectionStart","selectionEnd","setSelectionRange","_this2","_toggleEventHandler","EVENTS_MAP","_this3","selectionChange","drop","commit","_utils","_actionDetails","_date","_factory","nodeInterop","cache","_getRequireWildcardCache","has","newObj","hasPropertyDescriptor","_interopRequireWildcard","_htmlContenteditableMaskElement","WeakMap","cacheBabelInterop","cacheNodeInterop","_excluded","InputMask","opts","isContentEditable","tagName","masked","_listeners","_value","_unmaskedValue","_saveSelection","bind","_onInput","_onChange","_onDrop","_onFocus","_onClick","alignCursor","alignCursorFriendly","_bindEvents","updateValue","mask","maskEquals","Masked","maskedClass","unmaskedValue","updateOptions","str","updateControl","typedValue","bindEvents","unbindEvents","ev","_len","_key","listeners","l","_cursorChanging","_changingCursorPos","pos","isActive","select","console","warn","_selection","cursorPos","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","restOpts","updateMask","updateOpts","objectIncludes","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_fireEvent","_inputEvent","isComplete","clearTimeout","nearestInputPos","DIRECTION","LEFT","hIndex","details","oldRawValue","rawInputValue","startChangePos","removed","inserted","removeDirection","NONE","updateCursor","doCommit","preventDefault","stopPropagation","_unbindEvents","MaskElement","_unsafeSelectionEnd","_unsafeSelect","ActionDetails","oldValue","oldSelection","substr","insertedCount","removedCount","substring","RIGHT","ChangeDetails","rawInserted","skip","tailShift","ContinuousTailDetails","tail","aggregate","_appendPlaceholder","state","shiftChar","IMask","escapeRegExp","forceDirection","direction","FORCE_LEFT","FORCE_RIGHT","indexInDirection","isString","arrA","arrB","dateA","dateB","regexpA","RegExp","regexpB","posInDirection","_input","_base","_dynamic","_enum","_function","_number","_pattern","_range","_regexp","_pipe","PIPE_TYPE","createPipe","pipe","globalThis","_changeDetails","_continuousTailDetails","_update","DEFAULTS","isInitialized","withValueRefresh","resolve","reset","doParse","doFormat","extractInput","raw","fromPos","toPos","ch","flags","checkTail","consistentState","_appendCharRaw","doPrepare","consistentTail","appended","doValidate","beforeTailState","overwrite","shiftBefore","tailDetails","appendTail","_beforeTailState","ci","_appendChar","_refreshing","rawInput","ret","_isolated","prepare","validate","format","parse","deleteCount","tailPos","extractTail","v","MaskedDate","_MaskedPattern","pattern","blocks","GET_DEFAULT_BLOCKS","Y","getFullYear","to","m","getMonth","getDate","bk","autofix","_get2","date","concat","isDateExist","padStart","join","_str$split","_str$split2","day","month","year","maxLength","MaskedDynamic","_Masked","currentMask","compiledMasks","_applyDispatch","prevValueBeforeTail","inputValue","insertValue","_rawInputValue","tailValue","prevMask","prevMaskState","doDispatch","dispatch","_this$currentMask","_this$currentMask2","currentMaskRef","maskedState","mi","_this$currentMask3","_this$currentMask4","_get3","_len2","_key2","_this$currentMask5","_get4","_len3","_key3","inputs","weight","sort","i1","i2","MaskedEnum","enum","repeat","some","createMask","MaskedRegExp","MaskedPattern","Number","MaskedNumber","Function","MaskedFunction","MaskedClass","_updateRegExps","allowNegative","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","parts","_removeThousandsSeparators","extendOnSeparators","count","_separatorsCount","_this$_adjustRangeWit","_adjustRangeWithSeparators","_this$_adjustRangeWit2","prevBeforeTailValue","prevBeforeTailSeparatorsCount","_separatorsCountFromSlice","appendDetails","_insertThousandsSeparators","beforeTailValue","beforeTailSeparatorsCount","searchFrom","separatorPos","separatorAroundFromPos","_findSeparatorAround","separatorAroundToPos","_this$_adjustRangeWit3","_this$_adjustRangeWit4","valueBeforePos","valueAfterPos","separatorAtLeftPos","separatorAtLeftEndPos","separatorAtRightPos","valid","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","num","padEnd","signed","_inputDefinition","_fixedDefinition","_chunkTailDetails","definitions","DEFAULT_INPUT_DEFINITIONS","_rebuildMask","defs","_blocks","_stops","_maskedBlocks","unmaskingBlock","optionalBlock","bNames","bName","maskedBlock","lazy","placeholderChar","char","_isInput","STOP_CHAR","ESCAPE_CHAR","def","isOptional","isUnmasking","bi","every","reduce","blockIter","_mapPosToBlock","_block","blockDetails","chunkTail","_forEachBlocksInRange","bFromPos","bToPos","blockChunk","_findStopBefore","_blockStartPos","blockIndex","extend","stopBefore","si","toBlockIndex","startBlockIter","startBlockIndex","endBlockIndex","bDetails","accVal","_block2","blockStartPos","fromBlockIter","toBlockIter","isSameBlock","fromBlockStartPos","fromBlockEndPos","removeDetails","beginBlockData","beginBlockOffset","beginBlockIndex","beginBlock","beginBlockCursorPos","cursorAtRight","cursorAtLeft","searchBlockIndex","blockIndexAtLeft","blockAtLeft","blockInputPos","firstInputAtRight","blockAtRight","_blockInputPos","_bi","_block3","_blockInputPos2","firstFilledBlockIndexAtRight","_bi2","filledBlock","_blockInputPos3","firstEmptyInputBlockIndex","firstFilledInputBlockIndex","_bi3","_block4","_blockInputPos4","_bi4","_block5","_blockInputPos5","blockAlignedPos","isInput","_bi5","_block6","_blockInputPos6","firstInputBlockAlignedIndex","firstInputBlockAlignedPos","_bi6","_block7","_blockInputPos7","_bi7","_block8","_blockInputPos8","_bi8","_block9","_blockInputPos9","alignedPos","maskedBlocks","_this4","indices","gi","block","InputDefinition","FixedDefinition","ChunksTailDetails","chunks","tailChunk","lastChunk","extendLast","firstTailChunk","chunk","lastBlockIter","chunkBlock","remainChars","cstate","chunkShiftPos","PatternFixedDefinition","_isRawInput","minPos","maxPos","isResolved","PatternInputDefinition","blockOpts","_isFilled","_this$masked","_this$masked2","_this$masked3","boundPos","_this$masked4","_this$parent","MASKED","UNMASKED","TYPED","runIsolated","pipeArgs","MaskedRange","fromStr","toStr","sameCharsCount","minstr","maxstr","_ref","_ref2","placeholder","prepStr","nextVal","_this$boundaries","boundaries","_this$boundaries2","firstNonZero","search","_matchFrom","_this$boundaries3","_this$boundaries4","isObject","src","doc","ssrDocument","win","ssrWindow","querySelector","getElementById","createEvent","initEvent","getElementsByTagName","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","navigator","userAgent","history","replaceState","pushState","go","back","Image","screen","matchMedia","id","breakpoints","containerEl","breakpoint","currentHeight","clientHeight","points","point","minRatio","parseInt","clientWidth","_setBreakpoint","_getBreakpoint","setBreakpoint","getBreakpoint","swiper","activeIndex","initialized","loopedSlides","$el","breakpointsBase","currentBreakpoint","breakpointParams","originalParams","wasMultiRow","isGridEnabled","isMultiRow","wasEnabled","enabled","containerModifierClass","emitContainerClasses","grid","fill","directionChanged","needsReLoop","loop","slidesPerView","changeDirection","isEnabled","allowTouchMove","allowSlideNext","allowSlidePrev","disable","enable","emit","loopDestroy","loopCreate","updateSlides","slideTo","rows","checkOverflow","isLocked","wasLocked","slidesOffsetBefore","lastSlideIndex","slides","lastSlideRightEdge","slidesGrid","slidesSizesGrid","size","snapGrid","isEnd","rtl","device","support","suffixes","entries","prefix","resultClasses","item","prepareClasses","touch","freeMode","autoheight","autoHeight","android","ios","cssMode","centered","centeredSlides","_addClasses","_removeClasses","addClasses","removeClasses","_dom","_getSupport","_getDevice","_getBrowser","_resize","_observer","_eventsEmitter","_index","_index2","_index3","_index4","_index5","_index6","_index7","_index8","_index9","_index10","_index11","_defaults","_moduleExtendParams","prototypes","eventsEmitter","update","translate","slide","grabCursor","images","extendedDefaults","Swiper","swipers","newParams","__swiper__","getSupport","getDevice","browser","getBrowser","eventsListeners","eventsAnyListeners","modules","__modules__","allModulesParams","mod","extendParams","swiperParams","passedParams","onAny","isHorizontal","isVertical","realIndex","isBeginning","previousTranslate","velocity","touchEvents","desktop","touchEventsTouch","move","cancel","touchEventsDesktop","simulateTouch","touchEventsData","isTouched","isMoved","allowTouchCallbacks","touchStartTime","isScrolling","currentTranslate","startTranslate","allowThresholdMove","focusableElements","lastClickTime","now","clickTimeout","velocities","allowMomentumBounce","isTouchEvent","startMoving","allowClick","touches","startX","startY","currentX","currentY","diff","imagesToLoad","imagesLoaded","init","setGrabCursor","unsetGrabCursor","setProgress","speed","minTranslate","current","maxTranslate","translateTo","updateActiveIndex","updateSlidesClasses","_emitClasses","cls","getSlideClasses","slideEl","slideClass","emitSlidesClasses","updates","slidesPerViewDynamic","view","exact","swiperSize","spv","breakLoop","slideSize","swiperSlideSize","destroyed","setTranslate","translateValue","rtlTranslate","newTranslate","translated","updateSize","updateProgress","updateAutoHeight","watchOverflow","newDirection","needUpdate","currentDirection","mount","mounted","getWrapperSelector","wrapperClass","$wrapperEl","shadowRoot","getWrapper","createElements","wrapper","wrapperEl","dir","wrongRTL","preloadImages","initialSlide","runCallbacksOnInit","attachEvents","destroy","deleteInstance","cleanStyles","detachEvents","slideVisibleClass","slideActiveClass","slideNextClass","slidePrevClass","deleteProps","static","newDefaults","defaults","installModule","prototypeGroup","protoMethod","use","touchEventsTarget","updateOnWindowResize","resizeObserver","nested","preventInteractionOnTransition","url","edgeSwipeDetection","edgeSwipeThreshold","setWrapperSize","virtualTranslate","effect","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerGroupAuto","centeredSlidesBounds","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","roundLengths","touchRatio","touchAngle","shortSwipes","longSwipes","longSwipesRatio","longSwipesMs","followFinger","threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","resistance","resistanceRatio","watchSlidesProgress","preventClicks","preventClicksPropagation","slideToClickedSlide","updateOnImagesReady","loopAdditionalSlides","loopFillGroupWithBlank","loopPreventsSlide","swipeHandler","noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","slideBlankClass","slideDuplicateActiveClass","slideDuplicateClass","slideDuplicateNextClass","slideDuplicatePrevClass","priority","method","__emitterProxy","offAny","eventHandler","_onTouchStart","_onTouchMove","_onTouchEnd","_onResize","_onScroll","dummyEventAttached","dummyEventListener","domMethod","swiperMethod","passiveListener","passive","onTouchStart","onTouchMove","onTouchEnd","onClick","onScroll","stopImmediatePropagation","autoplay","running","paused","run","newProgress","translatesDiff","originalEvent","touchEndTime","timeDiff","pathTree","path","composedPath","updateClickedSlide","nextTick","swipeDirection","currentPos","stopIndex","groupSize","increment","ratio","navigation","nextEl","prevEl","type","targetTouch","targetTouches","changedTouches","pageX","pageY","preventedByNestedSwiper","diffX","diffY","sqrt","atan2","abs","loopFix","getTranslate","setTransition","disableParentSwiper","$targetEl","which","button","isTargetShadow","__closestFrom","assignedSlot","closestElement","iOSEdgeSwipeDetection","iOSEdgeSwipeThreshold","shouldPreventDefault","_setGrabCursor","_unsetGrabCursor","moving","cursor","_loadImage","_preloadImages","loadImage","imageEl","srcset","sizes","checkForComplete","image","onReady","onload","onerror","currentSrc","_loopCreate","_loopFix","_loopDestroy","$selector","blankSlidesNum","blankNode","ceil","prependSlides","appendSlides","newIndex","moduleParamName","moduleParams","auto","observers","attach","observer","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","observe","childList","characterData","observeParents","observeSlideChildren","containerParents","disconnect","resizeHandler","orientationChangeHandler","ResizeObserver","newWidth","newHeight","contentBoxSize","contentRect","inlineSize","blockSize","unobserve","_slideTo","_slideToLoop","_slideNext","_slidePrev","_slideReset","_slideToClosest","_slideToClickedSlide","slideToLoop","slideNext","slidePrev","slideReset","slideToClosest","runCallbacks","internal","perGroup","_clientLeft","normalize","floor","normalizedTranslate","normalizedSnapGrid","prevSnap","prevSnapIndex","snap","snapIndex","prevIndex","initial","indexAsNumber","isFinite","slideIndex","previousIndex","normalizedGrid","normalizedGridNext","transitionStart","isH","isVirtual","virtual","scrollSnapType","_immediateVirtual","_swiperImmediateVirtual","smoothScroll","animateCSSModeScroll","targetPosition","side","behavior","onSlideToWrapperTransitionEnd","slideToIndex","clickedIndex","clickedSlide","currentSnap","nextSnap","_setTransition","_transitionStart","_transitionEnd","byController","step","_transitionEmit","axis","_getTranslate","_setTranslate","_minTranslate","_maxTranslate","_translateTo","x","y","translateBounds","onTranslateToWrapperTransitionEnd","_updateSize","_updateSlides","_updateAutoHeight","_updateSlidesOffset","_updateSlidesProgress","_updateProgress","_updateSlidesClasses","_updateActiveIndex","_updateClickedSlide","updateSlidesOffset","updateSlidesProgress","newActiveIndex","previousRealIndex","previousSnapIndex","activeSlides","getSlideByIndex","visibleSlides","slideFound","multiplier","wasBeginning","wasEnd","getDirectionLabel","marginRight","getDirectionPropertyValue","node","label","previousSlidesLength","slidesLength","offsetBefore","offsetAfter","previousSnapGridLength","previousSlidesGridLength","slidePosition","prevSlideSize","virtualSize","marginLeft","marginBottom","marginTop","setCSSProperty","gridEnabled","initSlides","shouldResetSlideSize","updateSlide","slideStyles","currentTransform","currentWebKitTransform","webkitTransform","paddingLeft","paddingRight","boxSizing","updateWrapperSize","newSlidesGrid","slidesGridItem","allSlidesSize","slideSizeValue","maxSnap","allSlidesOffset","addToSnapGrid","addToSlidesGrid","activeSlide","nextSlide","prevSlide","swiperSlideOffset","offsetLeft","offsetTop","offsetCenter","visibleSlidesIndexes","slideOffset","slideProgress","originalSlideProgress","slideBefore","slideAfter","originalProgress","a11y","notificationClass","prevSlideMessage","nextSlideMessage","firstSlideMessage","lastSlideMessage","paginationBulletMessage","slideLabelMessage","containerMessage","containerRoleDescriptionMessage","itemRoleDescriptionMessage","slideRole","liveRegion","notify","message","notification","makeElFocusable","makeElNotFocusable","addElRole","role","addElRoleDescription","description","addElLabel","disableEl","enableEl","onEnterOrSpaceKey","keyCode","$nextEl","$prevEl","pagination","_classesToSelector","bulletClass","updateNavigation","hasPagination","bullets","hasClickablePagination","clickable","initNavEl","wrapperId","controls","addElControls","$containerEl","round","random","getRandomNumber","live","addElLive","$slideEl","bulletEl","$bulletEl","renderBullet","bulletActiveClass","updatePagination","timeout","$activeSlideEl","delay","autoplayResult","reverseDirection","stopOnLastSlide","pause","waitForTransition","onTransitionEnd","onVisibilityChange","visibilityState","onMouseEnter","disableOnInteraction","onMouseLeave","pauseOnMouseEnter","LinearSpline","binarySearch","maxIndex","minIndex","guess","array","i3","lastIndex","interpolate","x2","removeSpline","controller","control","spline","inverse","by","_t","controlled","controlledTranslate","setControlledTranslate","getInterpolateFunction","setControlledTransition","cardsEffect","slideShadows","transformEl","_effectInit","tX","tY","tZ","rotate","tXAdd","isSwipeToNext","isSwipeToPrev","subProgress","prevY","$shadowEl","_createShadow","opacity","zIndex","_effectTarget","_effectVirtualTransitionEnd","perspective","overwriteParams","coverflowEffect","stretch","depth","modifier","swiperWidth","swiperHeight","center","offsetMultiplier","rotateY","rotateX","translateZ","translateY","translateX","slideTransform","$shadowBeforeEl","$shadowAfterEl","creativeEffect","limitProgress","shadowPerProgress","progressMultiplier","getTranslateValue","isCenteredSlides","margin","custom","translateString","rotateString","scaleString","opacityString","shadow","shadowOpacity","allSlides","cubeEffect","shadowOffset","shadowScale","$cubeShadowEl","wrapperRotate","slideAngle","tx","ty","tz","shadowBefore","shadowAfter","shadowAngle","sin","scale1","scale2","zFactor","isSafari","isWebView","fadeEffect","crossFade","slideOpacity","flipEffect","limitRotation","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","position","lastMoveEvent","pop","velocityEvent","distance","momentumDuration","momentumDistance","newPosition","afterBouncePosition","doBounce","bounceAmount","needsLoopFix","moveDistance","currentSlideSize","slidesNumberEvenToRows","slidesPerRow","numFullColumns","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","order","hashNavigation","watchState","onHashChange","newHash","setHash","paths","slugify","getPathValues","urlOverride","URL","pathArray","part","total","setHistory","includes","currentState","scrollToSlide","setHistoryPopState","handle","kc","charCode","pageUpDown","keyboard","isPageUp","isPageDown","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","shiftKey","altKey","ctrlKey","metaKey","onlyInViewport","inView","windowWidth","windowHeight","swiperOffset","swiperCoord","returnValue","checkInView","loadPrevNext","loadPrevNextAmount","loadOnTransitionStart","scrollingElement","elementClass","loadingClass","loadedClass","preloaderClass","scrollHandlerAttached","initialImageLoaded","loadInSlide","loadInDuplicate","$images","$imageEl","background","$pictureEl","sourceEl","$source","slideOriginalIndex","load","slideExist","amount","checkInViewOnLoad","$scrollElement","isWindow","scrollElementWidth","scrollElementHeight","appendSlide","_appendSlide","prependSlide","_prependSlide","addSlide","_addSlide","removeSlide","_removeSlide","removeAllSlides","_removeAllSlides","activeIndexBuffer","baseLength","slidesBuffer","currentSlide","slidesIndexes","indexToRemove","mousewheel","releaseOnEdges","invert","forceToAxis","sensitivity","eventsTarget","thresholdDelta","thresholdTime","lastEventBeforeSnap","lastScrollTime","recentWheelEvents","handleMouseEnter","mouseEntered","handleMouseLeave","animateSlider","newEvent","delta","rtlFactor","sX","sY","pX","pY","wheelDelta","wheelDeltaY","wheelDeltaX","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","positions","ignoreWheelEvents","prevEvent","firstEvent","snapToThreshold","autoplayDisableOnInteraction","releaseScroll","getEl","toggleEl","disabled","disabledClass","lockClass","onPrevClick","onNextClick","_createElementIfNotDefined","hideOnClick","hiddenClass","targetEl","isHidden","pfx","bulletSize","bulletElement","renderProgressbar","renderFraction","renderCustom","progressbarOpposite","dynamicBullets","dynamicMainBullets","formatFractionCurrent","formatFractionTotal","modifierClass","currentClass","totalClass","progressbarFillClass","progressbarOppositeClass","clickableClass","horizontalClass","verticalClass","dynamicBulletIndex","isPaginationDisabled","setSideBullets","paginationType","firstIndex","midIndex","suffix","bullet","$bullet","bulletIndex","$firstDisplayedBullet","$lastDisplayedBullet","dynamicBulletsLength","bulletsOffset","offsetProp","progressbarDirection","scaleX","scaleY","paginationHTML","numberOfBullets","parallax","setTransform","currentOpacity","currentScale","_swiper","parallaxEl","$parallaxEl","parallaxDuration","dragStartPos","dragSize","trackSize","divider","dragTimeout","scrollbar","$dragEl","newSize","newPos","getPointerPosition","clientX","clientY","setDragPosition","positionRatio","onDragStart","onDragMove","onDragEnd","snapOnRelease","activeListener","eventMethod","$swiperEl","dragClass","dragEl","draggable","thumbs","multipleActiveThumbs","autoScrollOffset","slideThumbActiveClass","thumbsContainerClass","swiperCreated","onThumbClick","thumbsSwiper","currentIndex","nextIndex","thumbsParams","SwiperClass","thumbsSwiperParams","useOffset","newThumbsIndex","currentThumbsIndex","prevThumbsIndex","nextThumbsIndex","thumbsToActivate","thumbActiveClass","cssModeTimeout","renderSlide","force","addSlidesBefore","addSlidesAfter","previousFrom","previousTo","previousSlidesGrid","previousOffset","slidesAfter","slidesBefore","onRendered","renderExternal","slidesToRender","renderExternalUpdate","prependIndexes","appendIndexes","numberOfNewSlides","newCache","cachedIndex","$cachedEl","cachedElIndex","zoom","maxRatio","containerClass","zoomedSlideClass","gesturesEnabled","fakeGestureTouched","fakeGestureMoved","isScaling","gesture","slideWidth","slideHeight","$imageWrapEl","minX","minY","maxX","maxY","touchesStart","touchesCurrent","prevPositionX","prevPositionY","prevTime","getDistanceBetweenTouches","x1","y1","y2","onGestureStart","gestures","scaleStart","onGestureChange","scaleMove","onGestureEnd","scaledWidth","scaledHeight","zoomIn","touchX","touchY","offsetX","offsetY","imageWidth","imageHeight","translateMinX","translateMinY","translateMaxX","translateMaxY","overflow","touchAction","zoomOut","zoomToggle","getListeners","activeListenerWithCapture","getSlideSelector","toggleGestures","slideSelector","enableGestures","disableGestures","momentumDurationX","momentumDurationY","momentumDistanceX","newPositionX","momentumDistanceY","newPositionY","in","out","checkProps","shadowClass","$shadowContainer","Methods","methodName","dom7","overwriteParamsResult","effectParams","$transitionEndTarget","eventTriggered","triggerEvents","ua","calcBrowser","overrides","deviceCached","platform","screenWidth","screenHeight","ipad","ipod","iphone","windows","macos","iPadScreens","os","calcDevice","documentElement","DocumentTouch","supportsPassive","calcSupport","startPosition","cssModeFrameID","isOutOfBound","currentPosition","noExtend","nextSource","isNode","keysArray","nextKey","matrix","curTransform","transformMatrix","curStyle","WebKitCSSMatrix","MozTransform","OTransform","MsTransform","msTransform","m41","m42","varName","varValue","setProperty","currentStyle","HTMLElement","_a11y","_autoplay","_controller","_effectCards","_effectCoverflow","_effectCreative","_effectCube","_effectFade","_effectFlip","_freeMode","_grid","_hashNavigation","_history","_keyboard","_lazy","_manipulation","_mousewheel","_navigation","_pagination","_parallax","_scrollbar","_core","_thumbs","_virtual","_zoom","_menu","_toggle","_scrollToTop","_modal","_validateForm","toggleNavigation","toggleMenu","toggleCard","Slider","toggleModal","scrollToTop","validateForm","menuBtn","mobileMenu","menuIcons","modal","closeModalBtn","modalBtn","lastScroll","currentScroll","pageYOffset","Navigation","Autoplay","Lazy","_classCallCheck","_initSwiper","accordions","accordionItems","arrowBtns","arrowIcons","cards","textsOnHover","maxHeight","arrowBtn","accordionItem","modalForm","submitBtn","labels","handleSubmit","imask"],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.$ = $;\nexports.add = add;\nexports.addClass = addClass;\nexports.animate = animate;\nexports.animationEnd = animationEnd;\nexports.append = append;\nexports.appendTo = appendTo;\nexports.attr = attr;\nexports.change = exports.blur = void 0;\nexports.children = children;\nexports.click = void 0;\nexports.closest = closest;\nexports.css = css;\nexports.data = data;\nexports.dataset = dataset;\nexports.default = void 0;\nexports.detach = detach;\nexports.each = each;\nexports.empty = empty;\nexports.eq = eq;\nexports.filter = filter;\nexports.find = find;\nexports.focusout = exports.focusin = exports.focus = void 0;\nexports.hasClass = hasClass;\nexports.height = height;\nexports.hide = hide;\nexports.html = html;\nexports.index = index;\nexports.insertAfter = insertAfter;\nexports.insertBefore = insertBefore;\nexports.is = is;\nexports.mouseup = exports.mouseover = exports.mouseout = exports.mousemove = exports.mouseleave = exports.mouseenter = exports.mousedown = exports.keyup = exports.keypress = exports.keydown = void 0;\nexports.next = next;\nexports.nextAll = nextAll;\nexports.off = off;\nexports.offset = offset;\nexports.on = on;\nexports.once = once;\nexports.outerHeight = outerHeight;\nexports.outerWidth = outerWidth;\nexports.parent = parent;\nexports.parents = parents;\nexports.prepend = prepend;\nexports.prependTo = prependTo;\nexports.prev = prev;\nexports.prevAll = prevAll;\nexports.prop = prop;\nexports.remove = remove;\nexports.removeAttr = removeAttr;\nexports.removeClass = removeClass;\nexports.removeData = removeData;\nexports.scroll = exports.resize = void 0;\nexports.scrollLeft = scrollLeft;\nexports.scrollTo = scrollTo;\nexports.scrollTop = scrollTop;\nexports.show = show;\nexports.siblings = siblings;\nexports.stop = stop;\nexports.styles = styles;\nexports.submit = void 0;\nexports.text = text;\nexports.toggleClass = toggleClass;\nexports.touchstart = exports.touchmove = exports.touchend = void 0;\nexports.transform = transform;\nexports.transition = transition;\nexports.transitionEnd = transitionEnd;\nexports.trigger = trigger;\nexports.val = val;\nexports.value = value;\nexports.width = width;\n\nvar _ssrWindow = require(\"ssr-window\");\n\n/**\n * Dom7 4.0.2\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get() {\n      return proto;\n    },\n\n    set(value) {\n      proto.__proto__ = value;\n    }\n\n  });\n}\n\nclass Dom7 extends Array {\n  constructor(items) {\n    super(...(items || []));\n    makeReactive(this);\n  }\n\n}\n\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach(el => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\n\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\n\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n\n  return uniqueArray;\n}\n\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());\n} // eslint-disable-next-line\n\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n\n  const a = [];\n  const res = context.querySelectorAll(selector);\n\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n\n  return a;\n}\n\nfunction $(selector, context) {\n  const window = (0, _ssrWindow.getWindow)();\n  const document = (0, _ssrWindow.getDocument)();\n  let arr = [];\n\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n\n  if (!selector) {\n    return new Dom7(arr);\n  }\n\n  if (typeof selector === 'string') {\n    const html = selector.trim();\n\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      let toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      const tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n\n  return new Dom7(arrayUnique(arr));\n}\n\n$.fn = Dom7.prototype; // eslint-disable-next-line\n\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\n\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\n\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    classNames.forEach(className => {\n      el.classList.toggle(className);\n    });\n  });\n}\n\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  return arrayFilter(this, el => {\n    return classNames.filter(className => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\n\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n\n  return this;\n}\n\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (const propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction data(key, value) {\n  let el;\n\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n\n    const dataKey = el.getAttribute(`data-${key}`);\n\n    if (dataKey) {\n      return dataKey;\n    }\n\n    return undefined;\n  } // Set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n\n  return this;\n}\n\nfunction removeData(key) {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\n\nfunction dataset() {\n  const el = this[0];\n  if (!el) return undefined;\n  const dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (const dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (let i = 0; i < el.attributes.length; i += 1) {\n      const attr = el.attributes[i];\n\n      if (attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;\n      }\n    }\n  }\n\n  for (const key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n\n  return dataset;\n}\n\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    const el = this[0];\n    if (!el) return undefined;\n\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      const values = [];\n\n      for (let i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n\n      return values;\n    }\n\n    return el.value;\n  } // set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {\n      for (let j = 0; j < el.options.length; j += 1) {\n        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;\n      }\n    } else {\n      el.value = value;\n    }\n  }\n\n  return this;\n}\n\nfunction value(value) {\n  return this.val(value);\n}\n\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n\n  return this;\n}\n\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n  }\n\n  return this;\n}\n\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n      const parents = $(target).parents(); // eslint-disable-line\n\n      for (let k = 0; k < parents.length; k += 1) {\n        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    listener.apply(this, eventData);\n  }\n\n  const events = eventType.split(' ');\n  let j;\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n  const events = eventType.split(' ');\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction once(...args) {\n  const dom = this;\n  let [eventName, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventName, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  function onceHandler(...eventArgs) {\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\n\nfunction trigger(...args) {\n  const window = (0, _ssrWindow.getWindow)();\n  const events = args[0].split(' ');\n  const eventData = args[1];\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n\n      if (window.CustomEvent) {\n        const evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction transitionEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction animationEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction width() {\n  const window = (0, _ssrWindow.getWindow)();\n\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n\n  return null;\n}\n\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n\n    return this[0].offsetWidth;\n  }\n\n  return null;\n}\n\nfunction height() {\n  const window = (0, _ssrWindow.getWindow)();\n\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n\n  return null;\n}\n\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n\n    return this[0].offsetHeight;\n  }\n\n  return null;\n}\n\nfunction offset() {\n  if (this.length > 0) {\n    const window = (0, _ssrWindow.getWindow)();\n    const document = (0, _ssrWindow.getDocument)();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n\n  return null;\n}\n\nfunction hide() {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n\n  return this;\n}\n\nfunction show() {\n  const window = (0, _ssrWindow.getWindow)();\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n\n  return this;\n}\n\nfunction styles() {\n  const window = (0, _ssrWindow.getWindow)();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\n\nfunction css(props, value) {\n  const window = (0, _ssrWindow.getWindow)();\n  let i;\n\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n\n      return this;\n    }\n  }\n\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach((el, index) => {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\n\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\n\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n\n  return this;\n}\n\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n\n  return this;\n}\n\nfunction is(selector) {\n  const window = (0, _ssrWindow.getWindow)();\n  const document = (0, _ssrWindow.getDocument)();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  if (selector === document) {\n    return el === document;\n  }\n\n  if (selector === window) {\n    return el === window;\n  }\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction index() {\n  let child = this[0];\n  let i;\n\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n\n    return i;\n  }\n\n  return undefined;\n}\n\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n\n  if (index > length - 1) {\n    return $([]);\n  }\n\n  if (index < 0) {\n    const returnIndex = length + index;\n    if (returnIndex < 0) return $([]);\n    return $([this[returnIndex]]);\n  }\n\n  return $([this[index]]);\n}\n\nfunction append(...els) {\n  let newChild;\n  const document = (0, _ssrWindow.getDocument)();\n\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction appendTo(parent) {\n  $(parent).append(this);\n  return this;\n}\n\nfunction prepend(newChild) {\n  const document = (0, _ssrWindow.getDocument)();\n  let i;\n  let j;\n\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n\n  return this;\n}\n\nfunction prependTo(parent) {\n  $(parent).prepend(this);\n  return this;\n}\n\nfunction insertBefore(selector) {\n  const before = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (let j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\n\nfunction insertAfter(selector) {\n  const after = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (let j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\n\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n\n    el = next;\n  }\n\n  return $(nextEls);\n}\n\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (el.previousElementSibling) return $([el.previousElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n\n    el = prev;\n  }\n\n  return $(prevEls);\n}\n\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\n\nfunction parent(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n\n  return $(parents);\n}\n\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n\n    while (parent) {\n      if (selector) {\n        if ($(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n\n      parent = parent.parentNode;\n    }\n  }\n\n  return $(parents);\n}\n\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return $([]);\n  }\n\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n\n  return closest;\n}\n\nfunction find(selector) {\n  const foundElements = [];\n\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n\n  return $(foundElements);\n}\n\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n\n  return $(children);\n}\n\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n\n  return this;\n}\n\nfunction detach() {\n  return this.remove();\n}\n\nfunction add(...els) {\n  const dom = this;\n  let i;\n  let j;\n\n  for (i = 0; i < els.length; i += 1) {\n    const toAdd = $(els[i]);\n\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n\n  return dom;\n}\n\nfunction empty() {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.nodeType === 1) {\n      for (let j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n\n      el.textContent = '';\n    }\n  }\n\n  return this;\n} // eslint-disable-next-line\n\n\nfunction scrollTo(...args) {\n  const window = (0, _ssrWindow.getWindow)();\n  let [left, top, duration, easing, callback] = args;\n\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    [left, top, duration, callback, easing] = args;\n  }\n\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    const el = this;\n    let currentTop;\n    let currentLeft;\n    let maxTop;\n    let maxLeft;\n    let newTop;\n    let newLeft;\n    let scrollTop; // eslint-disable-line\n\n    let scrollLeft; // eslint-disable-line\n\n    let animateTop = top > 0 || top === 0;\n    let animateLeft = left > 0 || left === 0;\n\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n\n    if (animateTop) {\n      currentTop = el.scrollTop;\n\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n\n    if (!duration) return;\n\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n\n    let startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n    function render(time = new Date().getTime()) {\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      let done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\n\nfunction scrollTop(...args) {\n  let [top, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\n\nfunction scrollLeft(...args) {\n  let [left, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [left, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n} // eslint-disable-next-line\n\n\nfunction animate(initialProps, initialParams) {\n  const window = (0, _ssrWindow.getWindow)();\n  const els = this;\n  const a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n\n    easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n\n      return progress;\n    },\n\n    stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n\n    done(complete) {\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n\n      if (a.que.length > 0) {\n        const que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n\n    animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n\n      const elements = []; // Define & Cache Initials & Units\n\n      a.elements.each((el, index) => {\n        let initialFullValue;\n        let initialValue;\n        let unit;\n        let finalValue;\n        let finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(prop => {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue,\n            initialValue,\n            unit,\n            finalValue,\n            finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      let startTime = null;\n      let time;\n      let elementsDone = 0;\n      let propsDone = 0;\n      let done;\n      let began = false;\n      a.animating = true;\n\n      function render() {\n        time = new Date().getTime();\n        let progress;\n        let easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n\n        elements.forEach(element => {\n          const el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(prop => {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            const {\n              initialValue,\n              finalValue,\n              unit\n            } = el[prop];\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            const currentValue = el[prop].currentValue;\n\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n\n  };\n\n  if (a.elements.length === 0) {\n    return els;\n  }\n\n  let animateInstance;\n\n  for (let i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n\n  return els;\n}\n\nfunction stop() {\n  const els = this;\n\n  for (let i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\n\nconst noTrigger = 'resize scroll'.split(' ');\n\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === 'undefined') {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this.on(name, ...args);\n  }\n\n  return eventHandler;\n}\n\nconst click = shortcut('click');\nexports.click = click;\nconst blur = shortcut('blur');\nexports.blur = blur;\nconst focus = shortcut('focus');\nexports.focus = focus;\nconst focusin = shortcut('focusin');\nexports.focusin = focusin;\nconst focusout = shortcut('focusout');\nexports.focusout = focusout;\nconst keyup = shortcut('keyup');\nexports.keyup = keyup;\nconst keydown = shortcut('keydown');\nexports.keydown = keydown;\nconst keypress = shortcut('keypress');\nexports.keypress = keypress;\nconst submit = shortcut('submit');\nexports.submit = submit;\nconst change = shortcut('change');\nexports.change = change;\nconst mousedown = shortcut('mousedown');\nexports.mousedown = mousedown;\nconst mousemove = shortcut('mousemove');\nexports.mousemove = mousemove;\nconst mouseup = shortcut('mouseup');\nexports.mouseup = mouseup;\nconst mouseenter = shortcut('mouseenter');\nexports.mouseenter = mouseenter;\nconst mouseleave = shortcut('mouseleave');\nexports.mouseleave = mouseleave;\nconst mouseout = shortcut('mouseout');\nexports.mouseout = mouseout;\nconst mouseover = shortcut('mouseover');\nexports.mouseover = mouseover;\nconst touchstart = shortcut('touchstart');\nexports.touchstart = touchstart;\nconst touchend = shortcut('touchend');\nexports.touchend = touchend;\nconst touchmove = shortcut('touchmove');\nexports.touchmove = touchmove;\nconst resize = shortcut('resize');\nexports.resize = resize;\nconst scroll = shortcut('scroll');\nexports.scroll = scroll;\nvar _default = $;\nexports.default = _default;\n\n},{\"ssr-window\":27}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._ = _createClass;\nexports.a = _classCallCheck;\nexports.b = _objectWithoutProperties;\nexports.c = _typeof;\nexports.d = _inherits;\nexports.e = _createSuper;\nexports.f = _slicedToArray;\nexports.g = _get;\nexports.h = _getPrototypeOf;\nexports.i = _set;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    exports.c = _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    exports.c = _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  exports.h = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    exports.g = _get = Reflect.get;\n  } else {\n    exports.g = _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _htmlMaskElement = _interopRequireDefault(require(\"./html-mask-element.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"./mask-element.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\n  (0, _rollupPluginBabelHelpersA0b.d)(HTMLContenteditableMaskElement, _HTMLMaskElement);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(HTMLContenteditableMaskElement);\n\n  function HTMLContenteditableMaskElement() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, HTMLContenteditableMaskElement);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(HTMLContenteditableMaskElement, [{\n    key: \"_unsafeSelectionStart\",\n    get:\n    /**\n      Returns HTMLElement selection start\n      @override\n    */\n    function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      return selection && selection.anchorOffset;\n    }\n    /**\n      Returns HTMLElement selection end\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      return selection && this._unsafeSelectionStart + String(selection).length;\n    }\n    /**\n      Sets HTMLElement selection\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelect\",\n    value: function _unsafeSelect(start, end) {\n      if (!this.rootElement.createRange) return;\n      var range = this.rootElement.createRange();\n      range.setStart(this.input.firstChild || this.input, start);\n      range.setEnd(this.input.lastChild || this.input, end);\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n\n      if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n    /**\n      HTMLElement value\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // $FlowFixMe\n      return this.input.textContent;\n    },\n    set: function set(value) {\n      this.input.textContent = value;\n    }\n  }]);\n  return HTMLContenteditableMaskElement;\n}(_htmlMaskElement.default);\n\nexports.default = HTMLContenteditableMaskElement;\n_holder.default.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/holder.js\":10,\"./html-mask-element.js\":4,\"./mask-element.js\":6}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _maskElement = _interopRequireDefault(require(\"./mask-element.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Bridge between HTMLElement and {@link Masked} */\nvar HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\n  (0, _rollupPluginBabelHelpersA0b.d)(HTMLMaskElement, _MaskElement);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(HTMLMaskElement);\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n\n\n  function HTMLMaskElement(input) {\n    var _this;\n\n    (0, _rollupPluginBabelHelpersA0b.a)(this, HTMLMaskElement);\n    _this = _super.call(this);\n    _this.input = input;\n    _this._handlers = {};\n    return _this;\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(HTMLMaskElement, [{\n    key: \"rootElement\",\n    get: function get() {\n      return this.input.getRootNode ? this.input.getRootNode() : document;\n    }\n    /**\n      Is element in focus\n      @readonly\n    */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      //$FlowFixMe\n      return this.input === this.rootElement.activeElement;\n    }\n    /**\n      Returns HTMLElement selection start\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelectionStart\",\n    get: function get() {\n      return this.input.selectionStart;\n    }\n    /**\n      Returns HTMLElement selection end\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      return this.input.selectionEnd;\n    }\n    /**\n      Sets HTMLElement selection\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelect\",\n    value: function _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    /**\n      HTMLElement value\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.input.value;\n    },\n    set: function set(value) {\n      this.input.value = value;\n    }\n    /**\n      Binds HTMLElement events to mask internal events\n      @override\n    */\n\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents(handlers) {\n      var _this2 = this;\n\n      Object.keys(handlers).forEach(function (event) {\n        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n      });\n    }\n    /**\n      Unbinds HTMLElement events to mask internal events\n      @override\n    */\n\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this3 = this;\n\n      Object.keys(this._handlers).forEach(function (event) {\n        return _this3._toggleEventHandler(event);\n      });\n    }\n    /** */\n\n  }, {\n    key: \"_toggleEventHandler\",\n    value: function _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }]);\n  return HTMLMaskElement;\n}(_maskElement.default);\n\nexports.default = HTMLMaskElement;\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\n_holder.default.HTMLMaskElement = HTMLMaskElement;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/holder.js\":10,\"./mask-element.js\":6}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _utils = require(\"../core/utils.js\");\n\nvar _actionDetails = _interopRequireDefault(require(\"../core/action-details.js\"));\n\nvar _date = _interopRequireDefault(require(\"../masked/date.js\"));\n\nvar _factory = _interopRequireWildcard(require(\"../masked/factory.js\"));\n\nvar _maskElement = _interopRequireDefault(require(\"./mask-element.js\"));\n\nvar _htmlMaskElement = _interopRequireDefault(require(\"./html-mask-element.js\"));\n\nvar _htmlContenteditableMaskElement = _interopRequireDefault(require(\"./html-contenteditable-mask-element.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../masked/pattern.js\");\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"../masked/base.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"../masked/pattern/input-definition.js\");\n\nrequire(\"../masked/pattern/fixed-definition.js\");\n\nrequire(\"../masked/pattern/chunk-tail-details.js\");\n\nrequire(\"../masked/regexp.js\");\n\nrequire(\"../masked/range.js\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"mask\"];\n/** Listens to element events and controls changes between element and {@link Masked} */\n\nvar InputMask = /*#__PURE__*/function () {\n  /**\n    View element\n    @readonly\n  */\n\n  /**\n    Internal {@link Masked} model\n    @readonly\n  */\n\n  /**\n    @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\n    @param {Object} opts\n  */\n  function InputMask(el, opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, InputMask);\n    this.el = el instanceof _maskElement.default ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new _htmlContenteditableMaskElement.default(el) : new _htmlMaskElement.default(el);\n    this.masked = (0, _factory.default)(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n    this._bindEvents(); // refresh\n\n\n    this.updateValue();\n\n    this._onChange();\n  }\n  /** Read or update mask */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(InputMask, [{\n    key: \"mask\",\n    get: function get() {\n      return this.masked.mask;\n    },\n    set: function set(mask) {\n      if (this.maskEquals(mask)) return;\n\n      if (!(mask instanceof _holder.default.Masked) && this.masked.constructor === (0, _factory.maskedClass)(mask)) {\n        this.masked.updateOptions({\n          mask: mask\n        });\n        return;\n      }\n\n      var masked = (0, _factory.default)({\n        mask: mask\n      });\n      masked.unmaskedValue = this.masked.unmaskedValue;\n      this.masked = masked;\n    }\n    /** Raw value */\n\n  }, {\n    key: \"maskEquals\",\n    value: function maskEquals(mask) {\n      return mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof _date.default;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(str) {\n      this.masked.value = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n    /** Unmasked value */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._unmaskedValue;\n    },\n    set: function set(str) {\n      this.masked.unmaskedValue = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n    /** Typed unmasked value */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.masked.typedValue;\n    },\n    set: function set(val) {\n      this.masked.typedValue = val;\n      this.updateControl();\n      this.alignCursor();\n    }\n    /**\n      Starts listening to element events\n      @protected\n    */\n\n  }, {\n    key: \"_bindEvents\",\n    value: function _bindEvents() {\n      this.el.bindEvents({\n        selectionChange: this._saveSelection,\n        input: this._onInput,\n        drop: this._onDrop,\n        click: this._onClick,\n        focus: this._onFocus,\n        commit: this._onChange\n      });\n    }\n    /**\n      Stops listening to element events\n      @protected\n     */\n\n  }, {\n    key: \"_unbindEvents\",\n    value: function _unbindEvents() {\n      if (this.el) this.el.unbindEvents();\n    }\n    /**\n      Fires custom event\n      @protected\n     */\n\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(ev) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var listeners = this._listeners[ev];\n      if (!listeners) return;\n      listeners.forEach(function (l) {\n        return l.apply(void 0, args);\n      });\n    }\n    /**\n      Current selection start\n      @readonly\n    */\n\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n    }\n    /** Current cursor position */\n\n  }, {\n    key: \"cursorPos\",\n    get: function get() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n    },\n    set: function set(pos) {\n      if (!this.el || !this.el.isActive) return;\n      this.el.select(pos, pos);\n\n      this._saveSelection();\n    }\n    /**\n      Stores current selection\n      @protected\n    */\n\n  }, {\n    key: \"_saveSelection\",\n    value: function _saveSelection() {\n      if (this.value !== this.el.value) {\n        console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n      }\n\n      this._selection = {\n        start: this.selectionStart,\n        end: this.cursorPos\n      };\n    }\n    /** Syncronizes model value from view */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue() {\n      this.masked.value = this.el.value;\n      this._value = this.masked.value;\n    }\n    /** Syncronizes view from model value, fires change events */\n\n  }, {\n    key: \"updateControl\",\n    value: function updateControl() {\n      var newUnmaskedValue = this.masked.unmaskedValue;\n      var newValue = this.masked.value;\n      var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n      this._unmaskedValue = newUnmaskedValue;\n      this._value = newValue;\n      if (this.el.value !== newValue) this.el.value = newValue;\n      if (isChanged) this._fireChangeEvents();\n    }\n    /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(opts) {\n      var mask = opts.mask,\n          restOpts = (0, _rollupPluginBabelHelpersA0b.b)(opts, _excluded);\n      var updateMask = !this.maskEquals(mask);\n      var updateOpts = !(0, _utils.objectIncludes)(this.masked, restOpts);\n      if (updateMask) this.mask = mask;\n      if (updateOpts) this.masked.updateOptions(restOpts);\n      if (updateMask || updateOpts) this.updateControl();\n    }\n    /** Updates cursor */\n\n  }, {\n    key: \"updateCursor\",\n    value: function updateCursor(cursorPos) {\n      if (cursorPos == null) return;\n      this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\n\n      this._delayUpdateCursor(cursorPos);\n    }\n    /**\n      Delays cursor update to support mobile browsers\n      @private\n    */\n\n  }, {\n    key: \"_delayUpdateCursor\",\n    value: function _delayUpdateCursor(cursorPos) {\n      var _this = this;\n\n      this._abortUpdateCursor();\n\n      this._changingCursorPos = cursorPos;\n      this._cursorChanging = setTimeout(function () {\n        if (!_this.el) return; // if was destroyed\n\n        _this.cursorPos = _this._changingCursorPos;\n\n        _this._abortUpdateCursor();\n      }, 10);\n    }\n    /**\n      Fires custom events\n      @protected\n    */\n\n  }, {\n    key: \"_fireChangeEvents\",\n    value: function _fireChangeEvents() {\n      this._fireEvent('accept', this._inputEvent);\n\n      if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n    }\n    /**\n      Aborts delayed cursor update\n      @private\n    */\n\n  }, {\n    key: \"_abortUpdateCursor\",\n    value: function _abortUpdateCursor() {\n      if (this._cursorChanging) {\n        clearTimeout(this._cursorChanging);\n        delete this._cursorChanging;\n      }\n    }\n    /** Aligns cursor to nearest available position */\n\n  }, {\n    key: \"alignCursor\",\n    value: function alignCursor() {\n      this.cursorPos = this.masked.nearestInputPos(this.cursorPos, _utils.DIRECTION.LEFT);\n    }\n    /** Aligns cursor only if selection is empty */\n\n  }, {\n    key: \"alignCursorFriendly\",\n    value: function alignCursorFriendly() {\n      if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n\n      this.alignCursor();\n    }\n    /** Adds listener on custom event */\n\n  }, {\n    key: \"on\",\n    value: function on(ev, handler) {\n      if (!this._listeners[ev]) this._listeners[ev] = [];\n\n      this._listeners[ev].push(handler);\n\n      return this;\n    }\n    /** Removes custom event listener */\n\n  }, {\n    key: \"off\",\n    value: function off(ev, handler) {\n      if (!this._listeners[ev]) return this;\n\n      if (!handler) {\n        delete this._listeners[ev];\n        return this;\n      }\n\n      var hIndex = this._listeners[ev].indexOf(handler);\n\n      if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n      return this;\n    }\n    /** Handles view input event */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput(e) {\n      this._inputEvent = e;\n\n      this._abortUpdateCursor(); // fix strange IE behavior\n\n\n      if (!this._selection) return this.updateValue();\n      var details = new _actionDetails.default( // new state\n      this.el.value, this.cursorPos, // old state\n      this.value, this._selection);\n      var oldRawValue = this.masked.rawInputValue;\n      var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset; // force align in remove direction only if no input chars were removed\n      // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n\n      var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : _utils.DIRECTION.NONE;\n      var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n      this.updateControl();\n      this.updateCursor(cursorPos);\n      delete this._inputEvent;\n    }\n    /** Handles view change event and commits model value */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      if (this.value !== this.el.value) {\n        this.updateValue();\n      }\n\n      this.masked.doCommit();\n      this.updateControl();\n\n      this._saveSelection();\n    }\n    /** Handles view drop event, prevents by default */\n\n  }, {\n    key: \"_onDrop\",\n    value: function _onDrop(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n    /** Restore last selection on focus */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(ev) {\n      this.alignCursorFriendly();\n    }\n    /** Restore last selection on focus */\n\n  }, {\n    key: \"_onClick\",\n    value: function _onClick(ev) {\n      this.alignCursorFriendly();\n    }\n    /** Unbind view events and removes element reference */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._unbindEvents(); // $FlowFixMe why not do so?\n\n\n      this._listeners.length = 0; // $FlowFixMe\n\n      delete this.el;\n    }\n  }]);\n  return InputMask;\n}();\n\nexports.default = InputMask;\n_holder.default.InputMask = InputMask;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/action-details.js\":7,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"../masked/base.js\":13,\"../masked/date.js\":14,\"../masked/factory.js\":17,\"../masked/pattern.js\":20,\"../masked/pattern/chunk-tail-details.js\":21,\"../masked/pattern/fixed-definition.js\":22,\"../masked/pattern/input-definition.js\":23,\"../masked/range.js\":25,\"../masked/regexp.js\":26,\"./html-contenteditable-mask-element.js\":3,\"./html-mask-element.js\":4,\"./mask-element.js\":6}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n  Generic element API to use with mask\n  @interface\n*/\nvar MaskElement = /*#__PURE__*/function () {\n  function MaskElement() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskElement);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskElement, [{\n    key: \"selectionStart\",\n    get:\n    /** */\n\n    /** */\n\n    /** */\n\n    /** Safely returns selection start */\n    function get() {\n      var start;\n\n      try {\n        start = this._unsafeSelectionStart;\n      } catch (e) {}\n\n      return start != null ? start : this.value.length;\n    }\n    /** Safely returns selection end */\n\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      var end;\n\n      try {\n        end = this._unsafeSelectionEnd;\n      } catch (e) {}\n\n      return end != null ? end : this.value.length;\n    }\n    /** Safely sets element selection */\n\n  }, {\n    key: \"select\",\n    value: function select(start, end) {\n      if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n      try {\n        this._unsafeSelect(start, end);\n      } catch (e) {}\n    }\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: \"_unsafeSelect\",\n    value: function _unsafeSelect(start, end) {}\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return false;\n    }\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents(handlers) {}\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {}\n  }]);\n  return MaskElement;\n}();\n\nexports.default = MaskElement;\n_holder.default.MaskElement = MaskElement;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/holder.js\":10}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _utils = require(\"./utils.js\");\n\n/** Provides details of changing input */\nvar ActionDetails = /*#__PURE__*/function () {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n  function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, ActionDetails);\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\n\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n  /**\n    Start changing position\n    @readonly\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(ActionDetails, [{\n    key: \"startChangePos\",\n    get: function get() {\n      return Math.min(this.cursorPos, this.oldSelection.start);\n    }\n    /**\n      Inserted symbols count\n      @readonly\n    */\n\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.cursorPos - this.startChangePos;\n    }\n    /**\n      Inserted symbols\n      @readonly\n    */\n\n  }, {\n    key: \"inserted\",\n    get: function get() {\n      return this.value.substr(this.startChangePos, this.insertedCount);\n    }\n    /**\n      Removed symbols count\n      @readonly\n    */\n\n  }, {\n    key: \"removedCount\",\n    get: function get() {\n      // Math.max for opposite operation\n      return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n      this.oldValue.length - this.value.length, 0);\n    }\n    /**\n      Removed symbols\n      @readonly\n    */\n\n  }, {\n    key: \"removed\",\n    get: function get() {\n      return this.oldValue.substr(this.startChangePos, this.removedCount);\n    }\n    /**\n      Unchanged head symbols\n      @readonly\n    */\n\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.value.substring(0, this.startChangePos);\n    }\n    /**\n      Unchanged tail symbols\n      @readonly\n    */\n\n  }, {\n    key: \"tail\",\n    get: function get() {\n      return this.value.substring(this.startChangePos + this.insertedCount);\n    }\n    /**\n      Remove direction\n      @readonly\n    */\n\n  }, {\n    key: \"removeDirection\",\n    get: function get() {\n      if (!this.removedCount || this.insertedCount) return _utils.DIRECTION.NONE; // align right if delete at right or if range removed (event with backspace)\n\n      return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? _utils.DIRECTION.RIGHT : _utils.DIRECTION.LEFT;\n    }\n  }]);\n  return ActionDetails;\n}();\n\nexports.default = ActionDetails;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"./utils.js\":11}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\n/**\n  Provides details of changing model value\n  @param {Object} [details]\n  @param {string} [details.inserted] - Inserted symbols\n  @param {boolean} [details.skip] - Can skip chars\n  @param {number} [details.removeCount] - Removed symbols count\n  @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\n*/\nvar ChangeDetails = /*#__PURE__*/function () {\n  /** Inserted symbols */\n\n  /** Can skip chars */\n\n  /** Additional offset if any changes occurred before tail */\n\n  /** Raw inserted is used by dynamic mask */\n  function ChangeDetails(details) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, ChangeDetails);\n    Object.assign(this, {\n      inserted: '',\n      rawInserted: '',\n      skip: false,\n      tailShift: 0\n    }, details);\n  }\n  /**\n    Aggregate changes\n    @returns {ChangeDetails} `this`\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(ChangeDetails, [{\n    key: \"aggregate\",\n    value: function aggregate(details) {\n      this.rawInserted += details.rawInserted;\n      this.skip = this.skip || details.skip;\n      this.inserted += details.inserted;\n      this.tailShift += details.tailShift;\n      return this;\n    }\n    /** Total offset considering all changes */\n\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.tailShift + this.inserted.length;\n    }\n  }]);\n  return ChangeDetails;\n}();\n\nexports.default = ChangeDetails;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2}],9:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\n/** Provides details of continuous extracted tail */\nvar ContinuousTailDetails = /*#__PURE__*/function () {\n  /** Tail value as string */\n\n  /** Tail start position */\n\n  /** Start position */\n  function ContinuousTailDetails() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var stop = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _rollupPluginBabelHelpersA0b.a)(this, ContinuousTailDetails);\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(ContinuousTailDetails, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(tail) {\n      this.value += String(tail);\n    }\n  }, {\n    key: \"appendTo\",\n    value: function appendTo(masked) {\n      return masked.append(this.toString(), {\n        tail: true\n      }).aggregate(masked._appendPlaceholder());\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        value: this.value,\n        from: this.from,\n        stop: this.stop\n      };\n    },\n    set: function set(state) {\n      Object.assign(this, state);\n    }\n  }, {\n    key: \"shiftBefore\",\n    value: function shiftBefore(pos) {\n      if (this.from >= pos || !this.value.length) return '';\n      var shiftChar = this.value[0];\n      this.value = this.value.slice(1);\n      return shiftChar;\n    }\n  }]);\n  return ContinuousTailDetails;\n}();\n\nexports.default = ContinuousTailDetails;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2}],10:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = IMask;\n\n/**\n * Applies mask on element.\n * @constructor\n * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\n * @param {Object} opts - Custom mask options\n * @return {InputMask}\n */\nfunction IMask(el) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // currently available only for input-like elements\n\n  return new IMask.InputMask(el, opts);\n}\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DIRECTION = void 0;\nexports.escapeRegExp = escapeRegExp;\nexports.forceDirection = forceDirection;\nexports.indexInDirection = indexInDirection;\nexports.isString = isString;\nexports.objectIncludes = objectIncludes;\nexports.posInDirection = posInDirection;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\n/** Checks if value is string */\nfunction isString(str) {\n  return typeof str === 'string' || str instanceof String;\n}\n/**\n  Direction\n  @prop {string} NONE\n  @prop {string} LEFT\n  @prop {string} FORCE_LEFT\n  @prop {string} RIGHT\n  @prop {string} FORCE_RIGHT\n*/\n\n\nvar DIRECTION = {\n  NONE: 'NONE',\n  LEFT: 'LEFT',\n  FORCE_LEFT: 'FORCE_LEFT',\n  RIGHT: 'RIGHT',\n  FORCE_RIGHT: 'FORCE_RIGHT'\n};\n/**\n  Direction\n  @enum {string}\n*/\n\n/** Returns next char index in direction */\n\nexports.DIRECTION = DIRECTION;\n\nfunction indexInDirection(pos, direction) {\n  if (direction === DIRECTION.LEFT) --pos;\n  return pos;\n}\n/** Returns next char position in direction */\n\n\nfunction posInDirection(pos, direction) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n    case DIRECTION.FORCE_LEFT:\n      return --pos;\n\n    case DIRECTION.RIGHT:\n    case DIRECTION.FORCE_RIGHT:\n      return ++pos;\n\n    default:\n      return pos;\n  }\n}\n/** */\n\n\nfunction forceDirection(direction) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n      return DIRECTION.FORCE_LEFT;\n\n    case DIRECTION.RIGHT:\n      return DIRECTION.FORCE_RIGHT;\n\n    default:\n      return direction;\n  }\n}\n/** Escapes regular expression control chars */\n\n\nfunction escapeRegExp(str) {\n  return str.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n} // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n\n\nfunction objectIncludes(b, a) {\n  if (a === b) return true;\n  var arrA = Array.isArray(a),\n      arrB = Array.isArray(b),\n      i;\n\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n\n    for (i = 0; i < a.length; i++) {\n      if (!objectIncludes(a[i], b[i])) return false;\n    }\n\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  if (a && b && (0, _rollupPluginBabelHelpersA0b.c)(a) === 'object' && (0, _rollupPluginBabelHelpersA0b.c)(b) === 'object') {\n    var dateA = a instanceof Date,\n        dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n    var regexpA = a instanceof RegExp,\n        regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n    var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\n\n    for (i = 0; i < keys.length; i++) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = 0; i < keys.length; i++) {\n      if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n    }\n\n    return true;\n  } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n    return a.toString() === b.toString();\n  }\n\n  return false;\n}\n/** Selection range */\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2}],12:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"HTMLContenteditableMaskElement\", {\n  enumerable: true,\n  get: function () {\n    return _htmlContenteditableMaskElement.default;\n  }\n});\nObject.defineProperty(exports, \"HTMLMaskElement\", {\n  enumerable: true,\n  get: function () {\n    return _htmlMaskElement.default;\n  }\n});\nObject.defineProperty(exports, \"InputMask\", {\n  enumerable: true,\n  get: function () {\n    return _input.default;\n  }\n});\nObject.defineProperty(exports, \"MaskElement\", {\n  enumerable: true,\n  get: function () {\n    return _maskElement.default;\n  }\n});\nObject.defineProperty(exports, \"Masked\", {\n  enumerable: true,\n  get: function () {\n    return _base.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedDate\", {\n  enumerable: true,\n  get: function () {\n    return _date.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedDynamic\", {\n  enumerable: true,\n  get: function () {\n    return _dynamic.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedEnum\", {\n  enumerable: true,\n  get: function () {\n    return _enum.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedFunction\", {\n  enumerable: true,\n  get: function () {\n    return _function.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedNumber\", {\n  enumerable: true,\n  get: function () {\n    return _number.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedPattern\", {\n  enumerable: true,\n  get: function () {\n    return _pattern.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedRange\", {\n  enumerable: true,\n  get: function () {\n    return _range.default;\n  }\n});\nObject.defineProperty(exports, \"MaskedRegExp\", {\n  enumerable: true,\n  get: function () {\n    return _regexp.default;\n  }\n});\nObject.defineProperty(exports, \"PIPE_TYPE\", {\n  enumerable: true,\n  get: function () {\n    return _pipe.PIPE_TYPE;\n  }\n});\nObject.defineProperty(exports, \"createMask\", {\n  enumerable: true,\n  get: function () {\n    return _factory.default;\n  }\n});\nObject.defineProperty(exports, \"createPipe\", {\n  enumerable: true,\n  get: function () {\n    return _pipe.createPipe;\n  }\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _holder.default;\n  }\n});\nObject.defineProperty(exports, \"pipe\", {\n  enumerable: true,\n  get: function () {\n    return _pipe.pipe;\n  }\n});\n\nvar _input = _interopRequireDefault(require(\"./controls/input.js\"));\n\nvar _holder = _interopRequireDefault(require(\"./core/holder.js\"));\n\nvar _base = _interopRequireDefault(require(\"./masked/base.js\"));\n\nvar _pattern = _interopRequireDefault(require(\"./masked/pattern.js\"));\n\nvar _enum = _interopRequireDefault(require(\"./masked/enum.js\"));\n\nvar _range = _interopRequireDefault(require(\"./masked/range.js\"));\n\nvar _number = _interopRequireDefault(require(\"./masked/number.js\"));\n\nvar _date = _interopRequireDefault(require(\"./masked/date.js\"));\n\nvar _regexp = _interopRequireDefault(require(\"./masked/regexp.js\"));\n\nvar _function = _interopRequireDefault(require(\"./masked/function.js\"));\n\nvar _dynamic = _interopRequireDefault(require(\"./masked/dynamic.js\"));\n\nvar _factory = _interopRequireDefault(require(\"./masked/factory.js\"));\n\nvar _maskElement = _interopRequireDefault(require(\"./controls/mask-element.js\"));\n\nvar _htmlMaskElement = _interopRequireDefault(require(\"./controls/html-mask-element.js\"));\n\nvar _htmlContenteditableMaskElement = _interopRequireDefault(require(\"./controls/html-contenteditable-mask-element.js\"));\n\nvar _pipe = require(\"./masked/pipe.js\");\n\nrequire(\"./_rollupPluginBabelHelpers-a0b34764.js\");\n\nrequire(\"./core/utils.js\");\n\nrequire(\"./core/action-details.js\");\n\nrequire(\"./core/change-details.js\");\n\nrequire(\"./core/continuous-tail-details.js\");\n\nrequire(\"./masked/pattern/input-definition.js\");\n\nrequire(\"./masked/pattern/fixed-definition.js\");\n\nrequire(\"./masked/pattern/chunk-tail-details.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\ntry {\n  globalThis.IMask = _holder.default;\n} catch (e) {}\n\n},{\"./_rollupPluginBabelHelpers-a0b34764.js\":2,\"./controls/html-contenteditable-mask-element.js\":3,\"./controls/html-mask-element.js\":4,\"./controls/input.js\":5,\"./controls/mask-element.js\":6,\"./core/action-details.js\":7,\"./core/change-details.js\":8,\"./core/continuous-tail-details.js\":9,\"./core/holder.js\":10,\"./core/utils.js\":11,\"./masked/base.js\":13,\"./masked/date.js\":14,\"./masked/dynamic.js\":15,\"./masked/enum.js\":16,\"./masked/factory.js\":17,\"./masked/function.js\":18,\"./masked/number.js\":19,\"./masked/pattern.js\":20,\"./masked/pattern/chunk-tail-details.js\":21,\"./masked/pattern/fixed-definition.js\":22,\"./masked/pattern/input-definition.js\":23,\"./masked/pipe.js\":24,\"./masked/range.js\":25,\"./masked/regexp.js\":26}],13:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../core/change-details.js\"));\n\nvar _continuousTailDetails = _interopRequireDefault(require(\"../core/continuous-tail-details.js\"));\n\nvar _utils = require(\"../core/utils.js\");\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Supported mask type */\n\n/** Provides common masking stuff */\nvar Masked = /*#__PURE__*/function () {\n  // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\n\n  /** @type {Mask} */\n\n  /** */\n  // $FlowFixMe no ideas\n\n  /** Transforms value before mask processing */\n\n  /** Validates if value is acceptable */\n\n  /** Does additional processing in the end of editing */\n\n  /** Format typed value to string */\n\n  /** Parse strgin to get typed value */\n\n  /** Enable characters overwriting */\n\n  /** */\n  function Masked(opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, Masked);\n    this._value = '';\n\n    this._update(Object.assign({}, Masked.DEFAULTS, opts));\n\n    this.isInitialized = true;\n  }\n  /** Sets and applies new options */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(Masked, [{\n    key: \"updateOptions\",\n    value: function updateOptions(opts) {\n      if (!Object.keys(opts).length) return;\n      this.withValueRefresh(this._update.bind(this, opts));\n    }\n    /**\n      Sets new options\n      @protected\n    */\n\n  }, {\n    key: \"_update\",\n    value: function _update(opts) {\n      Object.assign(this, opts);\n    }\n    /** Mask state */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        _value: this.value\n      };\n    },\n    set: function set(state) {\n      this._value = state._value;\n    }\n    /** Resets value */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._value = '';\n    }\n    /** */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(value) {\n      this.resolve(value);\n    }\n    /** Resolve new value */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(value) {\n      this.reset();\n      this.append(value, {\n        input: true\n      }, '');\n      this.doCommit();\n      return this.value;\n    }\n    /** */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.value;\n    },\n    set: function set(value) {\n      this.reset();\n      this.append(value, {}, '');\n      this.doCommit();\n    }\n    /** */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.doParse(this.value);\n    },\n    set: function set(value) {\n      this.value = this.doFormat(value);\n    }\n    /** Value that includes raw user input */\n\n  }, {\n    key: \"rawInputValue\",\n    get: function get() {\n      return this.extractInput(0, this.value.length, {\n        raw: true\n      });\n    },\n    set: function set(value) {\n      this.reset();\n      this.append(value, {\n        raw: true\n      }, '');\n      this.doCommit();\n    }\n    /** */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return true;\n    }\n    /** Finds nearest input position in direction */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      return cursorPos;\n    }\n    /** Extracts value in range considering flags */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return this.value.slice(fromPos, toPos);\n    }\n    /** Extracts tail in range */\n\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return new _continuousTailDetails.default(this.extractInput(fromPos, toPos), fromPos);\n    }\n    /** Appends tail */\n    // $FlowFixMe no ideas\n\n  }, {\n    key: \"appendTail\",\n    value: function appendTail(tail) {\n      if ((0, _utils.isString)(tail)) tail = new _continuousTailDetails.default(String(tail));\n      return tail.appendTo(this);\n    }\n    /** Appends char */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      if (!ch) return new _changeDetails.default();\n      this._value += ch;\n      return new _changeDetails.default({\n        inserted: ch,\n        rawInserted: ch\n      });\n    }\n    /** Appends char */\n\n  }, {\n    key: \"_appendChar\",\n    value: function _appendChar(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var checkTail = arguments.length > 2 ? arguments[2] : undefined;\n      var consistentState = this.state;\n\n      var details = this._appendCharRaw(this.doPrepare(ch, flags), flags);\n\n      if (details.inserted) {\n        var consistentTail;\n        var appended = this.doValidate(flags) !== false;\n\n        if (appended && checkTail != null) {\n          // validation ok, check tail\n          var beforeTailState = this.state;\n\n          if (this.overwrite) {\n            consistentTail = checkTail.state;\n            checkTail.shiftBefore(this.value.length);\n          }\n\n          var tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted === checkTail.toString(); // if ok, rollback state after tail\n\n          if (appended && tailDetails.inserted) this.state = beforeTailState;\n        } // revert all if something went wrong\n\n\n        if (!appended) {\n          details = new _changeDetails.default();\n          this.state = consistentState;\n          if (checkTail && consistentTail) checkTail.state = consistentTail;\n        }\n      }\n\n      return details;\n    }\n    /** Appends optional placeholder at end */\n\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      return new _changeDetails.default();\n    }\n    /** Appends symbols considering flags */\n    // $FlowFixMe no ideas\n\n  }, {\n    key: \"append\",\n    value: function append(str, flags, tail) {\n      if (!(0, _utils.isString)(str)) throw new Error('value should be string');\n      var details = new _changeDetails.default();\n      var checkTail = (0, _utils.isString)(tail) ? new _continuousTailDetails.default(String(tail)) : tail;\n      if (flags && flags.tail) flags._beforeTailState = this.state;\n\n      for (var ci = 0; ci < str.length; ++ci) {\n        details.aggregate(this._appendChar(str[ci], flags, checkTail));\n      } // append tail but aggregate only tailShift\n\n\n      if (checkTail != null) {\n        details.tailShift += this.appendTail(checkTail).tailShift; // TODO it's a good idea to clear state after appending ends\n        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n        // this._resetBeforeTailState();\n      }\n\n      return details;\n    }\n    /** */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\n      return new _changeDetails.default();\n    }\n    /** Calls function and reapplies current value */\n\n  }, {\n    key: \"withValueRefresh\",\n    value: function withValueRefresh(fn) {\n      if (this._refreshing || !this.isInitialized) return fn();\n      this._refreshing = true;\n      var rawInput = this.rawInputValue;\n      var value = this.value;\n      var ret = fn();\n      this.rawInputValue = rawInput; // append lost trailing chars at end\n\n      if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n        this.append(value.slice(this.value.length), {}, '');\n      }\n\n      delete this._refreshing;\n      return ret;\n    }\n    /** */\n\n  }, {\n    key: \"runIsolated\",\n    value: function runIsolated(fn) {\n      if (this._isolated || !this.isInitialized) return fn(this);\n      this._isolated = true;\n      var state = this.state;\n      var ret = fn(this);\n      this.state = state;\n      delete this._isolated;\n      return ret;\n    }\n    /**\n      Prepares string before mask processing\n      @protected\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.prepare ? this.prepare(str, this, flags) : str;\n    }\n    /**\n      Validates if value is acceptable\n      @protected\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n    }\n    /**\n      Does additional processing in the end of editing\n      @protected\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.commit) this.commit(this.value, this);\n    }\n    /** */\n\n  }, {\n    key: \"doFormat\",\n    value: function doFormat(value) {\n      return this.format ? this.format(value, this) : value;\n    }\n    /** */\n\n  }, {\n    key: \"doParse\",\n    value: function doParse(str) {\n      return this.parse ? this.parse(str, this) : str;\n    }\n    /** */\n\n  }, {\n    key: \"splice\",\n    value: function splice(start, deleteCount, inserted, removeDirection) {\n      var tailPos = start + deleteCount;\n      var tail = this.extractTail(tailPos);\n      var startChangePos = this.nearestInputPos(start, removeDirection);\n      var changeDetails = new _changeDetails.default({\n        tailShift: startChangePos - start // adjust tailShift if start was aligned\n\n      }).aggregate(this.remove(startChangePos)).aggregate(this.append(inserted, {\n        input: true\n      }, tail));\n      return changeDetails;\n    }\n  }]);\n  return Masked;\n}();\n\nexports.default = Masked;\nMasked.DEFAULTS = {\n  format: function format(v) {\n    return v;\n  },\n  parse: function parse(v) {\n    return v;\n  }\n};\n_holder.default.Masked = Masked;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11}],14:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _pattern = _interopRequireDefault(require(\"./pattern.js\"));\n\nvar _range = _interopRequireDefault(require(\"./range.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/utils.js\");\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"./base.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"./pattern/input-definition.js\");\n\nrequire(\"./factory.js\");\n\nrequire(\"./pattern/fixed-definition.js\");\n\nrequire(\"./pattern/chunk-tail-details.js\");\n\nrequire(\"./regexp.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Date mask */\nvar MaskedDate = /*#__PURE__*/function (_MaskedPattern) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedDate, _MaskedPattern);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedDate);\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n\n  /** Start date */\n\n  /** End date */\n\n  /** */\n\n  /**\n    @param {Object} opts\n  */\n\n\n  function MaskedDate(opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedDate);\n    return _super.call(this, Object.assign({}, MaskedDate.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedDate, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      if (opts.mask === Date) delete opts.mask;\n      if (opts.pattern) opts.mask = opts.pattern;\n      var blocks = opts.blocks;\n      opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\n\n      if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\n      if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\n\n      if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\n        opts.blocks.m.from = opts.min.getMonth() + 1;\n        opts.blocks.m.to = opts.max.getMonth() + 1;\n\n        if (opts.blocks.m.from === opts.blocks.m.to) {\n          opts.blocks.d.from = opts.min.getDate();\n          opts.blocks.d.to = opts.max.getDate();\n        }\n      }\n\n      Object.assign(opts.blocks, blocks); // add autofix\n\n      Object.keys(opts.blocks).forEach(function (bk) {\n        var b = opts.blocks[bk];\n        if (!('autofix' in b)) b.autofix = opts.autofix;\n      });\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDate.prototype), \"_update\", this).call(this, opts);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate() {\n      var _get2;\n\n      var date = this.date;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDate.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n    }\n    /** Checks if date is exists */\n\n  }, {\n    key: \"isDateExist\",\n    value: function isDateExist(str) {\n      return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n    }\n    /** Parsed Date */\n\n  }, {\n    key: \"date\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(date) {\n      this.typedValue = date;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.isComplete ? (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDate.prototype), \"typedValue\", this) : null;\n    },\n    set: function set(value) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDate.prototype), \"typedValue\", value, this, true);\n    }\n  }]);\n  return MaskedDate;\n}(_pattern.default);\n\nexports.default = MaskedDate;\nMaskedDate.DEFAULTS = {\n  pattern: 'd{.}`m{.}`Y',\n  format: function format(date) {\n    var day = String(date.getDate()).padStart(2, '0');\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var year = date.getFullYear();\n    return [day, month, year].join('.');\n  },\n  parse: function parse(str) {\n    var _str$split = str.split('.'),\n        _str$split2 = (0, _rollupPluginBabelHelpersA0b.f)(_str$split, 3),\n        day = _str$split2[0],\n        month = _str$split2[1],\n        year = _str$split2[2];\n\n    return new Date(year, month - 1, day);\n  }\n};\n\nMaskedDate.GET_DEFAULT_BLOCKS = function () {\n  return {\n    d: {\n      mask: _range.default,\n      from: 1,\n      to: 31,\n      maxLength: 2\n    },\n    m: {\n      mask: _range.default,\n      from: 1,\n      to: 12,\n      maxLength: 2\n    },\n    Y: {\n      mask: _range.default,\n      from: 1900,\n      to: 9999\n    }\n  };\n};\n\n_holder.default.MaskedDate = MaskedDate;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13,\"./factory.js\":17,\"./pattern.js\":20,\"./pattern/chunk-tail-details.js\":21,\"./pattern/fixed-definition.js\":22,\"./pattern/input-definition.js\":23,\"./range.js\":25,\"./regexp.js\":26}],15:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../core/change-details.js\"));\n\nvar _factory = _interopRequireDefault(require(\"./factory.js\"));\n\nvar _base = _interopRequireDefault(require(\"./base.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/utils.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"];\n/** Dynamic mask for choosing apropriate mask in run-time */\n\nvar MaskedDynamic = /*#__PURE__*/function (_Masked) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedDynamic, _Masked);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedDynamic);\n  /** Currently chosen mask */\n\n  /** Compliled {@link Masked} options */\n\n  /** Chooses {@link Masked} depending on input value */\n\n  /**\n    @param {Object} opts\n  */\n\n\n  function MaskedDynamic(opts) {\n    var _this;\n\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedDynamic);\n    _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\n    _this.currentMask = null;\n    return _this;\n  }\n  /**\n    @override\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedDynamic, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\n\n      if ('mask' in opts) {\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return (0, _factory.default)(m);\n        }) : [];\n      }\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var details = this._applyDispatch(ch, flags);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendChar(ch, flags));\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_applyDispatch\",\n    value: function _applyDispatch() {\n      var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n      var inputValue = this.rawInputValue;\n      var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\n      flags._beforeTailState._rawInputValue : inputValue;\n      var tailValue = inputValue.slice(insertValue.length);\n      var prevMask = this.currentMask;\n      var details = new _changeDetails.default();\n      var prevMaskState = prevMask && prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\n\n      this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\n\n      if (this.currentMask) {\n        if (this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset();\n\n          if (insertValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            var d = this.currentMask.append(insertValue, {\n              raw: true\n            });\n            details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n          }\n\n          if (tailValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        } else {\n          // Dispatch can do something bad with state, so\n          // restore prev mask state\n          this.currentMask.state = prevMaskState;\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendPlaceholder());\n      }\n\n      return details;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doDispatch\",\n    value: function doDispatch(appended) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.dispatch(appended, this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate() {\n      var _get2, _this$currentMask;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask = this.currentMask).doValidate.apply(_this$currentMask, args));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.currentMask) this.currentMask.reset();\n      this.compiledMasks.forEach(function (m) {\n        return m.reset();\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.value : '';\n    },\n    set: function set(value) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"value\", value, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.unmaskedValue : '';\n    },\n    set: function set(unmaskedValue) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.typedValue : '';\n    } // probably typedValue should not be used with dynamic\n    ,\n    set: function set(value) {\n      var unmaskedValue = String(value); // double check it\n\n      if (this.currentMask) {\n        this.currentMask.typedValue = value;\n        unmaskedValue = this.currentMask.unmaskedValue;\n      }\n\n      this.unmaskedValue = unmaskedValue;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return !!this.currentMask && this.currentMask.isComplete;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var details = new _changeDetails.default();\n\n      if (this.currentMask) {\n        var _this$currentMask2;\n\n        details.aggregate((_this$currentMask2 = this.currentMask).remove.apply(_this$currentMask2, arguments)) // update with dispatch\n        .aggregate(this._applyDispatch());\n      }\n\n      return details;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return Object.assign({}, (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"state\", this), {\n        _rawInputValue: this.rawInputValue,\n        compiledMasks: this.compiledMasks.map(function (m) {\n          return m.state;\n        }),\n        currentMaskRef: this.currentMask,\n        currentMask: this.currentMask && this.currentMask.state\n      });\n    },\n    set: function set(state) {\n      var compiledMasks = state.compiledMasks,\n          currentMaskRef = state.currentMaskRef,\n          currentMask = state.currentMask,\n          maskedState = (0, _rollupPluginBabelHelpersA0b.b)(state, _excluded);\n      this.compiledMasks.forEach(function (m, mi) {\n        return m.state = compiledMasks[mi];\n      });\n\n      if (currentMaskRef != null) {\n        this.currentMask = currentMaskRef;\n        this.currentMask.state = currentMask;\n      }\n\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"state\", maskedState, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var _this$currentMask3;\n\n      return this.currentMask ? (_this$currentMask3 = this.currentMask).extractInput.apply(_this$currentMask3, arguments) : '';\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var _this$currentMask4, _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.currentMask ? (_this$currentMask4 = this.currentMask).extractTail.apply(_this$currentMask4, args) : (_get3 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get3, [this].concat(args));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.currentMask) this.currentMask.doCommit();\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"doCommit\", this).call(this);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos() {\n      var _this$currentMask5, _get4;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this.currentMask ? (_this$currentMask5 = this.currentMask).nearestInputPos.apply(_this$currentMask5, args) : (_get4 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get4, [this].concat(args));\n    }\n  }, {\n    key: \"overwrite\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.overwrite : (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedDynamic.prototype), \"overwrite\", this);\n    },\n    set: function set(overwrite) {\n      console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\n    }\n  }]);\n  return MaskedDynamic;\n}(_base.default);\n\nexports.default = MaskedDynamic;\nMaskedDynamic.DEFAULTS = {\n  dispatch: function dispatch(appended, masked, flags) {\n    if (!masked.compiledMasks.length) return;\n    var inputValue = masked.rawInputValue; // simulate input\n\n    var inputs = masked.compiledMasks.map(function (m, index) {\n      m.reset();\n      m.append(inputValue, {\n        raw: true\n      });\n      m.append(appended, flags);\n      var weight = m.rawInputValue.length;\n      return {\n        weight: weight,\n        index: index\n      };\n    }); // pop masks with longer values first\n\n    inputs.sort(function (i1, i2) {\n      return i2.weight - i1.weight;\n    });\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\n_holder.default.MaskedDynamic = MaskedDynamic;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13,\"./factory.js\":17}],16:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _pattern = _interopRequireDefault(require(\"./pattern.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/utils.js\");\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"./base.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"./pattern/input-definition.js\");\n\nrequire(\"./factory.js\");\n\nrequire(\"./pattern/fixed-definition.js\");\n\nrequire(\"./pattern/chunk-tail-details.js\");\n\nrequire(\"./regexp.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Pattern which validates enum values */\nvar MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedEnum, _MaskedPattern);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedEnum);\n\n  function MaskedEnum() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedEnum);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedEnum, [{\n    key: \"_update\",\n    value:\n    /**\n      @override\n      @param {Object} opts\n    */\n    function _update(opts) {\n      // TODO type\n      if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedEnum.prototype), \"_update\", this).call(this, opts);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate() {\n      var _this = this,\n          _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.enum.some(function (e) {\n        return e.indexOf(_this.unmaskedValue) >= 0;\n      }) && (_get2 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedEnum.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }]);\n  return MaskedEnum;\n}(_pattern.default);\n\nexports.default = MaskedEnum;\n_holder.default.MaskedEnum = MaskedEnum;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13,\"./factory.js\":17,\"./pattern.js\":20,\"./pattern/chunk-tail-details.js\":21,\"./pattern/fixed-definition.js\":22,\"./pattern/input-definition.js\":23,\"./regexp.js\":26}],17:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createMask;\nexports.maskedClass = maskedClass;\n\nvar _utils = require(\"../core/utils.js\");\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Get Masked class by mask type */\nfunction maskedClass(mask) {\n  if (mask == null) {\n    throw new Error('mask property should be defined');\n  } // $FlowFixMe\n\n\n  if (mask instanceof RegExp) return _holder.default.MaskedRegExp; // $FlowFixMe\n\n  if ((0, _utils.isString)(mask)) return _holder.default.MaskedPattern; // $FlowFixMe\n\n  if (mask instanceof Date || mask === Date) return _holder.default.MaskedDate; // $FlowFixMe\n\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return _holder.default.MaskedNumber; // $FlowFixMe\n\n  if (Array.isArray(mask) || mask === Array) return _holder.default.MaskedDynamic; // $FlowFixMe\n\n  if (_holder.default.Masked && mask.prototype instanceof _holder.default.Masked) return mask; // $FlowFixMe\n\n  if (mask instanceof Function) return _holder.default.MaskedFunction; // $FlowFixMe\n\n  if (mask instanceof _holder.default.Masked) return mask.constructor;\n  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n  // $FlowFixMe\n\n  return _holder.default.Masked;\n}\n/** Creates new {@link Masked} depending on mask type */\n\n\nfunction createMask(opts) {\n  // $FlowFixMe\n  if (_holder.default.Masked && opts instanceof _holder.default.Masked) return opts;\n  opts = Object.assign({}, opts);\n  var mask = opts.mask; // $FlowFixMe\n\n  if (_holder.default.Masked && mask instanceof _holder.default.Masked) return mask;\n  var MaskedClass = maskedClass(mask);\n  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\n  return new MaskedClass(opts);\n}\n\n_holder.default.createMask = createMask;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/holder.js\":10,\"../core/utils.js\":11}],18:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _base = _interopRequireDefault(require(\"./base.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"../core/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Masking by custom Function */\nvar MaskedFunction = /*#__PURE__*/function (_Masked) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedFunction, _Masked);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedFunction);\n\n  function MaskedFunction() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedFunction);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedFunction, [{\n    key: \"_update\",\n    value:\n    /**\n      @override\n      @param {Object} opts\n    */\n    function _update(opts) {\n      if (opts.mask) opts.validate = opts.mask;\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedFunction.prototype), \"_update\", this).call(this, opts);\n    }\n  }]);\n  return MaskedFunction;\n}(_base.default);\n\nexports.default = MaskedFunction;\n_holder.default.MaskedFunction = MaskedFunction;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13}],19:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _utils = require(\"../core/utils.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../core/change-details.js\"));\n\nvar _base = _interopRequireDefault(require(\"./base.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/continuous-tail-details.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedNumber, _Masked);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedNumber);\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n\n  function MaskedNumber(opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedNumber);\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + (0, _utils.escapeRegExp)(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(_utils.escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp((0, _utils.escapeRegExp)(this.thousandsSeparator), 'g');\n    }\n    /** */\n\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = (0, _rollupPluginBabelHelpersA0b.f)(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators((0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n      var appendDetails = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = (0, _rollupPluginBabelHelpersA0b.f)(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new _changeDetails.default({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case _utils.DIRECTION.NONE:\n        case _utils.DIRECTION.LEFT:\n        case _utils.DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === _utils.DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case _utils.DIRECTION.RIGHT:\n        case _utils.DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && (this.min == null || this.min >= 0 || this.min <= this.number) && (this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\n      Is negative allowed\n      @readonly\n    */\n\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n  }]);\n  return MaskedNumber;\n}(_base.default);\n\nexports.default = MaskedNumber;\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\n_holder.default.MaskedNumber = MaskedNumber;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13}],20:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _utils = require(\"../core/utils.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../core/change-details.js\"));\n\nvar _base = _interopRequireDefault(require(\"./base.js\"));\n\nvar _inputDefinition = _interopRequireWildcard(require(\"./pattern/input-definition.js\"));\n\nvar _fixedDefinition = _interopRequireDefault(require(\"./pattern/fixed-definition.js\"));\n\nvar _chunkTailDetails = _interopRequireDefault(require(\"./pattern/chunk-tail-details.js\"));\n\nvar _factory = _interopRequireDefault(require(\"./factory.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"./regexp.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"_blocks\"];\n/**\n  Pattern mask\n  @param {Object} opts\n  @param {Object} opts.blocks\n  @param {Object} opts.definitions\n  @param {string} opts.placeholderChar\n  @param {boolean} opts.lazy\n*/\n\nvar MaskedPattern = /*#__PURE__*/function (_Masked) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedPattern, _Masked);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedPattern);\n  /** */\n\n  /** */\n\n  /** Single char for empty input */\n\n  /** Show placeholder only when needed */\n\n\n  function MaskedPattern() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedPattern); // TODO type $Shape<MaskedPatternOptions>={} does not work\n\n    opts.definitions = Object.assign({}, _inputDefinition.DEFAULT_INPUT_DEFINITIONS, opts.definitions);\n    return _super.call(this, Object.assign({}, MaskedPattern.DEFAULTS, opts));\n  }\n  /**\n    @override\n    @param {Object} opts\n  */\n\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedPattern, [{\n    key: \"_update\",\n    value: function _update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"_update\", this).call(this, opts);\n\n      this._rebuildMask();\n    }\n    /** */\n\n  }, {\n    key: \"_rebuildMask\",\n    value: function _rebuildMask() {\n      var _this = this;\n\n      var defs = this.definitions;\n      this._blocks = [];\n      this._stops = [];\n      this._maskedBlocks = {};\n      var pattern = this.mask;\n      if (!pattern || !defs) return;\n      var unmaskingBlock = false;\n      var optionalBlock = false;\n\n      for (var i = 0; i < pattern.length; ++i) {\n        if (this.blocks) {\n          var _ret = function () {\n            var p = pattern.slice(i);\n            var bNames = Object.keys(_this.blocks).filter(function (bName) {\n              return p.indexOf(bName) === 0;\n            }); // order by key length\n\n            bNames.sort(function (a, b) {\n              return b.length - a.length;\n            }); // use block name with max length\n\n            var bName = bNames[0];\n\n            if (bName) {\n              // $FlowFixMe no ideas\n              var maskedBlock = (0, _factory.default)(Object.assign({\n                parent: _this,\n                lazy: _this.lazy,\n                placeholderChar: _this.placeholderChar,\n                overwrite: _this.overwrite\n              }, _this.blocks[bName]));\n\n              if (maskedBlock) {\n                _this._blocks.push(maskedBlock); // store block index\n\n\n                if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\n\n                _this._maskedBlocks[bName].push(_this._blocks.length - 1);\n              }\n\n              i += bName.length - 1;\n              return \"continue\";\n            }\n          }();\n\n          if (_ret === \"continue\") continue;\n        }\n\n        var char = pattern[i];\n\n        var _isInput = (char in defs);\n\n        if (char === MaskedPattern.STOP_CHAR) {\n          this._stops.push(this._blocks.length);\n\n          continue;\n        }\n\n        if (char === '{' || char === '}') {\n          unmaskingBlock = !unmaskingBlock;\n          continue;\n        }\n\n        if (char === '[' || char === ']') {\n          optionalBlock = !optionalBlock;\n          continue;\n        }\n\n        if (char === MaskedPattern.ESCAPE_CHAR) {\n          ++i;\n          char = pattern[i];\n          if (!char) break;\n          _isInput = false;\n        }\n\n        var def = _isInput ? new _inputDefinition.default({\n          parent: this,\n          lazy: this.lazy,\n          placeholderChar: this.placeholderChar,\n          mask: defs[char],\n          isOptional: optionalBlock\n        }) : new _fixedDefinition.default({\n          char: char,\n          isUnmasking: unmaskingBlock\n        });\n\n        this._blocks.push(def);\n      }\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return Object.assign({}, (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"state\", this), {\n        _blocks: this._blocks.map(function (b) {\n          return b.state;\n        })\n      });\n    },\n    set: function set(state) {\n      var _blocks = state._blocks,\n          maskedState = (0, _rollupPluginBabelHelpersA0b.b)(state, _excluded);\n\n      this._blocks.forEach(function (b, bi) {\n        return b.state = _blocks[bi];\n      });\n\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"state\", maskedState, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"reset\", this).call(this);\n\n      this._blocks.forEach(function (b) {\n        return b.reset();\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return this._blocks.every(function (b) {\n        return b.isComplete;\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      this._blocks.forEach(function (b) {\n        return b.doCommit();\n      });\n\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"doCommit\", this).call(this);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._blocks.reduce(function (str, b) {\n        return str += b.unmaskedValue;\n      }, '');\n    },\n    set: function set(unmaskedValue) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // TODO return _value when not in change?\n      return this._blocks.reduce(function (str, b) {\n        return str += b.value;\n      }, '');\n    },\n    set: function set(value) {\n      (0, _rollupPluginBabelHelpersA0b.i)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"value\", value, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"appendTail\",\n    value: function appendTail(tail) {\n      return (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"appendTail\", this).call(this, tail).aggregate(this._appendPlaceholder());\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var blockIter = this._mapPosToBlock(this.value.length);\n\n      var details = new _changeDetails.default();\n      if (!blockIter) return details;\n\n      for (var bi = blockIter.index;; ++bi) {\n        var _block = this._blocks[bi];\n        if (!_block) break;\n\n        var blockDetails = _block._appendChar(ch, flags);\n\n        var skip = blockDetails.skip;\n        details.aggregate(blockDetails);\n        if (skip || blockDetails.rawInserted) break; // go next char\n      }\n\n      return details;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var _this2 = this;\n\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var chunkTail = new _chunkTailDetails.default();\n      if (fromPos === toPos) return chunkTail;\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {\n        var blockChunk = b.extractTail(bFromPos, bToPos);\n        blockChunk.stop = _this2._findStopBefore(bi);\n        blockChunk.from = _this2._blockStartPos(bi);\n        if (blockChunk instanceof _chunkTailDetails.default) blockChunk.blockIndex = bi;\n        chunkTail.extend(blockChunk);\n      });\n\n      return chunkTail;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (fromPos === toPos) return '';\n      var input = '';\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\n        input += b.extractInput(fromPos, toPos, flags);\n      });\n\n      return input;\n    }\n  }, {\n    key: \"_findStopBefore\",\n    value: function _findStopBefore(blockIndex) {\n      var stopBefore;\n\n      for (var si = 0; si < this._stops.length; ++si) {\n        var stop = this._stops[si];\n        if (stop <= blockIndex) stopBefore = stop;else break;\n      }\n\n      return stopBefore;\n    }\n    /** Appends placeholder depending on laziness */\n\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder(toBlockIndex) {\n      var _this3 = this;\n\n      var details = new _changeDetails.default();\n      if (this.lazy && toBlockIndex == null) return details;\n\n      var startBlockIter = this._mapPosToBlock(this.value.length);\n\n      if (!startBlockIter) return details;\n      var startBlockIndex = startBlockIter.index;\n      var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n      this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\n        if (!b.lazy || toBlockIndex != null) {\n          // $FlowFixMe `_blocks` may not be present\n          var args = b._blocks != null ? [b._blocks.length] : [];\n\n          var bDetails = b._appendPlaceholder.apply(b, args);\n\n          _this3._value += bDetails.inserted;\n          details.aggregate(bDetails);\n        }\n      });\n\n      return details;\n    }\n    /** Finds block in pos */\n\n  }, {\n    key: \"_mapPosToBlock\",\n    value: function _mapPosToBlock(pos) {\n      var accVal = '';\n\n      for (var bi = 0; bi < this._blocks.length; ++bi) {\n        var _block2 = this._blocks[bi];\n        var blockStartPos = accVal.length;\n        accVal += _block2.value;\n\n        if (pos <= accVal.length) {\n          return {\n            index: bi,\n            offset: pos - blockStartPos\n          };\n        }\n      }\n    }\n    /** */\n\n  }, {\n    key: \"_blockStartPos\",\n    value: function _blockStartPos(blockIndex) {\n      return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\n        return pos += b.value.length;\n      }, 0);\n    }\n    /** */\n\n  }, {\n    key: \"_forEachBlocksInRange\",\n    value: function _forEachBlocksInRange(fromPos) {\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var fn = arguments.length > 2 ? arguments[2] : undefined;\n\n      var fromBlockIter = this._mapPosToBlock(fromPos);\n\n      if (fromBlockIter) {\n        var toBlockIter = this._mapPosToBlock(toPos); // process first block\n\n\n        var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n        var fromBlockStartPos = fromBlockIter.offset;\n        var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;\n        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n\n        if (toBlockIter && !isSameBlock) {\n          // process intermediate blocks\n          for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\n            fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\n          } // process last block\n\n\n          fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n        }\n      }\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var removeDetails = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedPattern.prototype), \"remove\", this).call(this, fromPos, toPos);\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\n        removeDetails.aggregate(b.remove(bFromPos, bToPos));\n      });\n\n      return removeDetails;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.DIRECTION.NONE; // TODO refactor - extract alignblock\n\n      var beginBlockData = this._mapPosToBlock(cursorPos) || {\n        index: 0,\n        offset: 0\n      };\n      var beginBlockOffset = beginBlockData.offset,\n          beginBlockIndex = beginBlockData.index;\n      var beginBlock = this._blocks[beginBlockIndex];\n      if (!beginBlock) return cursorPos;\n      var beginBlockCursorPos = beginBlockOffset; // if position inside block - try to adjust it\n\n      if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\n        beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, (0, _utils.forceDirection)(direction));\n      }\n\n      var cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\n      var cursorAtLeft = beginBlockCursorPos === 0; //  cursor is INSIDE first block (not at bounds)\n\n      if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\n      var searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\n\n      if (direction === _utils.DIRECTION.NONE) {\n        // NONE direction used to calculate start input position if no chars were removed\n        // FOR NONE:\n        // -\n        // input|any\n        // ->\n        //  any|input\n        // <-\n        //  filled-input|any\n        // check if first block at left is input\n        if (searchBlockIndex > 0) {\n          var blockIndexAtLeft = searchBlockIndex - 1;\n          var blockAtLeft = this._blocks[blockIndexAtLeft];\n          var blockInputPos = blockAtLeft.nearestInputPos(0, _utils.DIRECTION.NONE); // is input\n\n          if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\n            return this._blockStartPos(searchBlockIndex);\n          }\n        } // ->\n\n\n        var firstInputAtRight = searchBlockIndex;\n\n        for (var bi = firstInputAtRight; bi < this._blocks.length; ++bi) {\n          var blockAtRight = this._blocks[bi];\n\n          var _blockInputPos = blockAtRight.nearestInputPos(0, _utils.DIRECTION.NONE);\n\n          if (!blockAtRight.value.length || _blockInputPos !== blockAtRight.value.length) {\n            return this._blockStartPos(bi) + _blockInputPos;\n          }\n        } // <-\n        // find first non-fixed symbol\n\n\n        for (var _bi = searchBlockIndex - 1; _bi >= 0; --_bi) {\n          var _block3 = this._blocks[_bi];\n\n          var _blockInputPos2 = _block3.nearestInputPos(0, _utils.DIRECTION.NONE); // is input\n\n\n          if (!_block3.value.length || _blockInputPos2 !== _block3.value.length) {\n            return this._blockStartPos(_bi) + _block3.value.length;\n          }\n        }\n\n        return cursorPos;\n      }\n\n      if (direction === _utils.DIRECTION.LEFT || direction === _utils.DIRECTION.FORCE_LEFT) {\n        // -\n        //  any|filled-input\n        // <-\n        //  any|first not empty is not-len-aligned\n        //  not-0-aligned|any\n        // ->\n        //  any|not-len-aligned or end\n        // check if first block at right is filled input\n        var firstFilledBlockIndexAtRight;\n\n        for (var _bi2 = searchBlockIndex; _bi2 < this._blocks.length; ++_bi2) {\n          if (this._blocks[_bi2].value) {\n            firstFilledBlockIndexAtRight = _bi2;\n            break;\n          }\n        }\n\n        if (firstFilledBlockIndexAtRight != null) {\n          var filledBlock = this._blocks[firstFilledBlockIndexAtRight];\n\n          var _blockInputPos3 = filledBlock.nearestInputPos(0, _utils.DIRECTION.RIGHT);\n\n          if (_blockInputPos3 === 0 && filledBlock.unmaskedValue.length) {\n            // filled block is input\n            return this._blockStartPos(firstFilledBlockIndexAtRight) + _blockInputPos3;\n          }\n        } // <-\n        // find this vars\n\n\n        var firstFilledInputBlockIndex = -1;\n        var firstEmptyInputBlockIndex; // TODO consider nested empty inputs\n\n        for (var _bi3 = searchBlockIndex - 1; _bi3 >= 0; --_bi3) {\n          var _block4 = this._blocks[_bi3];\n\n          var _blockInputPos4 = _block4.nearestInputPos(_block4.value.length, _utils.DIRECTION.FORCE_LEFT);\n\n          if (!_block4.value || _blockInputPos4 !== 0) firstEmptyInputBlockIndex = _bi3;\n\n          if (_blockInputPos4 !== 0) {\n            if (_blockInputPos4 !== _block4.value.length) {\n              // aligned inside block - return immediately\n              return this._blockStartPos(_bi3) + _blockInputPos4;\n            } else {\n              // found filled\n              firstFilledInputBlockIndex = _bi3;\n              break;\n            }\n          }\n        }\n\n        if (direction === _utils.DIRECTION.LEFT) {\n          // try find first empty input before start searching position only when not forced\n          for (var _bi4 = firstFilledInputBlockIndex + 1; _bi4 <= Math.min(searchBlockIndex, this._blocks.length - 1); ++_bi4) {\n            var _block5 = this._blocks[_bi4];\n\n            var _blockInputPos5 = _block5.nearestInputPos(0, _utils.DIRECTION.NONE);\n\n            var blockAlignedPos = this._blockStartPos(_bi4) + _blockInputPos5;\n\n            if (blockAlignedPos > cursorPos) break; // if block is not lazy input\n\n            if (_blockInputPos5 !== _block5.value.length) return blockAlignedPos;\n          }\n        } // process overflow\n\n\n        if (firstFilledInputBlockIndex >= 0) {\n          return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\n        } // for lazy if has aligned left inside fixed and has came to the start - use start position\n\n\n        if (direction === _utils.DIRECTION.FORCE_LEFT || this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])) {\n          return 0;\n        }\n\n        if (firstEmptyInputBlockIndex != null) {\n          return this._blockStartPos(firstEmptyInputBlockIndex);\n        } // find first input\n\n\n        for (var _bi5 = searchBlockIndex; _bi5 < this._blocks.length; ++_bi5) {\n          var _block6 = this._blocks[_bi5];\n\n          var _blockInputPos6 = _block6.nearestInputPos(0, _utils.DIRECTION.NONE); // is input\n\n\n          if (!_block6.value.length || _blockInputPos6 !== _block6.value.length) {\n            return this._blockStartPos(_bi5) + _blockInputPos6;\n          }\n        }\n\n        return 0;\n      }\n\n      if (direction === _utils.DIRECTION.RIGHT || direction === _utils.DIRECTION.FORCE_RIGHT) {\n        // ->\n        //  any|not-len-aligned and filled\n        //  any|not-len-aligned\n        // <-\n        //  not-0-aligned or start|any\n        var firstInputBlockAlignedIndex;\n        var firstInputBlockAlignedPos;\n\n        for (var _bi6 = searchBlockIndex; _bi6 < this._blocks.length; ++_bi6) {\n          var _block7 = this._blocks[_bi6];\n\n          var _blockInputPos7 = _block7.nearestInputPos(0, _utils.DIRECTION.NONE);\n\n          if (_blockInputPos7 !== _block7.value.length) {\n            firstInputBlockAlignedPos = this._blockStartPos(_bi6) + _blockInputPos7;\n            firstInputBlockAlignedIndex = _bi6;\n            break;\n          }\n        }\n\n        if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\n          for (var _bi7 = firstInputBlockAlignedIndex; _bi7 < this._blocks.length; ++_bi7) {\n            var _block8 = this._blocks[_bi7];\n\n            var _blockInputPos8 = _block8.nearestInputPos(0, _utils.DIRECTION.FORCE_RIGHT);\n\n            if (_blockInputPos8 !== _block8.value.length) {\n              return this._blockStartPos(_bi7) + _blockInputPos8;\n            }\n          }\n\n          return direction === _utils.DIRECTION.FORCE_RIGHT ? this.value.length : firstInputBlockAlignedPos;\n        }\n\n        for (var _bi8 = Math.min(searchBlockIndex, this._blocks.length - 1); _bi8 >= 0; --_bi8) {\n          var _block9 = this._blocks[_bi8];\n\n          var _blockInputPos9 = _block9.nearestInputPos(_block9.value.length, _utils.DIRECTION.LEFT);\n\n          if (_blockInputPos9 !== 0) {\n            var alignedPos = this._blockStartPos(_bi8) + _blockInputPos9;\n\n            if (alignedPos >= cursorPos) return alignedPos;\n            break;\n          }\n        }\n      }\n\n      return cursorPos;\n    }\n    /** Get block by name */\n\n  }, {\n    key: \"maskedBlock\",\n    value: function maskedBlock(name) {\n      return this.maskedBlocks(name)[0];\n    }\n    /** Get all blocks by name */\n\n  }, {\n    key: \"maskedBlocks\",\n    value: function maskedBlocks(name) {\n      var _this4 = this;\n\n      var indices = this._maskedBlocks[name];\n      if (!indices) return [];\n      return indices.map(function (gi) {\n        return _this4._blocks[gi];\n      });\n    }\n  }]);\n  return MaskedPattern;\n}(_base.default);\n\nexports.default = MaskedPattern;\nMaskedPattern.DEFAULTS = {\n  lazy: true,\n  placeholderChar: '_'\n};\nMaskedPattern.STOP_CHAR = '`';\nMaskedPattern.ESCAPE_CHAR = '\\\\';\nMaskedPattern.InputDefinition = _inputDefinition.default;\nMaskedPattern.FixedDefinition = _fixedDefinition.default;\n\nfunction isInput(block) {\n  if (!block) return false;\n  var value = block.value;\n  return !value || block.nearestInputPos(0, _utils.DIRECTION.NONE) !== value.length;\n}\n\n_holder.default.MaskedPattern = MaskedPattern;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13,\"./factory.js\":17,\"./pattern/chunk-tail-details.js\":21,\"./pattern/fixed-definition.js\":22,\"./pattern/input-definition.js\":23,\"./regexp.js\":26}],21:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../../core/change-details.js\"));\n\nvar _utils = require(\"../../core/utils.js\");\n\nvar _continuousTailDetails = _interopRequireDefault(require(\"../../core/continuous-tail-details.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"chunks\"];\n\nvar ChunksTailDetails = /*#__PURE__*/function () {\n  /** */\n  function ChunksTailDetails() {\n    var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    (0, _rollupPluginBabelHelpersA0b.a)(this, ChunksTailDetails);\n    this.chunks = chunks;\n    this.from = from;\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(ChunksTailDetails, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.chunks.map(String).join('');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: \"extend\",\n    value: function extend(tailChunk) {\n      if (!String(tailChunk)) return;\n      if ((0, _utils.isString)(tailChunk)) tailChunk = new _continuousTailDetails.default(String(tailChunk));\n      var lastChunk = this.chunks[this.chunks.length - 1];\n      var extendLast = lastChunk && (lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\n      tailChunk.from === lastChunk.from + lastChunk.toString().length;\n\n      if (tailChunk instanceof _continuousTailDetails.default) {\n        // check the ability to extend previous chunk\n        if (extendLast) {\n          // extend previous chunk\n          lastChunk.extend(tailChunk.toString());\n        } else {\n          // append new chunk\n          this.chunks.push(tailChunk);\n        }\n      } else if (tailChunk instanceof ChunksTailDetails) {\n        if (tailChunk.stop == null) {\n          // unwrap floating chunks to parent, keeping `from` pos\n          var firstTailChunk;\n\n          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n            firstTailChunk = tailChunk.chunks.shift();\n            firstTailChunk.from += tailChunk.from;\n            this.extend(firstTailChunk);\n          }\n        } // if tail chunk still has value\n\n\n        if (tailChunk.toString()) {\n          // if chunks contains stops, then popup stop to container\n          tailChunk.stop = tailChunk.blockIndex;\n          this.chunks.push(tailChunk);\n        }\n      }\n    }\n  }, {\n    key: \"appendTo\",\n    value: function appendTo(masked) {\n      // $FlowFixMe\n      if (!(masked instanceof _holder.default.MaskedPattern)) {\n        var tail = new _continuousTailDetails.default(this.toString());\n        return tail.appendTo(masked);\n      }\n\n      var details = new _changeDetails.default();\n\n      for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\n        var chunk = this.chunks[ci];\n\n        var lastBlockIter = masked._mapPosToBlock(masked.value.length);\n\n        var stop = chunk.stop;\n        var chunkBlock = void 0;\n\n        if (stop != null && (!lastBlockIter || lastBlockIter.index <= stop)) {\n          if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\n          masked._stops.indexOf(stop) >= 0) {\n            details.aggregate(masked._appendPlaceholder(stop));\n          }\n\n          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n        }\n\n        if (chunkBlock) {\n          var tailDetails = chunkBlock.appendTail(chunk);\n          tailDetails.skip = false; // always ignore skip, it will be set on last\n\n          details.aggregate(tailDetails);\n          masked._value += tailDetails.inserted; // get not inserted chars\n\n          var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n          if (remainChars) details.aggregate(masked.append(remainChars, {\n            tail: true\n          }));\n        } else {\n          details.aggregate(masked.append(chunk.toString(), {\n            tail: true\n          }));\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        chunks: this.chunks.map(function (c) {\n          return c.state;\n        }),\n        from: this.from,\n        stop: this.stop,\n        blockIndex: this.blockIndex\n      };\n    },\n    set: function set(state) {\n      var chunks = state.chunks,\n          props = (0, _rollupPluginBabelHelpersA0b.b)(state, _excluded);\n      Object.assign(this, props);\n      this.chunks = chunks.map(function (cstate) {\n        var chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new _continuousTailDetails.default(); // $FlowFixMe already checked above\n\n        chunk.state = cstate;\n        return chunk;\n      });\n    }\n  }, {\n    key: \"shiftBefore\",\n    value: function shiftBefore(pos) {\n      if (this.from >= pos || !this.chunks.length) return '';\n      var chunkShiftPos = pos - this.from;\n      var ci = 0;\n\n      while (ci < this.chunks.length) {\n        var chunk = this.chunks[ci];\n        var shiftChar = chunk.shiftBefore(chunkShiftPos);\n\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          ++ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n\n        if (shiftChar) return shiftChar;\n      }\n\n      return '';\n    }\n  }]);\n  return ChunksTailDetails;\n}();\n\nexports.default = ChunksTailDetails;\n\n},{\"../../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../../core/change-details.js\":8,\"../../core/continuous-tail-details.js\":9,\"../../core/holder.js\":10,\"../../core/utils.js\":11}],22:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../../core/change-details.js\"));\n\nvar _utils = require(\"../../core/utils.js\");\n\nvar _continuousTailDetails = _interopRequireDefault(require(\"../../core/continuous-tail-details.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PatternFixedDefinition = /*#__PURE__*/function () {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n  function PatternFixedDefinition(opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, PatternFixedDefinition);\n    Object.assign(this, opts);\n    this._value = '';\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(PatternFixedDefinition, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.isUnmasking ? this.value : '';\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._isRawInput = false;\n      this._value = '';\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n      if (!this._value) this._isRawInput = false;\n      return new _changeDetails.default();\n    }\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.DIRECTION.NONE;\n      var minPos = 0;\n      var maxPos = this._value.length;\n\n      switch (direction) {\n        case _utils.DIRECTION.LEFT:\n        case _utils.DIRECTION.FORCE_LEFT:\n          return minPos;\n\n        case _utils.DIRECTION.NONE:\n        case _utils.DIRECTION.RIGHT:\n        case _utils.DIRECTION.FORCE_RIGHT:\n        default:\n          return maxPos;\n      }\n    }\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n    }\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"_appendChar\",\n    value: function _appendChar(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var details = new _changeDetails.default();\n      if (this._value) return details;\n      var appended = this.char === str[0];\n      var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\n      if (isResolved) details.rawInserted = this.char;\n      this._value = details.inserted = this.char;\n      this._isRawInput = isResolved && (flags.raw || flags.input);\n      return details;\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = new _changeDetails.default();\n      if (this._value) return details;\n      this._value = details.inserted = this.char;\n      return details;\n    }\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return new _continuousTailDetails.default('');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: \"appendTail\",\n    value: function appendTail(tail) {\n      if ((0, _utils.isString)(tail)) tail = new _continuousTailDetails.default(String(tail));\n      return tail.appendTo(this);\n    }\n  }, {\n    key: \"append\",\n    value: function append(str, flags, tail) {\n      var details = this._appendChar(str, flags);\n\n      if (tail != null) {\n        details.tailShift += this.appendTail(tail).tailShift;\n      }\n\n      return details;\n    }\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {}\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        _value: this._value,\n        _isRawInput: this._isRawInput\n      };\n    },\n    set: function set(state) {\n      Object.assign(this, state);\n    }\n  }]);\n  return PatternFixedDefinition;\n}();\n\nexports.default = PatternFixedDefinition;\n\n},{\"../../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../../core/change-details.js\":8,\"../../core/continuous-tail-details.js\":9,\"../../core/utils.js\":11}],23:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_INPUT_DEFINITIONS = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _factory = _interopRequireDefault(require(\"../factory.js\"));\n\nvar _changeDetails = _interopRequireDefault(require(\"../../core/change-details.js\"));\n\nvar _utils = require(\"../../core/utils.js\");\n\nrequire(\"../../core/holder.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"mask\"];\nvar DEFAULT_INPUT_DEFINITIONS = {\n  '0': /\\d/,\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n  // http://stackoverflow.com/a/22075070\n  '*': /./\n};\n/** */\n\nexports.DEFAULT_INPUT_DEFINITIONS = DEFAULT_INPUT_DEFINITIONS;\n\nvar PatternInputDefinition = /*#__PURE__*/function () {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n  function PatternInputDefinition(opts) {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, PatternInputDefinition);\n    var mask = opts.mask,\n        blockOpts = (0, _rollupPluginBabelHelpersA0b.b)(opts, _excluded);\n    this.masked = (0, _factory.default)({\n      mask: mask\n    });\n    Object.assign(this, blockOpts);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(PatternInputDefinition, [{\n    key: \"reset\",\n    value: function reset() {\n      this._isFilled = false;\n      this.masked.reset();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      if (fromPos === 0 && toPos >= 1) {\n        this._isFilled = false;\n        return this.masked.remove(fromPos, toPos);\n      }\n\n      return new _changeDetails.default();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : '');\n    }\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.masked.unmaskedValue;\n    }\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return Boolean(this.masked.value) || this.isOptional;\n    }\n  }, {\n    key: \"_appendChar\",\n    value: function _appendChar(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._isFilled) return new _changeDetails.default();\n      var state = this.masked.state; // simulate input\n\n      var details = this.masked._appendChar(str, flags);\n\n      if (details.inserted && this.doValidate(flags) === false) {\n        details.inserted = details.rawInserted = '';\n        this.masked.state = state;\n      }\n\n      if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n        details.inserted = this.placeholderChar;\n      }\n\n      details.skip = !details.inserted && !this.isOptional;\n      this._isFilled = Boolean(details.inserted);\n      return details;\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      var _this$masked;\n\n      return (_this$masked = this.masked).append.apply(_this$masked, arguments);\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = new _changeDetails.default();\n      if (this._isFilled || this.isOptional) return details;\n      this._isFilled = true;\n      details.inserted = this.placeholderChar;\n      return details;\n    }\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var _this$masked2;\n\n      return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);\n    }\n  }, {\n    key: \"appendTail\",\n    value: function appendTail() {\n      var _this$masked3;\n\n      return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);\n    }\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n      return this.masked.extractInput(fromPos, toPos, flags);\n    }\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.DIRECTION.NONE;\n      var minPos = 0;\n      var maxPos = this.value.length;\n      var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n      switch (direction) {\n        case _utils.DIRECTION.LEFT:\n        case _utils.DIRECTION.FORCE_LEFT:\n          return this.isComplete ? boundPos : minPos;\n\n        case _utils.DIRECTION.RIGHT:\n        case _utils.DIRECTION.FORCE_RIGHT:\n          return this.isComplete ? boundPos : maxPos;\n\n        case _utils.DIRECTION.NONE:\n        default:\n          return boundPos;\n      }\n    }\n  }, {\n    key: \"doValidate\",\n    value: function doValidate() {\n      var _this$masked4, _this$parent;\n\n      return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\n    }\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      this.masked.doCommit();\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        masked: this.masked.state,\n        _isFilled: this._isFilled\n      };\n    },\n    set: function set(state) {\n      this.masked.state = state.masked;\n      this._isFilled = state._isFilled;\n    }\n  }]);\n  return PatternInputDefinition;\n}();\n\nexports.default = PatternInputDefinition;\n\n},{\"../../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../../core/change-details.js\":8,\"../../core/holder.js\":10,\"../../core/utils.js\":11,\"../factory.js\":17}],24:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PIPE_TYPE = void 0;\nexports.createPipe = createPipe;\nexports.pipe = pipe;\n\nvar _factory = _interopRequireDefault(require(\"./factory.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/utils.js\");\n\nrequire(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Mask pipe source and destination types */\nvar PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue'\n};\n/** Creates new pipe function depending on mask type, source and destination options */\n\nexports.PIPE_TYPE = PIPE_TYPE;\n\nfunction createPipe(mask) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\n  var masked = (0, _factory.default)(mask);\n  return function (value) {\n    return masked.runIsolated(function (m) {\n      m[from] = value;\n      return m[to];\n    });\n  };\n}\n/** Pipes value through mask depending on mask type, source and destination options */\n\n\nfunction pipe(value) {\n  for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pipeArgs[_key - 1] = arguments[_key];\n  }\n\n  return createPipe.apply(void 0, pipeArgs)(value);\n}\n\n_holder.default.PIPE_TYPE = PIPE_TYPE;\n_holder.default.createPipe = createPipe;\n_holder.default.pipe = pipe;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./factory.js\":17}],25:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _pattern = _interopRequireDefault(require(\"./pattern.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/utils.js\");\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"./base.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"./pattern/input-definition.js\");\n\nrequire(\"./factory.js\");\n\nrequire(\"./pattern/fixed-definition.js\");\n\nrequire(\"./pattern/chunk-tail-details.js\");\n\nrequire(\"./regexp.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Pattern which accepts ranges */\nvar MaskedRange = /*#__PURE__*/function (_MaskedPattern) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedRange, _MaskedPattern);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedRange);\n\n  function MaskedRange() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedRange);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedRange, [{\n    key: \"_matchFrom\",\n    get:\n    /**\n      Optionally sets max length of pattern.\n      Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n    */\n\n    /** Min bound */\n\n    /** Max bound */\n\n    /** */\n    function get() {\n      return this.maxLength - String(this.from).length;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_update\",\n    value: function _update(opts) {\n      // TODO type\n      opts = Object.assign({\n        to: this.to || 0,\n        from: this.from || 0\n      }, opts);\n      var maxLength = String(opts.to).length;\n      if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\n      opts.maxLength = maxLength;\n      var fromStr = String(opts.from).padStart(maxLength, '0');\n      var toStr = String(opts.to).padStart(maxLength, '0');\n      var sameCharsCount = 0;\n\n      while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\n        ++sameCharsCount;\n      }\n\n      opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedRange.prototype), \"_update\", this).call(this, opts);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedRange.prototype), \"isComplete\", this) && Boolean(this.value);\n    }\n  }, {\n    key: \"boundaries\",\n    value: function boundaries(str) {\n      var minstr = '';\n      var maxstr = '';\n\n      var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\n          _ref2 = (0, _rollupPluginBabelHelpersA0b.f)(_ref, 3),\n          placeholder = _ref2[1],\n          num = _ref2[2];\n\n      if (num) {\n        minstr = '0'.repeat(placeholder.length) + num;\n        maxstr = '9'.repeat(placeholder.length) + num;\n      }\n\n      minstr = minstr.padEnd(this.maxLength, '0');\n      maxstr = maxstr.padEnd(this.maxLength, '9');\n      return [minstr, maxstr];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      str = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedRange.prototype), \"doPrepare\", this).call(this, str, flags).replace(/\\D/g, '');\n      if (!this.autofix) return str;\n      var fromStr = String(this.from).padStart(this.maxLength, '0');\n      var toStr = String(this.to).padStart(this.maxLength, '0');\n      var val = this.value;\n      var prepStr = '';\n\n      for (var ci = 0; ci < str.length; ++ci) {\n        var nextVal = val + prepStr + str[ci];\n\n        var _this$boundaries = this.boundaries(nextVal),\n            _this$boundaries2 = (0, _rollupPluginBabelHelpersA0b.f)(_this$boundaries, 2),\n            minstr = _this$boundaries2[0],\n            maxstr = _this$boundaries2[1];\n\n        if (Number(maxstr) < this.from) prepStr += fromStr[nextVal.length - 1];else if (Number(minstr) > this.to) prepStr += toStr[nextVal.length - 1];else prepStr += str[ci];\n      }\n\n      return prepStr;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate() {\n      var _get2;\n\n      var str = this.value;\n      var firstNonZero = str.search(/[^0]/);\n      if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n      var _this$boundaries3 = this.boundaries(str),\n          _this$boundaries4 = (0, _rollupPluginBabelHelpersA0b.f)(_this$boundaries3, 2),\n          minstr = _this$boundaries4[0],\n          maxstr = _this$boundaries4[1];\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedRange.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }]);\n  return MaskedRange;\n}(_pattern.default);\n\nexports.default = MaskedRange;\n_holder.default.MaskedRange = MaskedRange;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13,\"./factory.js\":17,\"./pattern.js\":20,\"./pattern/chunk-tail-details.js\":21,\"./pattern/fixed-definition.js\":22,\"./pattern/input-definition.js\":23,\"./regexp.js\":26}],26:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpersA0b = require(\"../_rollupPluginBabelHelpers-a0b34764.js\");\n\nvar _base = _interopRequireDefault(require(\"./base.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nrequire(\"../core/change-details.js\");\n\nrequire(\"../core/continuous-tail-details.js\");\n\nrequire(\"../core/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Masking by RegExp */\nvar MaskedRegExp = /*#__PURE__*/function (_Masked) {\n  (0, _rollupPluginBabelHelpersA0b.d)(MaskedRegExp, _Masked);\n\n  var _super = (0, _rollupPluginBabelHelpersA0b.e)(MaskedRegExp);\n\n  function MaskedRegExp() {\n    (0, _rollupPluginBabelHelpersA0b.a)(this, MaskedRegExp);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _rollupPluginBabelHelpersA0b._)(MaskedRegExp, [{\n    key: \"_update\",\n    value:\n    /**\n      @override\n      @param {Object} opts\n    */\n    function _update(opts) {\n      if (opts.mask) opts.validate = function (value) {\n        return value.search(opts.mask) >= 0;\n      };\n      (0, _rollupPluginBabelHelpersA0b.g)((0, _rollupPluginBabelHelpersA0b.h)(MaskedRegExp.prototype), \"_update\", this).call(this, opts);\n    }\n  }]);\n  return MaskedRegExp;\n}(_base.default);\n\nexports.default = MaskedRegExp;\n_holder.default.MaskedRegExp = MaskedRegExp;\n\n},{\"../_rollupPluginBabelHelpers-a0b34764.js\":2,\"../core/change-details.js\":8,\"../core/continuous-tail-details.js\":9,\"../core/holder.js\":10,\"../core/utils.js\":11,\"./base.js\":13}],27:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extend = extend;\nexports.getDocument = getDocument;\nexports.getWindow = getWindow;\nexports.ssrWindow = exports.ssrDocument = void 0;\n\n/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\n}\n\nfunction extend(target = {}, src = {}) {\n  Object.keys(src).forEach(key => {\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      extend(target[key], src[key]);\n    }\n  });\n}\n\nconst ssrDocument = {\n  body: {},\n\n  addEventListener() {},\n\n  removeEventListener() {},\n\n  activeElement: {\n    blur() {},\n\n    nodeName: ''\n  },\n\n  querySelector() {\n    return null;\n  },\n\n  querySelectorAll() {\n    return [];\n  },\n\n  getElementById() {\n    return null;\n  },\n\n  createEvent() {\n    return {\n      initEvent() {}\n\n    };\n  },\n\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n\n      setAttribute() {},\n\n      getElementsByTagName() {\n        return [];\n      }\n\n    };\n  },\n\n  createElementNS() {\n    return {};\n  },\n\n  importNode() {\n    return null;\n  },\n\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  }\n};\nexports.ssrDocument = ssrDocument;\n\nfunction getDocument() {\n  const doc = typeof document !== 'undefined' ? document : {};\n  extend(doc, ssrDocument);\n  return doc;\n}\n\nconst ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: ''\n  },\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  },\n  history: {\n    replaceState() {},\n\n    pushState() {},\n\n    go() {},\n\n    back() {}\n\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n\n  addEventListener() {},\n\n  removeEventListener() {},\n\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return '';\n      }\n\n    };\n  },\n\n  Image() {},\n\n  Date() {},\n\n  screen: {},\n\n  setTimeout() {},\n\n  clearTimeout() {},\n\n  matchMedia() {\n    return {};\n  },\n\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === 'undefined') {\n      callback();\n      return null;\n    }\n\n    return setTimeout(callback, 0);\n  },\n\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === 'undefined') {\n      return;\n    }\n\n    clearTimeout(id);\n  }\n\n};\nexports.ssrWindow = ssrWindow;\n\nfunction getWindow() {\n  const win = typeof window !== 'undefined' ? window : {};\n  extend(win, ssrWindow);\n  return win;\n}\n\n},{}],28:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getBreakpoint;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction getBreakpoint(breakpoints, base = 'window', containerEl) {\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = (0, _ssrWindow.getWindow)();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}\n\n},{\"ssr-window\":27}],29:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _setBreakpoint = _interopRequireDefault(require(\"./setBreakpoint.js\"));\n\nvar _getBreakpoint = _interopRequireDefault(require(\"./getBreakpoint.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  setBreakpoint: _setBreakpoint.default,\n  getBreakpoint: _getBreakpoint.default\n};\nexports.default = _default;\n\n},{\"./getBreakpoint.js\":28,\"./setBreakpoint.js\":30}],30:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setBreakpoint;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  }\n\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  (0, _utils.extend)(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}\n\n},{\"../../shared/utils.js\":126}],31:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\n\nvar _default = {\n  checkOverflow\n};\nexports.default = _default;\n\n},{}],32:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addClasses;\n\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\n\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support\n  } = swiper; // prettier-ignore\n\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'pointer-events': !support.touch\n  }, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(' '));\n  swiper.emitContainerClasses();\n}\n\n},{}],33:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _addClasses = _interopRequireDefault(require(\"./addClasses.js\"));\n\nvar _removeClasses = _interopRequireDefault(require(\"./removeClasses.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  addClasses: _addClasses.default,\n  removeClasses: _removeClasses.default\n};\nexports.default = _default;\n\n},{\"./addClasses.js\":32,\"./removeClasses.js\":34}],34:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeClasses;\n\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(' '));\n  swiper.emitContainerClasses();\n}\n\n},{}],35:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../shared/dom.js\"));\n\nvar _utils = require(\"../shared/utils.js\");\n\nvar _getSupport = require(\"../shared/get-support.js\");\n\nvar _getDevice = require(\"../shared/get-device.js\");\n\nvar _getBrowser = require(\"../shared/get-browser.js\");\n\nvar _resize = _interopRequireDefault(require(\"./modules/resize/resize.js\"));\n\nvar _observer = _interopRequireDefault(require(\"./modules/observer/observer.js\"));\n\nvar _eventsEmitter = _interopRequireDefault(require(\"./events-emitter.js\"));\n\nvar _index = _interopRequireDefault(require(\"./update/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"./translate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"./transition/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"./slide/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"./loop/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"./grab-cursor/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"./events/index.js\"));\n\nvar _index8 = _interopRequireDefault(require(\"./breakpoints/index.js\"));\n\nvar _index9 = _interopRequireDefault(require(\"./classes/index.js\"));\n\nvar _index10 = _interopRequireDefault(require(\"./images/index.js\"));\n\nvar _index11 = _interopRequireDefault(require(\"./check-overflow/index.js\"));\n\nvar _defaults = _interopRequireDefault(require(\"./defaults.js\"));\n\nvar _moduleExtendParams = _interopRequireDefault(require(\"./moduleExtendParams.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint no-param-reassign: \"off\" */\nconst prototypes = {\n  eventsEmitter: _eventsEmitter.default,\n  update: _index.default,\n  translate: _index2.default,\n  transition: _index3.default,\n  slide: _index4.default,\n  loop: _index5.default,\n  grabCursor: _index6.default,\n  events: _index7.default,\n  breakpoints: _index8.default,\n  checkOverflow: _index11.default,\n  classes: _index9.default,\n  images: _index10.default\n};\nconst extendedDefaults = {};\n\nclass Swiper {\n  constructor(...args) {\n    let el;\n    let params;\n\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n\n    if (!params) params = {};\n    params = (0, _utils.extend)({}, params);\n    if (el && !params.el) params.el = el;\n\n    if (params.el && (0, _dom.default)(params.el).length > 1) {\n      const swipers = [];\n      (0, _dom.default)(params.el).each(containerEl => {\n        const newParams = (0, _utils.extend)({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    } // Swiper Instance\n\n\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = (0, _getSupport.getSupport)();\n    swiper.device = (0, _getDevice.getDevice)({\n      userAgent: params.userAgent\n    });\n    swiper.browser = (0, _getBrowser.getBrowser)();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        swiper,\n        extendParams: (0, _moduleExtendParams.default)(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    }); // Extend defaults with modules params\n\n    const swiperParams = (0, _utils.extend)({}, _defaults.default, allModulesParams); // Extend defaults with passed params\n\n    swiper.params = (0, _utils.extend)({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = (0, _utils.extend)({}, swiper.params);\n    swiper.passedParams = (0, _utils.extend)({}, params); // add event listeners\n\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    } // Save Dom lib\n\n\n    swiper.$ = _dom.default; // Extend Swiper\n\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: (0, _dom.default)(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        const desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: (0, _utils.now)(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper'); // Init\n\n    if (swiper.params.init) {\n      swiper.init();\n    } // Return app instance\n\n\n    return swiper;\n  }\n\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    swiper.emit('enable');\n  }\n\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n\n    swiper.emit('disable');\n  }\n\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.each(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n\n  slidesPerViewDynamic(view = 'current', exact = false) {\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n\n    return spv;\n  }\n\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    let translated;\n\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate();\n\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n\n      if (!translated) {\n        setTranslate();\n      }\n    }\n\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n\n    swiper.emit('update');\n  }\n\n  changeDirection(newDirection, needUpdate = true) {\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted) return true; // Find el\n\n    const $el = (0, _dom.default)(el || swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return false;\n    }\n\n    el.swiper = swiper;\n\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = (0, _dom.default)(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items\n\n        res.children = options => $el.children(options);\n\n        return res;\n      }\n\n      return $el.children(getWrapperSelector());\n    }; // Find Wrapper\n\n\n    let $wrapperEl = getWrapper();\n\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document = (0, _ssrWindow.getDocument)();\n      const wrapper = document.createElement('div');\n      $wrapperEl = (0, _dom.default)(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each(slideEl => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n    });\n    return true;\n  }\n\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit'); // Set breakpoint\n\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Add Classes\n\n\n    swiper.addClasses(); // Create loop\n\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    } // Update size\n\n\n    swiper.updateSize(); // Update slides\n\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    } // Set Grab Cursor\n\n\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    } // Slide To Initial Slide\n\n\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    } // Attach events\n\n\n    swiper.attachEvents(); // Init Flag\n\n    swiper.initialized = true; // Emit\n\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n\n  destroy(deleteInstance = true, cleanStyles = true) {\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy'); // Init Flag\n\n    swiper.initialized = false; // Detach events\n\n    swiper.detachEvents(); // Destroy loop\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    } // Cleanup styles\n\n\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy'); // Detach emitter events\n\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      (0, _utils.deleteProps)(swiper);\n    }\n\n    swiper.destroyed = true;\n    return null;\n  }\n\n  static extendDefaults(newDefaults) {\n    (0, _utils.extend)(extendedDefaults, newDefaults);\n  }\n\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n\n  static get defaults() {\n    return _defaults.default;\n  }\n\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n\n    Swiper.installModule(module);\n    return Swiper;\n  }\n\n}\n\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([_resize.default, _observer.default]);\nvar _default = Swiper;\nexports.default = _default;\n\n},{\"../shared/dom.js\":119,\"../shared/get-browser.js\":123,\"../shared/get-device.js\":124,\"../shared/get-support.js\":125,\"../shared/utils.js\":126,\"./breakpoints/index.js\":29,\"./check-overflow/index.js\":31,\"./classes/index.js\":33,\"./defaults.js\":36,\"./events-emitter.js\":37,\"./events/index.js\":38,\"./grab-cursor/index.js\":45,\"./images/index.js\":48,\"./loop/index.js\":51,\"./moduleExtendParams.js\":55,\"./modules/observer/observer.js\":56,\"./modules/resize/resize.js\":57,\"./slide/index.js\":58,\"./transition/index.js\":66,\"./translate/index.js\":72,\"./update/index.js\":77,\"ssr-window\":27}],36:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = {\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};\nexports.default = _default;\n\n},{}],37:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/* eslint-disable no-underscore-dangle */\nvar _default = {\n  on(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n\n  once(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler(...args) {\n      self.off(events, onceHandler);\n\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n\n      handler.apply(self, args);\n    }\n\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n\n  onAny(handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n\n    return self;\n  },\n\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n\n    return self;\n  },\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n\n  emit(...args) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n\n};\nexports.default = _default;\n\n},{}],38:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _onTouchStart = _interopRequireDefault(require(\"./onTouchStart.js\"));\n\nvar _onTouchMove = _interopRequireDefault(require(\"./onTouchMove.js\"));\n\nvar _onTouchEnd = _interopRequireDefault(require(\"./onTouchEnd.js\"));\n\nvar _onResize = _interopRequireDefault(require(\"./onResize.js\"));\n\nvar _onClick = _interopRequireDefault(require(\"./onClick.js\"));\n\nvar _onScroll = _interopRequireDefault(require(\"./onScroll.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet dummyEventAttached = false;\n\nfunction dummyEventListener() {}\n\nconst events = (swiper, method) => {\n  const document = (0, _ssrWindow.getDocument)();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method; // Touch Events\n\n  if (!support.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize.default, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', _onResize.default, true);\n  }\n};\n\nfunction attachEvents() {\n  const swiper = this;\n  const document = (0, _ssrWindow.getDocument)();\n  const {\n    params,\n    support\n  } = swiper;\n  swiper.onTouchStart = _onTouchStart.default.bind(swiper);\n  swiper.onTouchMove = _onTouchMove.default.bind(swiper);\n  swiper.onTouchEnd = _onTouchEnd.default.bind(swiper);\n\n  if (params.cssMode) {\n    swiper.onScroll = _onScroll.default.bind(swiper);\n  }\n\n  swiper.onClick = _onClick.default.bind(swiper);\n\n  if (support.touch && !dummyEventAttached) {\n    document.addEventListener('touchstart', dummyEventListener);\n    dummyEventAttached = true;\n  }\n\n  events(swiper, 'on');\n}\n\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\n\nvar _default = {\n  attachEvents,\n  detachEvents\n};\nexports.default = _default;\n\n},{\"./onClick.js\":39,\"./onResize.js\":40,\"./onScroll.js\":41,\"./onTouchEnd.js\":42,\"./onTouchMove.js\":43,\"./onTouchStart.js\":44,\"ssr-window\":27}],39:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onClick;\n\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n\n},{}],40:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onResize;\n\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return; // Breakpoints\n\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  } // Save locks\n\n\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper; // Disable locks on resize\n\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  } // Return locks after resize\n\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n\n},{}],41:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onScroll;\n\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  } // eslint-disable-next-line\n\n\n  if (swiper.translate === -0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}\n\n},{}],42:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onTouchEnd;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = (0, _utils.now)();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = (0, _utils.now)();\n  (0, _utils.nextTick)(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n\n},{\"../../shared/utils.js\":126}],43:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onTouchMove;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onTouchMove(event) {\n  const document = (0, _ssrWindow.getDocument)();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n\n  if (!swiper.allowTouchMove) {\n    // isMoved = true;\n    swiper.allowClick = false;\n\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = (0, _utils.now)();\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n\n  if (data.isTouchEvent && document.activeElement) {\n    if (e.target === document.activeElement && (0, _dom.default)(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n\n  if (!data.startMoving) {\n    return;\n  }\n\n  swiper.allowClick = false;\n\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n\n    data.allowMomentumBounce = false; // Grab Cursor\n\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n\n    swiper.emit('sliderFirstMove', e);\n  }\n\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  } // Directions locks\n\n\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  } // Threshold\n\n\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  } // Update progress\n\n\n  swiper.updateProgress(data.currentTranslate); // Update translate\n\n  swiper.setTranslate(data.currentTranslate);\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126,\"ssr-window\":27}],44:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onTouchStart;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base = this) {\n  function __closestFrom(el) {\n    if (!el || el === (0, _ssrWindow.getDocument)() || el === (0, _ssrWindow.getWindow)()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n    return found || __closestFrom(el.getRootNode().host);\n  }\n\n  return __closestFrom(base);\n}\n\nfunction onTouchStart(event) {\n  const swiper = this;\n  const document = (0, _ssrWindow.getDocument)();\n  const window = (0, _ssrWindow.getWindow)();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let $targetEl = (0, _dom.default)(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return; // change target el for shadow root component\n\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n    $targetEl = (0, _dom.default)(event.path[0]);\n  }\n\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element\n\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, e.target) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = (0, _utils.now)();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n\n  if (e.type !== 'touchstart') {\n    let preventDefault = true;\n    if ($targetEl.is(data.focusableElements)) preventDefault = false;\n\n    if (document.activeElement && (0, _dom.default)(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {\n      document.activeElement.blur();\n    }\n\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n\n  swiper.emit('touchStart', e);\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126,\"ssr-window\":27}],45:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _setGrabCursor = _interopRequireDefault(require(\"./setGrabCursor.js\"));\n\nvar _unsetGrabCursor = _interopRequireDefault(require(\"./unsetGrabCursor.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  setGrabCursor: _setGrabCursor.default,\n  unsetGrabCursor: _unsetGrabCursor.default\n};\nexports.default = _default;\n\n},{\"./setGrabCursor.js\":46,\"./unsetGrabCursor.js\":47}],46:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setGrabCursor;\n\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}\n\n},{}],47:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = unsetGrabCursor;\n\nfunction unsetGrabCursor() {\n  const swiper = this;\n\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n}\n\n},{}],48:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _loadImage = _interopRequireDefault(require(\"./loadImage.js\"));\n\nvar _preloadImages = _interopRequireDefault(require(\"./preloadImages.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  loadImage: _loadImage.default,\n  preloadImages: _preloadImages.default\n};\nexports.default = _default;\n\n},{\"./loadImage.js\":49,\"./preloadImages.js\":50}],49:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadImage;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window = (0, _ssrWindow.getWindow)();\n  let image;\n\n  function onReady() {\n    if (callback) callback();\n  }\n\n  const isPicture = (0, _dom.default)(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n\n      if (sizes) {\n        image.sizes = sizes;\n      }\n\n      if (srcset) {\n        image.srcset = srcset;\n      }\n\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}\n\n},{\"../../shared/dom.js\":119,\"ssr-window\":27}],50:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = preloadImages;\n\nfunction preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n  }\n}\n\n},{}],51:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _loopCreate = _interopRequireDefault(require(\"./loopCreate.js\"));\n\nvar _loopFix = _interopRequireDefault(require(\"./loopFix.js\"));\n\nvar _loopDestroy = _interopRequireDefault(require(\"./loopDestroy.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  loopCreate: _loopCreate.default,\n  loopFix: _loopFix.default,\n  loopDestroy: _loopDestroy.default\n};\nexports.default = _default;\n\n},{\"./loopCreate.js\":52,\"./loopDestroy.js\":53,\"./loopFix.js\":54}],52:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loopCreate;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction loopCreate() {\n  const swiper = this;\n  const document = (0, _ssrWindow.getDocument)();\n  const {\n    params,\n    $wrapperEl\n  } = swiper; // Remove duplicated slides\n\n  const $selector = $wrapperEl.children().length > 0 ? (0, _dom.default)($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = (0, _dom.default)(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index) => {\n    const slide = (0, _dom.default)(el);\n\n    if (index < swiper.loopedSlides) {\n      appendSlides.push(el);\n    }\n\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n      prependSlides.push(el);\n    }\n\n    slide.attr('data-swiper-slide-index', index);\n  });\n\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append((0, _dom.default)(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend((0, _dom.default)(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\n\n},{\"../../shared/dom.js\":119,\"ssr-window\":27}],53:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loopDestroy;\n\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}\n\n},{}],54:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loopFix;\n\nfunction loopFix() {\n  const swiper = this;\n  swiper.emit('beforeLoopFix');\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit('loopFix');\n}\n\n},{}],55:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = moduleExtendParams;\n\nvar _utils = require(\"../shared/utils.js\");\n\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj = {}) {\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      (0, _utils.extend)(allModulesParams, obj);\n      return;\n    }\n\n    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      (0, _utils.extend)(allModulesParams, obj);\n      return;\n    }\n\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    (0, _utils.extend)(allModulesParams, obj);\n  };\n}\n\n},{\"../shared/utils.js\":126}],56:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Observer;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction Observer({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const observers = [];\n  const window = (0, _ssrWindow.getWindow)();\n\n  const attach = (target, options = {}) => {\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n\n  const init = () => {\n    if (!swiper.params.observer) return;\n\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    } // Observe container\n\n\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    }); // Observe wrapper\n\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}\n\n},{\"ssr-window\":27}],57:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Resize;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction Resize({\n  swiper,\n  on,\n  emit\n}) {\n  const window = (0, _ssrWindow.getWindow)();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(({\n        contentBoxSize,\n        contentRect,\n        target\n      }) => {\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}\n\n},{\"ssr-window\":27}],58:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slideTo = _interopRequireDefault(require(\"./slideTo.js\"));\n\nvar _slideToLoop = _interopRequireDefault(require(\"./slideToLoop.js\"));\n\nvar _slideNext = _interopRequireDefault(require(\"./slideNext.js\"));\n\nvar _slidePrev = _interopRequireDefault(require(\"./slidePrev.js\"));\n\nvar _slideReset = _interopRequireDefault(require(\"./slideReset.js\"));\n\nvar _slideToClosest = _interopRequireDefault(require(\"./slideToClosest.js\"));\n\nvar _slideToClickedSlide = _interopRequireDefault(require(\"./slideToClickedSlide.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  slideTo: _slideTo.default,\n  slideToLoop: _slideToLoop.default,\n  slideNext: _slideNext.default,\n  slidePrev: _slidePrev.default,\n  slideReset: _slideReset.default,\n  slideToClosest: _slideToClosest.default,\n  slideToClickedSlide: _slideToClickedSlide.default\n};\nexports.default = _default;\n\n},{\"./slideNext.js\":59,\"./slidePrev.js\":60,\"./slideReset.js\":61,\"./slideTo.js\":62,\"./slideToClickedSlide.js\":63,\"./slideToClosest.js\":64,\"./slideToLoop.js\":65}],59:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideNext;\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideNext(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled) return swiper;\n  let perGroup = params.slidesPerGroup;\n\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n\n},{}],60:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slidePrev;\n\n/* eslint no-unused-vars: \"off\" */\nfunction slidePrev(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return swiper;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n\n  let prevIndex = 0;\n\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n\n},{}],61:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideReset;\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideReset(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n\n},{}],62:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideTo;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction slideTo(index = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  const translate = -snapGrid[snapIndex]; // Update progress\n\n  swiper.updateProgress(translate); // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        (0, _utils.animateCSSModeScroll)({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}\n\n},{\"../../shared/utils.js\":126}],63:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideToClickedSlide;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt((0, _dom.default)(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        (0, _utils.nextTick)(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      (0, _utils.nextTick)(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126}],64:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideToClosest;\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideToClosest(speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}\n\n},{}],65:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = slideToLoop;\n\nfunction slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\n\n},{}],66:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _setTransition = _interopRequireDefault(require(\"./setTransition.js\"));\n\nvar _transitionStart = _interopRequireDefault(require(\"./transitionStart.js\"));\n\nvar _transitionEnd = _interopRequireDefault(require(\"./transitionEnd.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  setTransition: _setTransition.default,\n  transitionStart: _transitionStart.default,\n  transitionEnd: _transitionEnd.default\n};\nexports.default = _default;\n\n},{\"./setTransition.js\":67,\"./transitionEnd.js\":69,\"./transitionStart.js\":70}],67:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setTransition;\n\nfunction setTransition(duration, byController) {\n  const swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}\n\n},{}],68:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transitionEmit;\n\nfunction transitionEmit({\n  swiper,\n  runCallbacks,\n  direction,\n  step\n}) {\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit(`transition${step}`);\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n\n    swiper.emit(`slideChangeTransition${step}`);\n\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\n\n},{}],69:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transitionEnd;\n\nvar _transitionEmit = _interopRequireDefault(require(\"./transitionEmit.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction transitionEnd(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  (0, _transitionEmit.default)({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}\n\n},{\"./transitionEmit.js\":68}],70:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transitionStart;\n\nvar _transitionEmit = _interopRequireDefault(require(\"./transitionEmit.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction transitionStart(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  (0, _transitionEmit.default)({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}\n\n},{\"./transitionEmit.js\":68}],71:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getSwiperTranslate;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction getSwiperTranslate(axis = this.isHorizontal() ? 'x' : 'y') {\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n\n  if (params.cssMode) {\n    return translate;\n  }\n\n  let currentTranslate = (0, _utils.getTranslate)($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\n\n},{\"../../shared/utils.js\":126}],72:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getTranslate = _interopRequireDefault(require(\"./getTranslate.js\"));\n\nvar _setTranslate = _interopRequireDefault(require(\"./setTranslate.js\"));\n\nvar _minTranslate = _interopRequireDefault(require(\"./minTranslate.js\"));\n\nvar _maxTranslate = _interopRequireDefault(require(\"./maxTranslate.js\"));\n\nvar _translateTo = _interopRequireDefault(require(\"./translateTo.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  getTranslate: _getTranslate.default,\n  setTranslate: _setTranslate.default,\n  minTranslate: _minTranslate.default,\n  maxTranslate: _maxTranslate.default,\n  translateTo: _translateTo.default\n};\nexports.default = _default;\n\n},{\"./getTranslate.js\":71,\"./maxTranslate.js\":73,\"./minTranslate.js\":74,\"./setTranslate.js\":75,\"./translateTo.js\":76}],73:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = maxTranslate;\n\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\n\n},{}],74:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = minTranslate;\n\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\n\n},{}],75:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setTranslate;\n\nfunction setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}\n\n},{}],76:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = translateTo;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        (0, _utils.animateCSSModeScroll)({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}\n\n},{\"../../shared/utils.js\":126}],77:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _updateSize = _interopRequireDefault(require(\"./updateSize.js\"));\n\nvar _updateSlides = _interopRequireDefault(require(\"./updateSlides.js\"));\n\nvar _updateAutoHeight = _interopRequireDefault(require(\"./updateAutoHeight.js\"));\n\nvar _updateSlidesOffset = _interopRequireDefault(require(\"./updateSlidesOffset.js\"));\n\nvar _updateSlidesProgress = _interopRequireDefault(require(\"./updateSlidesProgress.js\"));\n\nvar _updateProgress = _interopRequireDefault(require(\"./updateProgress.js\"));\n\nvar _updateSlidesClasses = _interopRequireDefault(require(\"./updateSlidesClasses.js\"));\n\nvar _updateActiveIndex = _interopRequireDefault(require(\"./updateActiveIndex.js\"));\n\nvar _updateClickedSlide = _interopRequireDefault(require(\"./updateClickedSlide.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  updateSize: _updateSize.default,\n  updateSlides: _updateSlides.default,\n  updateAutoHeight: _updateAutoHeight.default,\n  updateSlidesOffset: _updateSlidesOffset.default,\n  updateSlidesProgress: _updateSlidesProgress.default,\n  updateProgress: _updateProgress.default,\n  updateSlidesClasses: _updateSlidesClasses.default,\n  updateActiveIndex: _updateActiveIndex.default,\n  updateClickedSlide: _updateClickedSlide.default\n};\nexports.default = _default;\n\n},{\"./updateActiveIndex.js\":78,\"./updateAutoHeight.js\":79,\"./updateClickedSlide.js\":80,\"./updateProgress.js\":81,\"./updateSize.js\":82,\"./updateSlides.js\":83,\"./updateSlidesClasses.js\":84,\"./updateSlidesOffset.js\":85,\"./updateSlidesProgress.js\":86}],78:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateActiveIndex;\n\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n\n  if (typeof activeIndex === 'undefined') {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    } // Normalize slideIndex\n\n\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n\n    return;\n  } // Get real index\n\n\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}\n\n},{}],79:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateAutoHeight;\n\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n    }\n\n    return swiper.slides.eq(index)[0];\n  }; // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      swiper.visibleSlides.each(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight) swiper.$wrapperEl.css('height', `${newHeight}px`);\n}\n\n},{}],80:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateClickedSlide;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = (0, _dom.default)(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt((0, _dom.default)(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n\n},{\"../../shared/dom.js\":119}],81:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateProgress;\n\nfunction updateProgress(translate) {\n  const swiper = this;\n\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}\n\n},{}],82:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateSize;\n\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  } // Subtract paddings\n\n\n  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\n\n},{}],83:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateSlides;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    (0, _utils.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    (0, _utils.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    (0, _utils.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    (0, _utils.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n}\n\n},{\"../../shared/utils.js\":126}],84:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateSlidesClasses;\n\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  } // Active classes\n\n\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  } // Next Slide\n\n\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  } // Prev Slide\n\n\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n\n  swiper.emitSlidesClasses();\n}\n\n},{}],85:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateSlidesOffset;\n\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\n\n},{}],86:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateSlidesProgress;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction updateSlidesProgress(translate = this && this.translate || 0) {\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate; // Visible Slides\n\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n\n  swiper.visibleSlides = (0, _dom.default)(swiper.visibleSlides);\n}\n\n},{\"../../shared/dom.js\":119}],87:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = A11y;\n\nvar _classesToSelector = _interopRequireDefault(require(\"../../shared/classes-to-selector.js\"));\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction A11y({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: 'swiper-notification',\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide',\n      paginationBulletMessage: 'Go to slide {{index}}',\n      slideLabelMessage: '{{index}} / {{slidesLength}}',\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: 'group'\n    }\n  });\n  let liveRegion = null;\n\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0) return;\n    notification.html('');\n    notification.html(message);\n  }\n\n  function getRandomNumber(size = 16) {\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n\n    return 'x'.repeat(size).replace(/x/g, randomChar);\n  }\n\n  function makeElFocusable($el) {\n    $el.attr('tabIndex', '0');\n  }\n\n  function makeElNotFocusable($el) {\n    $el.attr('tabIndex', '-1');\n  }\n\n  function addElRole($el, role) {\n    $el.attr('role', role);\n  }\n\n  function addElRoleDescription($el, description) {\n    $el.attr('aria-roledescription', description);\n  }\n\n  function addElControls($el, controls) {\n    $el.attr('aria-controls', controls);\n  }\n\n  function addElLabel($el, label) {\n    $el.attr('aria-label', label);\n  }\n\n  function addElId($el, id) {\n    $el.attr('id', id);\n  }\n\n  function addElLive($el, live) {\n    $el.attr('aria-live', live);\n  }\n\n  function disableEl($el) {\n    $el.attr('aria-disabled', true);\n  }\n\n  function enableEl($el) {\n    $el.attr('aria-disabled', false);\n  }\n\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32) return;\n    const params = swiper.params.a11y;\n    const $targetEl = (0, _dom.default)(e.target);\n\n    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n\n    if (swiper.pagination && $targetEl.is((0, _classesToSelector.default)(swiper.params.pagination.bulletClass))) {\n      $targetEl[0].click();\n    }\n  }\n\n  function updateNavigation() {\n    if (swiper.params.loop || !swiper.navigation) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        disableEl($prevEl);\n        makeElNotFocusable($prevEl);\n      } else {\n        enableEl($prevEl);\n        makeElFocusable($prevEl);\n      }\n    }\n\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        disableEl($nextEl);\n        makeElNotFocusable($nextEl);\n      } else {\n        enableEl($nextEl);\n        makeElFocusable($nextEl);\n      }\n    }\n  }\n\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination()) return;\n    swiper.pagination.bullets.each(bulletEl => {\n      const $bulletEl = (0, _dom.default)(bulletEl);\n\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable($bulletEl);\n\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole($bulletEl, 'button');\n          addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n        }\n      }\n\n      if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n        $bulletEl.attr('aria-current', 'true');\n      } else {\n        $bulletEl.removeAttr('aria-current');\n      }\n    });\n  }\n\n  const initNavEl = ($el, wrapperId, message) => {\n    makeElFocusable($el);\n\n    if ($el[0].tagName !== 'BUTTON') {\n      addElRole($el, 'button');\n      $el.on('keydown', onEnterOrSpaceKey);\n    }\n\n    addElLabel($el, message);\n    addElControls($el, wrapperId);\n  };\n\n  function init() {\n    const params = swiper.params.a11y;\n    swiper.$el.append(liveRegion); // Container\n\n    const $containerEl = swiper.$el;\n\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n    }\n\n    if (params.containerMessage) {\n      addElLabel($containerEl, params.containerMessage);\n    } // Wrapper\n\n\n    const $wrapperEl = swiper.$wrapperEl;\n    const wrapperId = $wrapperEl.attr('id') || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\n    addElId($wrapperEl, wrapperId);\n    addElLive($wrapperEl, live); // Slide\n\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription((0, _dom.default)(swiper.slides), params.itemRoleDescriptionMessage);\n    }\n\n    addElRole((0, _dom.default)(swiper.slides), params.slideRole);\n    const slidesLength = swiper.params.loop ? swiper.slides.filter(el => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n    swiper.slides.each((slideEl, index) => {\n      const $slideEl = (0, _dom.default)(slideEl);\n      const slideIndex = swiper.params.loop ? parseInt($slideEl.attr('data-swiper-slide-index'), 10) : index;\n      const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n      addElLabel($slideEl, ariaLabelMessage);\n    }); // Navigation\n\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl && $nextEl.length) {\n      initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.on('keydown', (0, _classesToSelector.default)(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n  }\n\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0) liveRegion.remove();\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl) {\n      $nextEl.off('keydown', onEnterOrSpaceKey);\n    }\n\n    if ($prevEl) {\n      $prevEl.off('keydown', onEnterOrSpaceKey);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.off('keydown', (0, _classesToSelector.default)(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n  }\n\n  on('beforeInit', () => {\n    liveRegion = (0, _dom.default)(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n  });\n  on('afterInit', () => {\n    if (!swiper.params.a11y.enabled) return;\n    init();\n    updateNavigation();\n  });\n  on('toEdge', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updateNavigation();\n  });\n  on('fromEdge', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updateNavigation();\n  });\n  on('paginationUpdate', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updatePagination();\n  });\n  on('destroy', () => {\n    if (!swiper.params.a11y.enabled) return;\n    destroy();\n  });\n}\n\n},{\"../../shared/classes-to-selector.js\":116,\"../../shared/dom.js\":119}],88:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Autoplay;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _utils = require(\"../../shared/utils.js\");\n\n/* eslint no-underscore-dangle: \"off\" */\n\n/* eslint no-use-before-define: \"off\" */\nfunction Autoplay({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n\n  function run() {\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n\n    if ($activeSlideEl.attr('data-swiper-autoplay')) {\n      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n    }\n\n    clearTimeout(timeout);\n    timeout = (0, _utils.nextTick)(() => {\n      let autoplayResult;\n\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit('autoplay');\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit('autoplay');\n      } else {\n        stop();\n      }\n\n      if (swiper.params.cssMode && swiper.autoplay.running) run();else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n\n  function start() {\n    if (typeof timeout !== 'undefined') return false;\n    if (swiper.autoplay.running) return false;\n    swiper.autoplay.running = true;\n    emit('autoplayStart');\n    run();\n    return true;\n  }\n\n  function stop() {\n    if (!swiper.autoplay.running) return false;\n    if (typeof timeout === 'undefined') return false;\n\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = undefined;\n    }\n\n    swiper.autoplay.running = false;\n    emit('autoplayStop');\n    return true;\n  }\n\n  function pause(speed) {\n    if (!swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) return;\n    if (timeout) clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n        swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);\n      });\n    }\n  }\n\n  function onVisibilityChange() {\n    const document = (0, _ssrWindow.getDocument)();\n\n    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n      pause();\n    }\n\n    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;\n    if (e.target !== swiper.$wrapperEl[0]) return;\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      pause();\n    }\n\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n  }\n\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n\n    swiper.autoplay.paused = false;\n    run();\n  }\n\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on('mouseenter', onMouseEnter);\n      swiper.$el.on('mouseleave', onMouseLeave);\n    }\n  }\n\n  function detachMouseEvents() {\n    swiper.$el.off('mouseenter', onMouseEnter);\n    swiper.$el.off('mouseleave', onMouseLeave);\n  }\n\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document = (0, _ssrWindow.getDocument)();\n      document.addEventListener('visibilitychange', onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on('touchEnd', () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n\n    if (swiper.autoplay.running) {\n      stop();\n    }\n\n    const document = (0, _ssrWindow.getDocument)();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}\n\n},{\"../../shared/utils.js\":126,\"ssr-window\":27}],89:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Controller;\n\nvar _utils = require(\"../../shared/utils.js\");\n\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\nfunction Controller({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n\n    }\n  });\n  swiper.controller = {\n    control: undefined\n  };\n\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n\n        return maxIndex;\n      };\n    }();\n\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n\n    let i1;\n    let i3;\n\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n\n    return this;\n  } // xxx: for now i will just save one spline function to to\n\n\n  function getInterpolateFunction(c) {\n    if (!swiper.controller.spline) {\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n  }\n\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n\n    function setControlledTranslate(c) {\n      // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n\n    function setControlledTransition(c) {\n      c.setTransition(duration, swiper);\n\n      if (duration !== 0) {\n        c.transitionStart();\n\n        if (c.params.autoHeight) {\n          (0, _utils.nextTick)(() => {\n            c.updateAutoHeight();\n          });\n        }\n\n        c.$wrapperEl.transitionEnd(() => {\n          if (!controlled) return;\n\n          if (c.params.loop && swiper.params.controller.by === 'slide') {\n            c.loopFix();\n          }\n\n          c.transitionEnd();\n        });\n      }\n    }\n\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n\n  on('beforeInit', () => {\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}\n\n},{\"../../shared/utils.js\":126}],90:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCards;\n\nvar _createShadow = _interopRequireDefault(require(\"../../shared/create-shadow.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nvar _effectVirtualTransitionEnd = _interopRequireDefault(require(\"../../shared/effect-virtual-transition-end.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectCards({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const isSwipeToNext = (i === activeIndex || i === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (i === activeIndex || i === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${rotate}deg)\n        scale(${scaleString})\n      `;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = (0, _createShadow.default)(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    (0, _effectVirtualTransitionEnd.default)({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  (0, _effectInit.default)({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n},{\"../../shared/create-shadow.js\":118,\"../../shared/effect-init.js\":120,\"../../shared/effect-target.js\":121,\"../../shared/effect-virtual-transition-end.js\":122}],91:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCoverflow;\n\nvar _createShadow = _interopRequireDefault(require(\"../../shared/create-shadow.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectCoverflow({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth; // Each slide offset from center\n\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = (0, _createShadow.default)(params, $slideEl, isHorizontal ? 'left' : 'top');\n        }\n\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = (0, _createShadow.default)(params, $slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n\n        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n  };\n\n  (0, _effectInit.default)({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n\n},{\"../../shared/create-shadow.js\":118,\"../../shared/effect-init.js\":120,\"../../shared/effect-target.js\":121}],92:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCreative;\n\nvar _createShadow = _interopRequireDefault(require(\"../../shared/create-shadow.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nvar _effectVirtualTransitionEnd = _interopRequireDefault(require(\"../../shared/effect-virtual-transition-end.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectCreative({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    creativeEffect: {\n      transformEl: null,\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n\n  const getTranslateValue = value => {\n    if (typeof value === 'string') return value;\n    return `${value}px`;\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      $wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      } // set translate\n\n\n      t.forEach((value, index) => {\n        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n      }); // set rotates\n\n      r.forEach((value, index) => {\n        r[index] = data.rotate[index] * Math.abs(progress * multiplier);\n      });\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(', ');\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`; // Set shadows\n\n      if (custom && data.shadow || !custom) {\n        let $shadowEl = $slideEl.children('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0 && data.shadow) {\n          $shadowEl = (0, _createShadow.default)(params, $slideEl);\n        }\n\n        if ($shadowEl.length) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.transform(transform).css({\n        opacity: opacityString\n      });\n\n      if (data.origin) {\n        $targetEl.css('transform-origin', data.origin);\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.creativeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    (0, _effectVirtualTransitionEnd.default)({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n\n  (0, _effectInit.default)({\n    effect: 'creative',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n},{\"../../shared/create-shadow.js\":118,\"../../shared/effect-init.js\":120,\"../../shared/effect-target.js\":121,\"../../shared/effect-virtual-transition-end.js\":122}],93:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCube;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectCube({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      $el,\n      $wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let $cubeShadowEl;\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = (0, _dom.default)('<div class=\"swiper-cube-shadow\"></div>');\n          $wrapperEl.append($cubeShadowEl);\n        }\n\n        $cubeShadowEl.css({\n          height: `${swiperWidth}px`\n        });\n      } else {\n        $cubeShadowEl = $el.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = (0, _dom.default)('<div class=\"swiper-cube-shadow\"></div>');\n          $el.append($cubeShadowEl);\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let slideIndex = i;\n\n      if (isVirtual) {\n        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n      }\n\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n\n      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n\n      if (rtl) {\n        tx = -tx;\n      }\n\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n\n      const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n\n      $slideEl.transform(transform);\n\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if (shadowBefore.length === 0) {\n          shadowBefore = (0, _dom.default)(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n          $slideEl.append(shadowBefore);\n        }\n\n        if (shadowAfter.length === 0) {\n          shadowAfter = (0, _dom.default)(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n          $slideEl.append(shadowAfter);\n        }\n\n        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n      }\n    }\n\n    $wrapperEl.css({\n      '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,\n      'transform-origin': `50% 50% -${swiperSize / 2}px`\n    });\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset = params.shadowOffset;\n        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n      }\n    }\n\n    const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;\n    $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n  };\n\n  const setTransition = duration => {\n    const {\n      $el,\n      slides\n    } = swiper;\n    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      $el.find('.swiper-cube-shadow').transition(duration);\n    }\n  };\n\n  (0, _effectInit.default)({\n    effect: 'cube',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/effect-init.js\":120}],94:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectFade;\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nvar _effectVirtualTransitionEnd = _interopRequireDefault(require(\"../../shared/effect-virtual-transition-end.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectFade({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    fadeEffect: {\n      crossFade: false,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides\n    } = swiper;\n    const params = swiper.params.fadeEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = swiper.slides.eq(i);\n      const offset = $slideEl[0].swiperSlideOffset;\n      let tx = -offset;\n      if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      }\n\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.css({\n        opacity: slideOpacity\n      }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.fadeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration);\n    (0, _effectVirtualTransitionEnd.default)({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n\n  (0, _effectInit.default)({\n    effect: 'fade',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n},{\"../../shared/effect-init.js\":120,\"../../shared/effect-target.js\":121,\"../../shared/effect-virtual-transition-end.js\":122}],95:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectFlip;\n\nvar _createShadow = _interopRequireDefault(require(\"../../shared/create-shadow.js\"));\n\nvar _effectInit = _interopRequireDefault(require(\"../../shared/effect-init.js\"));\n\nvar _effectTarget = _interopRequireDefault(require(\"../../shared/effect-target.js\"));\n\nvar _effectVirtualTransitionEnd = _interopRequireDefault(require(\"../../shared/effect-virtual-transition-end.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EffectFlip({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if (shadowBefore.length === 0) {\n          shadowBefore = (0, _createShadow.default)(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');\n        }\n\n        if (shadowAfter.length === 0) {\n          shadowAfter = (0, _createShadow.default)(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n        }\n\n        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n      }\n\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = (0, _effectTarget.default)(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n    (0, _effectVirtualTransitionEnd.default)({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  (0, _effectInit.default)({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n},{\"../../shared/create-shadow.js\":118,\"../../shared/effect-init.js\":120,\"../../shared/effect-target.js\":121,\"../../shared/effect-virtual-transition-end.js\":122}],96:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = freeMode;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: (0, _utils.now)()\n    });\n  }\n\n  function onTouchEnd({\n    currentPos\n  }) {\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = (0, _utils.now)();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || (0, _utils.now)() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}\n\n},{\"../../shared/utils.js\":126}],97:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Grid;\n\nfunction Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        '-webkit-order': newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`\n    });\n\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\n},{}],98:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HashNavigation;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction HashNavigation({\n  swiper,\n  extendParams,\n  emit,\n  on\n}) {\n  let initialized = false;\n  const document = (0, _ssrWindow.getDocument)();\n  const window = (0, _ssrWindow.getWindow)();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false\n    }\n  });\n\n  const onHashChange = () => {\n    emit('hashChange');\n    const newHash = document.location.hash.replace('#', '');\n    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');\n\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n      if (typeof newIndex === 'undefined') return;\n      swiper.slideTo(newIndex);\n    }\n  };\n\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled) return;\n\n    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n      window.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || '');\n      emit('hashSet');\n    } else {\n      const slide = swiper.slides.eq(swiper.activeIndex);\n      const hash = slide.attr('data-hash') || slide.attr('data-history');\n      document.location.hash = hash || '';\n      emit('hashSet');\n    }\n  };\n\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n    initialized = true;\n    const hash = document.location.hash.replace('#', '');\n\n    if (hash) {\n      const speed = 0;\n\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHash = slide.attr('data-hash') || slide.attr('data-history');\n\n        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);\n        }\n      }\n    }\n\n    if (swiper.params.hashNavigation.watchState) {\n      (0, _dom.default)(window).on('hashchange', onHashChange);\n    }\n  };\n\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      (0, _dom.default)(window).off('hashchange', onHashChange);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"ssr-window\":27}],99:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = History;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction History({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    history: {\n      enabled: false,\n      root: '',\n      replaceState: false,\n      key: 'slides'\n    }\n  });\n  let initialized = false;\n  let paths = {};\n\n  const slugify = text => {\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n  };\n\n  const getPathValues = urlOverride => {\n    const window = (0, _ssrWindow.getWindow)();\n    let location;\n\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window.location;\n    }\n\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n\n  const setHistory = (key, index) => {\n    const window = (0, _ssrWindow.getWindow)();\n    if (!initialized || !swiper.params.history.enabled) return;\n    let location;\n\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window.location;\n    }\n\n    const slide = swiper.slides.eq(index);\n    let value = slugify(slide.attr('data-history'));\n\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n      value = `${root}/${key}/${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key}/${value}`;\n    }\n\n    const currentState = window.history.state;\n\n    if (currentState && currentState.value === value) {\n      return;\n    }\n\n    if (swiper.params.history.replaceState) {\n      window.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHistory = slugify(slide.attr('data-history'));\n\n        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, swiper.paths.value, false);\n  };\n\n  const init = () => {\n    const window = (0, _ssrWindow.getWindow)();\n    if (!swiper.params.history) return;\n\n    if (!window.history || !window.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value) return;\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n\n    if (!swiper.params.history.replaceState) {\n      window.addEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  const destroy = () => {\n    const window = (0, _ssrWindow.getWindow)();\n\n    if (!swiper.params.history.replaceState) {\n      window.removeEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}\n\n},{\"ssr-window\":27}],100:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Keyboard;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable consistent-return */\nfunction Keyboard({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const document = (0, _ssrWindow.getDocument)();\n  const window = (0, _ssrWindow.getWindow)();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n\n  function handle(event) {\n    if (!swiper.enabled) return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40; // Directions locks\n\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return undefined;\n    }\n\n    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n      return undefined;\n    }\n\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false; // Check that swiper should be inside of visible area of window\n\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return undefined;\n      }\n\n      const $el = swiper.$el;\n      const swiperWidth = $el[0].clientWidth;\n      const swiperHeight = $el[0].clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n          inView = true;\n        }\n      }\n\n      if (!inView) return undefined;\n    }\n\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if (isPageDown || isArrowDown) swiper.slideNext();\n      if (isPageUp || isArrowUp) swiper.slidePrev();\n    }\n\n    emit('keyPress', kc);\n    return undefined;\n  }\n\n  function enable() {\n    if (swiper.keyboard.enabled) return;\n    (0, _dom.default)(document).on('keydown', handle);\n    swiper.keyboard.enabled = true;\n  }\n\n  function disable() {\n    if (!swiper.keyboard.enabled) return;\n    (0, _dom.default)(document).off('keydown', handle);\n    swiper.keyboard.enabled = false;\n  }\n\n  on('init', () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"ssr-window\":27}],101:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Lazy;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Lazy({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  extendParams({\n    lazy: {\n      checkInView: false,\n      enabled: false,\n      loadPrevNext: false,\n      loadPrevNextAmount: 1,\n      loadOnTransitionStart: false,\n      scrollingElement: '',\n      elementClass: 'swiper-lazy',\n      loadingClass: 'swiper-lazy-loading',\n      loadedClass: 'swiper-lazy-loaded',\n      preloaderClass: 'swiper-lazy-preloader'\n    }\n  });\n  swiper.lazy = {};\n  let scrollHandlerAttached = false;\n  let initialImageLoaded = false;\n\n  function loadInSlide(index, loadInDuplicate = true) {\n    const params = swiper.params.lazy;\n    if (typeof index === 'undefined') return;\n    if (swiper.slides.length === 0) return;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index}\"]`) : swiper.slides.eq(index);\n    const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n\n    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n      $images.push($slideEl[0]);\n    }\n\n    if ($images.length === 0) return;\n    $images.each(imageEl => {\n      const $imageEl = (0, _dom.default)(imageEl);\n      $imageEl.addClass(params.loadingClass);\n      const background = $imageEl.attr('data-background');\n      const src = $imageEl.attr('data-src');\n      const srcset = $imageEl.attr('data-srcset');\n      const sizes = $imageEl.attr('data-sizes');\n      const $pictureEl = $imageEl.parent('picture');\n      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;\n\n        if (background) {\n          $imageEl.css('background-image', `url(\"${background}\")`);\n          $imageEl.removeAttr('data-background');\n        } else {\n          if (srcset) {\n            $imageEl.attr('srcset', srcset);\n            $imageEl.removeAttr('data-srcset');\n          }\n\n          if (sizes) {\n            $imageEl.attr('sizes', sizes);\n            $imageEl.removeAttr('data-sizes');\n          }\n\n          if ($pictureEl.length) {\n            $pictureEl.children('source').each(sourceEl => {\n              const $source = (0, _dom.default)(sourceEl);\n\n              if ($source.attr('data-srcset')) {\n                $source.attr('srcset', $source.attr('data-srcset'));\n                $source.removeAttr('data-srcset');\n              }\n            });\n          }\n\n          if (src) {\n            $imageEl.attr('src', src);\n            $imageEl.removeAttr('data-src');\n          }\n        }\n\n        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n        $slideEl.find(`.${params.preloaderClass}`).remove();\n\n        if (swiper.params.loop && loadInDuplicate) {\n          const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');\n\n          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n            loadInSlide(originalSlide.index(), false);\n          } else {\n            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n            loadInSlide(duplicatedSlide.index(), false);\n          }\n        }\n\n        emit('lazyImageReady', $slideEl[0], $imageEl[0]);\n\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      });\n      emit('lazyImageLoad', $slideEl[0], $imageEl[0]);\n    });\n  }\n\n  function load() {\n    const {\n      $wrapperEl,\n      params: swiperParams,\n      slides,\n      activeIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n    const params = swiperParams.lazy;\n    let slidesPerView = swiperParams.slidesPerView;\n\n    if (slidesPerView === 'auto') {\n      slidesPerView = 0;\n    }\n\n    function slideExist(index) {\n      if (isVirtual) {\n        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index}\"]`).length) {\n          return true;\n        }\n      } else if (slides[index]) return true;\n\n      return false;\n    }\n\n    function slideIndex(slideEl) {\n      if (isVirtual) {\n        return (0, _dom.default)(slideEl).attr('data-swiper-slide-index');\n      }\n\n      return (0, _dom.default)(slideEl).index();\n    }\n\n    if (!initialImageLoaded) initialImageLoaded = true;\n\n    if (swiper.params.watchSlidesProgress) {\n      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each(slideEl => {\n        const index = isVirtual ? (0, _dom.default)(slideEl).attr('data-swiper-slide-index') : (0, _dom.default)(slideEl).index();\n        loadInSlide(index);\n      });\n    } else if (slidesPerView > 1) {\n      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n        if (slideExist(i)) loadInSlide(i);\n      }\n    } else {\n      loadInSlide(activeIndex);\n    }\n\n    if (params.loadPrevNext) {\n      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n        const amount = params.loadPrevNextAmount;\n        const spv = slidesPerView;\n        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides\n\n        for (let i = activeIndex + slidesPerView; i < maxIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        } // Prev Slides\n\n\n        for (let i = minIndex; i < activeIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        }\n      } else {\n        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n        if (nextSlide.length > 0) loadInSlide(slideIndex(nextSlide));\n        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n        if (prevSlide.length > 0) loadInSlide(slideIndex(prevSlide));\n      }\n    }\n  }\n\n  function checkInViewOnLoad() {\n    const window = (0, _ssrWindow.getWindow)();\n    if (!swiper || swiper.destroyed) return;\n    const $scrollElement = swiper.params.lazy.scrollingElement ? (0, _dom.default)(swiper.params.lazy.scrollingElement) : (0, _dom.default)(window);\n    const isWindow = $scrollElement[0] === window;\n    const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;\n    const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;\n    const swiperOffset = swiper.$el.offset();\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let inView = false;\n    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n\n    for (let i = 0; i < swiperCoord.length; i += 1) {\n      const point = swiperCoord[i];\n\n      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n        inView = true;\n      }\n    }\n\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n\n    if (inView) {\n      load();\n      $scrollElement.off('scroll', checkInViewOnLoad, passiveListener);\n    } else if (!scrollHandlerAttached) {\n      scrollHandlerAttached = true;\n      $scrollElement.on('scroll', checkInViewOnLoad, passiveListener);\n    }\n  }\n\n  on('beforeInit', () => {\n    if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n      swiper.params.preloadImages = false;\n    }\n  });\n  on('init', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('scroll', () => {\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n      load();\n    }\n  });\n  on('scrollbarDragMove resize _freeModeNoMomentumRelease', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('transitionStart', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('slideChange', () => {\n    const {\n      lazy,\n      cssMode,\n      watchSlidesProgress,\n      touchReleaseOnEdges,\n      resistanceRatio\n    } = swiper.params;\n\n    if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n      load();\n    }\n  });\n  Object.assign(swiper.lazy, {\n    load,\n    loadInSlide\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"ssr-window\":27}],102:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Manipulation;\n\nvar _appendSlide = _interopRequireDefault(require(\"./methods/appendSlide.js\"));\n\nvar _prependSlide = _interopRequireDefault(require(\"./methods/prependSlide.js\"));\n\nvar _addSlide = _interopRequireDefault(require(\"./methods/addSlide.js\"));\n\nvar _removeSlide = _interopRequireDefault(require(\"./methods/removeSlide.js\"));\n\nvar _removeAllSlides = _interopRequireDefault(require(\"./methods/removeAllSlides.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Manipulation({\n  swiper\n}) {\n  Object.assign(swiper, {\n    appendSlide: _appendSlide.default.bind(swiper),\n    prependSlide: _prependSlide.default.bind(swiper),\n    addSlide: _addSlide.default.bind(swiper),\n    removeSlide: _removeSlide.default.bind(swiper),\n    removeAllSlides: _removeAllSlides.default.bind(swiper)\n  });\n}\n\n},{\"./methods/addSlide.js\":103,\"./methods/appendSlide.js\":104,\"./methods/prependSlide.js\":105,\"./methods/removeAllSlides.js\":106,\"./methods/removeSlide.js\":107}],103:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addSlide;\n\nfunction addSlide(index, slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n\n  const baseLength = swiper.slides.length;\n\n  if (index <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n\n  if (index >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n\n  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n  const slidesBuffer = [];\n\n  for (let i = baseLength - 1; i >= index; i -= 1) {\n    const currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    $wrapperEl.append(slidesBuffer[i]);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n},{}],104:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = appendSlide;\n\nfunction appendSlide(slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params\n  } = swiper;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n}\n\n},{}],105:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prependSlide;\n\nfunction prependSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  let newActiveIndex = activeIndex + 1;\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.prepend(slides[i]);\n    }\n\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  swiper.slideTo(newActiveIndex, 0, false);\n}\n\n},{}],106:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeAllSlides;\n\nfunction removeAllSlides() {\n  const swiper = this;\n  const slidesIndexes = [];\n\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n\n  swiper.removeSlide(slidesIndexes);\n}\n\n},{}],107:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeSlide;\n\nfunction removeSlide(slidesIndexes) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    }\n\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n},{}],108:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Mousewheel;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable consistent-return */\nfunction Mousewheel({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const window = (0, _ssrWindow.getWindow)();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = (0, _utils.now)();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n    // Legacy\n\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    } // side scrolling on FF with DOMMouseScroll\n\n\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    } // Fall-back if spin cannot be determined\n\n\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n\n    if (swiper.params.mousewheel.thresholdTime && (0, _utils.now)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    } // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n\n\n    if (newEvent.delta >= 6 && (0, _utils.now)() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    } // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n\n\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    } // If you got here is because an animation has been triggered so store the current time\n\n\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n    return false;\n  }\n\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n\n    return false;\n  }\n\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = (0, _dom.default)(swiper.params.mousewheel.eventsTarget);\n    }\n\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta; // Get the scroll positions\n\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: (0, _utils.now)(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      }; // Keep the most recent events\n\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      } // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n\n\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: (0, _utils.now)(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = (0, _utils.nextTick)(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = (0, _utils.nextTick)(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        } // Emit event\n\n\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n\n  function events(method) {\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = (0, _dom.default)(swiper.params.mousewheel.eventsTarget);\n    }\n\n    target[method]('mouseenter', handleMouseEnter);\n    target[method]('mouseleave', handleMouseLeave);\n    target[method]('wheel', handle);\n  }\n\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n\n    if (swiper.mousewheel.enabled) return false;\n    events('on');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n\n    if (!swiper.mousewheel.enabled) return false;\n    events('off');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126,\"ssr-window\":27}],109:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Navigation;\n\nvar _createElementIfNotDefined = _interopRequireDefault(require(\"../../shared/create-element-if-not-defined.js\"));\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Navigation({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock'\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    $nextEl: null,\n    prevEl: null,\n    $prevEl: null\n  };\n\n  function getEl(el) {\n    let $el;\n\n    if (el) {\n      $el = (0, _dom.default)(el);\n\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && $el.length > 1 && swiper.$el.find(el).length === 1) {\n        $el = swiper.$el.find(el);\n      }\n    }\n\n    return $el;\n  }\n\n  function toggleEl($el, disabled) {\n    const params = swiper.params.navigation;\n\n    if ($el && $el.length > 0) {\n      $el[disabled ? 'addClass' : 'removeClass'](params.disabledClass);\n      if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;\n\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n      }\n    }\n  }\n\n  function update() {\n    // Update Navigation Buttons\n    if (swiper.params.loop) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    toggleEl($prevEl, swiper.isBeginning);\n    toggleEl($nextEl, swiper.isEnd);\n  }\n\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop) return;\n    swiper.slidePrev();\n  }\n\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop) return;\n    swiper.slideNext();\n  }\n\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = (0, _createElementIfNotDefined.default)(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: 'swiper-button-next',\n      prevEl: 'swiper-button-prev'\n    });\n    if (!(params.nextEl || params.prevEl)) return;\n    const $nextEl = getEl(params.nextEl);\n    const $prevEl = getEl(params.prevEl);\n\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on('click', onNextClick);\n    }\n\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on('click', onPrevClick);\n    }\n\n    Object.assign(swiper.navigation, {\n      $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n\n    if (!swiper.enabled) {\n      if ($nextEl) $nextEl.addClass(params.lockClass);\n      if ($prevEl) $prevEl.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off('click', onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off('click', onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n\n  on('init', () => {\n    init();\n    update();\n  });\n  on('toEdge fromEdge lock unlock', () => {\n    update();\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl) {\n      $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n\n    if ($prevEl) {\n      $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n  });\n  on('click', (_s, e) => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    const targetEl = e.target;\n\n    if (swiper.params.navigation.hideOnClick && !(0, _dom.default)(targetEl).is($prevEl) && !(0, _dom.default)(targetEl).is($nextEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n      let isHidden;\n\n      if ($nextEl) {\n        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n      } else if ($prevEl) {\n        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if (isHidden === true) {\n        emit('navigationShow');\n      } else {\n        emit('navigationHide');\n      }\n\n      if ($nextEl) {\n        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if ($prevEl) {\n        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n    }\n  });\n  Object.assign(swiper.navigation, {\n    update,\n    init,\n    destroy\n  });\n}\n\n},{\"../../shared/create-element-if-not-defined.js\":117,\"../../shared/dom.js\":119}],110:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Pagination;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _classesToSelector = _interopRequireDefault(require(\"../../shared/classes-to-selector.js\"));\n\nvar _createElementIfNotDefined = _interopRequireDefault(require(\"../../shared/create-element-if-not-defined.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Pagination({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const pfx = 'swiper-pagination';\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: 'span',\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: 'bullets',\n      // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: number => number,\n      formatFractionTotal: number => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    $el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n  }\n\n  function setSideBullets($bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n  }\n\n  function update() {\n    // Render || Update Pagination bullets/items\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el; // Current/Total\n\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n\n      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n        current -= slidesLength - swiper.loopedSlides * 2;\n      }\n\n      if (current > total - 1) current -= total;\n      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;\n    } else if (typeof swiper.snapIndex !== 'undefined') {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    } // Types\n\n\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n\n      if (params.dynamicBullets) {\n        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n          dynamicBulletIndex += current - swiper.previousIndex;\n\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n\n        firstIndex = current - dynamicBulletIndex;\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n\n      bullets.removeClass(['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`).join(' '));\n\n      if ($el.length > 1) {\n        bullets.each(bullet => {\n          const $bullet = (0, _dom.default)(bullet);\n          const bulletIndex = $bullet.index();\n\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n\n            if (bulletIndex === firstIndex) {\n              setSideBullets($bullet, 'prev');\n            }\n\n            if (bulletIndex === lastIndex) {\n              setSideBullets($bullet, 'next');\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              setSideBullets($firstDisplayedBullet, 'prev');\n              setSideBullets($lastDisplayedBullet, 'next');\n            }\n          } else {\n            setSideBullets($firstDisplayedBullet, 'prev');\n            setSideBullets($lastDisplayedBullet, 'next');\n          }\n        }\n      }\n\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? 'right' : 'left';\n        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n      }\n    }\n\n    if (params.type === 'fraction') {\n      $el.find((0, _classesToSelector.default)(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n      $el.find((0, _classesToSelector.default)(params.totalClass)).text(params.formatFractionTotal(total));\n    }\n\n    if (params.type === 'progressbar') {\n      let progressbarDirection;\n\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n      }\n\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n\n      if (progressbarDirection === 'horizontal') {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n\n      $el.find((0, _classesToSelector.default)(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n\n    if (params.type === 'custom' && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      emit('paginationRender', $el[0]);\n    } else {\n      emit('paginationUpdate', $el[0]);\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n    }\n  }\n\n  function render() {\n    // Render Container\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let paginationHTML = '';\n\n    if (params.type === 'bullets') {\n      let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find((0, _classesToSelector.default)(params.bulletClass));\n    }\n\n    if (params.type === 'fraction') {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type === 'progressbar') {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type !== 'custom') {\n      emit('paginationRender', swiper.pagination.$el[0]);\n    }\n  }\n\n  function init() {\n    swiper.params.pagination = (0, _createElementIfNotDefined.default)(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: 'swiper-pagination'\n    });\n    const params = swiper.params.pagination;\n    if (!params.el) return;\n    let $el = (0, _dom.default)(params.el);\n    if ($el.length === 0) return;\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {\n      $el = swiper.$el.find(params.el); // check if it belongs to another nested Swiper\n\n      if ($el.length > 1) {\n        $el = $el.filter(el => {\n          if ((0, _dom.default)(el).parents('.swiper')[0] !== swiper.el) return false;\n          return true;\n        });\n      }\n    }\n\n    if (params.type === 'bullets' && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n\n    $el.addClass(params.modifierClass + params.type);\n    $el.addClass(params.modifierClass + swiper.params.direction);\n\n    if (params.type === 'bullets' && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      dynamicBulletIndex = 0;\n\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n\n    if (params.type === 'progressbar' && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n\n    if (params.clickable) {\n      $el.on('click', (0, _classesToSelector.default)(params.bulletClass), function onClick(e) {\n        e.preventDefault();\n        let index = (0, _dom.default)(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) index += swiper.loopedSlides;\n        swiper.slideTo(index);\n      });\n    }\n\n    Object.assign(swiper.pagination, {\n      $el,\n      el: $el[0]\n    });\n\n    if (!swiper.enabled) {\n      $el.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const $el = swiper.pagination.$el;\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    $el.removeClass(params.modifierClass + swiper.params.direction);\n    if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass) swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n\n    if (params.clickable) {\n      $el.off('click', (0, _classesToSelector.default)(params.bulletClass));\n    }\n  }\n\n  on('init', () => {\n    init();\n    render();\n    update();\n  });\n  on('activeIndexChange', () => {\n    if (swiper.params.loop) {\n      update();\n    } else if (typeof swiper.snapIndex === 'undefined') {\n      update();\n    }\n  });\n  on('snapIndexChange', () => {\n    if (!swiper.params.loop) {\n      update();\n    }\n  });\n  on('slidesLengthChange', () => {\n    if (swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('snapGridLengthChange', () => {\n    if (!swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.pagination;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);\n    }\n  });\n  on('lock unlock', () => {\n    update();\n  });\n  on('click', (_s, e) => {\n    const targetEl = e.target;\n    const {\n      $el\n    } = swiper.pagination;\n\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el.length > 0 && !(0, _dom.default)(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n      const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n\n      if (isHidden === true) {\n        emit('paginationShow');\n      } else {\n        emit('paginationHide');\n      }\n\n      $el.toggleClass(swiper.params.pagination.hiddenClass);\n    }\n  });\n  Object.assign(swiper.pagination, {\n    render,\n    update,\n    init,\n    destroy\n  });\n}\n\n},{\"../../shared/classes-to-selector.js\":116,\"../../shared/create-element-if-not-defined.js\":117,\"../../shared/dom.js\":119}],111:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Parallax;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Parallax({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const $el = (0, _dom.default)(el);\n    const rtlFactor = rtl ? -1 : 1;\n    const p = $el.attr('data-swiper-parallax') || '0';\n    let x = $el.attr('data-swiper-parallax-x');\n    let y = $el.attr('data-swiper-parallax-y');\n    const scale = $el.attr('data-swiper-parallax-scale');\n    const opacity = $el.attr('data-swiper-parallax-opacity');\n\n    if (x || y) {\n      x = x || '0';\n      y = y || '0';\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = '0';\n    } else {\n      y = p;\n      x = '0';\n    }\n\n    if (x.indexOf('%') >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n\n    if (y.indexOf('%') >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n\n    if (typeof opacity !== 'undefined' && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      $el[0].style.opacity = currentOpacity;\n    }\n\n    if (typeof scale === 'undefined' || scale === null) {\n      $el.transform(`translate3d(${x}, ${y}, 0px)`);\n    } else {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n    }\n  };\n\n  const setTranslate = () => {\n    const {\n      $el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n      setTransform(el, progress);\n    });\n    slides.each((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      (0, _dom.default)(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n        setTransform(el, slideProgress);\n      });\n    });\n  };\n\n  const setTransition = (duration = swiper.params.speed) => {\n    const {\n      $el\n    } = swiper;\n    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(parallaxEl => {\n      const $parallaxEl = (0, _dom.default)(parallaxEl);\n      let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;\n      if (duration === 0) parallaxDuration = 0;\n      $parallaxEl.transition(parallaxDuration);\n    });\n  };\n\n  on('beforeInit', () => {\n    if (!swiper.params.parallax.enabled) return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on('init', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTransition', (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled) return;\n    setTransition(duration);\n  });\n}\n\n},{\"../../shared/dom.js\":119}],112:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Scrollbar;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nvar _createElementIfNotDefined = _interopRequireDefault(require(\"../../shared/create-element-if-not-defined.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Scrollbar({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const document = (0, _ssrWindow.getDocument)();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag'\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null,\n    $el: null,\n    $dragEl: null\n  };\n\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl,\n      progress\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n\n    if (rtl) {\n      newPos = -newPos;\n\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n\n    if (params.hide) {\n      clearTimeout(timeout);\n      $el[0].style.opacity = 1;\n      timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1000);\n    }\n  }\n\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  }\n\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    $dragEl[0].style.width = '';\n    $dragEl[0].style.height = '';\n    trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n\n    if (divider >= 1) {\n      $el[0].style.display = 'none';\n    } else {\n      $el[0].style.display = '';\n    }\n\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function getPointerPosition(e) {\n    if (swiper.isHorizontal()) {\n      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;\n    }\n\n    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;\n  }\n\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    $el.transition(0);\n\n    if (params.hide) {\n      $el.css('opacity', 1);\n    }\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', 'none');\n    }\n\n    emit('scrollbarDragStart', e);\n  }\n\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    emit('scrollbarDragMove', e);\n  }\n\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', '');\n      $wrapperEl.transition('');\n    }\n\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = (0, _utils.nextTick)(() => {\n        $el.css('opacity', 0);\n        $el.transition(400);\n      }, 1000);\n    }\n\n    emit('scrollbarDragEnd', e);\n\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n\n  function events(method) {\n    const {\n      scrollbar,\n      touchEventsTouch,\n      touchEventsDesktop,\n      params,\n      support\n    } = swiper;\n    const $el = scrollbar.$el;\n    const target = $el[0];\n    const activeListener = support.passiveListener && params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n\n    if (!support.touch) {\n      target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n      document[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n      document[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n    } else {\n      target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n      target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n      target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n    }\n  }\n\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el) return;\n    events('on');\n  }\n\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el) return;\n    events('off');\n  }\n\n  function init() {\n    const {\n      scrollbar,\n      $el: $swiperEl\n    } = swiper;\n    swiper.params.scrollbar = (0, _createElementIfNotDefined.default)(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let $el = (0, _dom.default)(params.el);\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n\n    if ($dragEl.length === 0) {\n      $dragEl = (0, _dom.default)(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n\n    Object.assign(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0]\n    });\n\n    if (params.draggable) {\n      enableDraggable();\n    }\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function destroy() {\n    disableDraggable();\n  }\n\n  on('init', () => {\n    init();\n    updateSize();\n    setTranslate();\n  });\n  on('update resize observerUpdate lock unlock', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.scrollbar;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  Object.assign(swiper.scrollbar, {\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}\n\n},{\"../../shared/create-element-if-not-defined.js\":117,\"../../shared/dom.js\":119,\"../../shared/utils.js\":126,\"ssr-window\":27}],113:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Thumb;\n\nvar _utils = require(\"../../shared/utils.js\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Thumb({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && (0, _dom.default)(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt((0, _dom.default)(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if ((0, _utils.isObject)(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    } // Activate thumbs\n\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    if (!swiper.thumbs.swiper) return;\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n\n    if (swiperCreated && thumbsSwiper) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126}],114:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Virtual;\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Virtual({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  swiper.virtual = {\n    cache: {},\n    from: undefined,\n    to: undefined,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n\n  function renderSlide(slide, index) {\n    const params = swiper.params.virtual;\n\n    if (params.cache && swiper.virtual.cache[index]) {\n      return swiper.virtual.cache[index];\n    }\n\n    const $slideEl = params.renderSlide ? (0, _dom.default)(params.renderSlide.call(swiper, slide, index)) : (0, _dom.default)(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index}\">${slide}</div>`);\n    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);\n    if (params.cache) swiper.virtual.cache[index] = $slideEl;\n    return $slideEl;\n  }\n\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n    let slidesAfter;\n    let slidesBefore;\n\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = slidesPerGroup + addSlidesBefore;\n    }\n\n    const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n    const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset,\n      slidesGrid: swiper.slidesGrid\n    });\n\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n\n      if (swiper.lazy && swiper.params.lazy.enabled) {\n        swiper.lazy.load();\n      }\n    }\n\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n        swiper.slides.css(offsetProp, `${offset}px`);\n      }\n\n      swiper.updateProgress();\n      return;\n    }\n\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n\n          return slidesToRender;\n        }()\n      });\n\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      }\n\n      return;\n    }\n\n    const prependIndexes = [];\n    const appendIndexes = [];\n\n    if (force) {\n      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      if (i >= from && i <= to) {\n        if (typeof previousTo === 'undefined' || force) {\n          appendIndexes.push(i);\n        } else {\n          if (i > previousTo) appendIndexes.push(i);\n          if (i < previousFrom) prependIndexes.push(i);\n        }\n      }\n    }\n\n    appendIndexes.forEach(index => {\n      swiper.$wrapperEl.append(renderSlide(slides[index], index));\n    });\n    prependIndexes.sort((a, b) => b - a).forEach(index => {\n      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));\n    });\n    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);\n    onRendered();\n  }\n\n  function appendSlide(slides) {\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n\n    update(true);\n  }\n\n  function prependSlide(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n      }\n\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach(cachedIndex => {\n        const $cachedEl = cache[cachedIndex];\n        const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');\n\n        if (cachedElIndex) {\n          $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n\n  function removeSlide(slidesIndexes) {\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n    let activeIndex = swiper.activeIndex;\n\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n\n  function removeAllSlides() {\n    swiper.virtual.slides = [];\n\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n\n  on('beforeInit', () => {\n    if (!swiper.params.virtual.enabled) return;\n    swiper.virtual.slides = swiper.params.virtual.slides;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on('init update resize', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode) {\n      (0, _utils.setCSSProperty)(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide,\n    prependSlide,\n    removeSlide,\n    removeAllSlides,\n    update\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126}],115:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Zoom;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _dom = _interopRequireDefault(require(\"../../shared/dom.js\"));\n\nvar _utils = require(\"../../shared/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Zoom({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const window = (0, _ssrWindow.getWindow)();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: 'swiper-zoom-container',\n      zoomedSlideClass: 'swiper-slide-zoomed'\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let gesturesEnabled;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const gesture = {\n    $slideEl: undefined,\n    slideWidth: undefined,\n    slideHeight: undefined,\n    $imageEl: undefined,\n    $imageWrapEl: undefined,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: undefined,\n    isMoved: undefined,\n    currentX: undefined,\n    currentY: undefined,\n    minX: undefined,\n    minY: undefined,\n    maxX: undefined,\n    maxY: undefined,\n    width: undefined,\n    height: undefined,\n    startX: undefined,\n    startY: undefined,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: undefined,\n    y: undefined,\n    prevPositionX: undefined,\n    prevPositionY: undefined,\n    prevTime: undefined\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, 'scale', {\n    get() {\n      return scale;\n    },\n\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : undefined;\n        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : undefined;\n        emit('zoomChange', value, imageEl, slideEl);\n      }\n\n      scale = value;\n    }\n\n  });\n\n  function getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2) return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  } // Events\n\n\n  function onGestureStart(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureTouched = true;\n      gesture.scaleStart = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = (0, _dom.default)(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = undefined;\n        return;\n      }\n    }\n\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n\n    isScaling = true;\n  }\n\n  function onGestureChange(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureMoved = true;\n      gesture.scaleMove = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n      if (e.type === 'gesturechange') onGestureStart(e);\n      return;\n    }\n\n    if (support.gestures) {\n      zoom.scale = e.scale * currentScale;\n    } else {\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    }\n\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function onGestureEnd(e) {\n    const device = swiper.device;\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (!fakeGestureTouched || !fakeGestureMoved) {\n        return;\n      }\n\n      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {\n        return;\n      }\n\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale === 1) gesture.$slideEl = undefined;\n  }\n\n  function onTouchStart(e) {\n    const device = swiper.device;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (image.isTouched) return;\n    if (device.android && e.cancelable) e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  }\n\n  function onTouchMove(e) {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl) return;\n\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = (0, _utils.getTranslate)(gesture.$imageWrapEl[0], 'x') || 0;\n      image.startY = (0, _utils.getTranslate)(gesture.$imageWrapEl[0], 'y') || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n    } // Define if we need image drag\n\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n\n    e.stopPropagation();\n    image.isMoved = true;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    } // Velocity\n\n\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTouchEnd() {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY; // Fix duration\n\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY; // Define if we need image drag\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n      }\n\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n      }\n\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$slideEl = undefined;\n      gesture.$imageEl = undefined;\n      gesture.$imageWrapEl = undefined;\n    }\n  }\n\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (e && e.target) {\n        gesture.$slideEl = (0, _dom.default)(e.target).closest(`.${swiper.params.slideClass}`);\n      }\n\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.touchAction = 'none';\n    }\n\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n\n    if (typeof image.touchesStart.x === 'undefined' && e) {\n      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n\n    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n    currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left + window.scrollX;\n      offsetY = gesture.$slideEl.offset().top + window.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = '';\n      swiper.wrapperEl.style.touchAction = '';\n    }\n\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = undefined;\n  } // Toggle Zoom\n\n\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n\n    if (zoom.scale && zoom.scale !== 1) {\n      // Zoom Out\n      zoomOut();\n    } else {\n      // Zoom In\n      zoomIn(e);\n    }\n  }\n\n  function getListeners() {\n    const support = swiper.support;\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = support.passiveListener ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n\n  function getSlideSelector() {\n    return `.${swiper.params.slideClass}`;\n  }\n\n  function toggleGestures(method) {\n    const {\n      passiveListener\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    swiper.$wrapperEl[method]('gesturestart', slideSelector, onGestureStart, passiveListener);\n    swiper.$wrapperEl[method]('gesturechange', slideSelector, onGestureChange, passiveListener);\n    swiper.$wrapperEl[method]('gestureend', slideSelector, onGestureEnd, passiveListener);\n  }\n\n  function enableGestures() {\n    if (gesturesEnabled) return;\n    gesturesEnabled = true;\n    toggleGestures('on');\n  }\n\n  function disableGestures() {\n    if (!gesturesEnabled) return;\n    gesturesEnabled = false;\n    toggleGestures('off');\n  } // Attach/Detach Events\n\n\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled) return;\n    zoom.enabled = true;\n    const support = swiper.support;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled) return;\n    const support = swiper.support;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  on('init', () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    disable();\n  });\n  on('touchStart', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchStart(e);\n  });\n  on('touchEnd', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchEnd(e);\n  });\n  on('doubleTap', (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on('slideChange', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}\n\n},{\"../../shared/dom.js\":119,\"../../shared/utils.js\":126,\"ssr-window\":27}],116:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = classesToSelector;\n\nfunction classesToSelector(classes = '') {\n  return `.${classes.trim().replace(/([\\.:!\\/])/g, '\\\\$1') // eslint-disable-line\n  .replace(/ /g, '.')}`;\n}\n\n},{}],117:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createElementIfNotDefined;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document = (0, _ssrWindow.getDocument)();\n\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n\n        if (!element) {\n          element = document.createElement('div');\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n\n  return params;\n}\n\n},{\"ssr-window\":27}],118:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createShadow;\n\nvar _dom = _interopRequireDefault(require(\"./dom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n\n  if (!$shadowEl.length) {\n    $shadowEl = (0, _dom.default)(`<div class=\"swiper-slide-shadow${side ? `-${side}` : ''}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n\n  return $shadowEl;\n}\n\n},{\"./dom.js\":119}],119:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _dom = require(\"dom7\");\n\nconst Methods = {\n  addClass: _dom.addClass,\n  removeClass: _dom.removeClass,\n  hasClass: _dom.hasClass,\n  toggleClass: _dom.toggleClass,\n  attr: _dom.attr,\n  removeAttr: _dom.removeAttr,\n  transform: _dom.transform,\n  transition: _dom.transition,\n  on: _dom.on,\n  off: _dom.off,\n  trigger: _dom.trigger,\n  transitionEnd: _dom.transitionEnd,\n  outerWidth: _dom.outerWidth,\n  outerHeight: _dom.outerHeight,\n  styles: _dom.styles,\n  offset: _dom.offset,\n  css: _dom.css,\n  each: _dom.each,\n  html: _dom.html,\n  text: _dom.text,\n  is: _dom.is,\n  index: _dom.index,\n  eq: _dom.eq,\n  append: _dom.append,\n  prepend: _dom.prepend,\n  next: _dom.next,\n  nextAll: _dom.nextAll,\n  prev: _dom.prev,\n  prevAll: _dom.prevAll,\n  parent: _dom.parent,\n  parents: _dom.parents,\n  closest: _dom.closest,\n  find: _dom.find,\n  children: _dom.children,\n  filter: _dom.filter,\n  remove: _dom.remove\n};\nObject.keys(Methods).forEach(methodName => {\n  Object.defineProperty(_dom.$.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nvar _default = _dom.$;\nexports.default = _default;\n\n},{\"dom7\":1}],120:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = effectInit;\n\nfunction effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    overwriteParams,\n    perspective\n  } = params;\n  on('beforeInit', () => {\n    if (swiper.params.effect !== effect) return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on('setTranslate', () => {\n    if (swiper.params.effect !== effect) return;\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    if (swiper.params.effect !== effect) return;\n    setTransition(duration);\n  });\n}\n\n},{}],121:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = effectTarget;\n\nfunction effectTarget(effectParams, $slideEl) {\n  if (effectParams.transformEl) {\n    return $slideEl.find(effectParams.transformEl).css({\n      'backface-visibility': 'hidden',\n      '-webkit-backface-visibility': 'hidden'\n    });\n  }\n\n  return $slideEl;\n}\n\n},{}],122:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = effectVirtualTransitionEnd;\n\nfunction effectVirtualTransitionEnd({\n  swiper,\n  duration,\n  transformEl,\n  allSlides\n}) {\n  const {\n    slides,\n    activeIndex,\n    $wrapperEl\n  } = swiper;\n\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let $transitionEndTarget;\n\n    if (allSlides) {\n      $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n    } else {\n      $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n    }\n\n    $transitionEndTarget.transitionEnd(() => {\n      if (eventTriggered) return;\n      if (!swiper || swiper.destroyed) return;\n      eventTriggered = true;\n      swiper.animating = false;\n      const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n\n      for (let i = 0; i < triggerEvents.length; i += 1) {\n        $wrapperEl.trigger(triggerEvents[i]);\n      }\n    });\n  }\n}\n\n},{}],123:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBrowser = getBrowser;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nlet browser;\n\nfunction calcBrowser() {\n  const window = (0, _ssrWindow.getWindow)();\n\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\n\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n\n  return browser;\n}\n\n},{\"ssr-window\":27}],124:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDevice = getDevice;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nvar _getSupport = require(\"./get-support.js\");\n\nlet deviceCached;\n\nfunction calcDevice({\n  userAgent\n} = {}) {\n  const support = (0, _getSupport.getSupport)();\n  const window = (0, _ssrWindow.getWindow)();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  } // Android\n\n\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  } // Export object\n\n\n  return device;\n}\n\nfunction getDevice(overrides = {}) {\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n\n  return deviceCached;\n}\n\n},{\"./get-support.js\":125,\"ssr-window\":27}],125:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSupport = getSupport;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nlet support;\n\nfunction calcSupport() {\n  const window = (0, _ssrWindow.getWindow)();\n  const document = (0, _ssrWindow.getDocument)();\n  return {\n    smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n\n      try {\n        const opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          }\n\n        });\n        window.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {// No support\n      }\n\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return 'ongesturestart' in window;\n    }()\n  };\n}\n\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n\n  return support;\n}\n\n},{\"ssr-window\":27}],126:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.animateCSSModeScroll = animateCSSModeScroll;\nexports.deleteProps = deleteProps;\nexports.extend = extend;\nexports.getComputedStyle = getComputedStyle;\nexports.getTranslate = getTranslate;\nexports.isObject = isObject;\nexports.nextTick = nextTick;\nexports.now = now;\nexports.setCSSProperty = setCSSProperty;\n\nvar _ssrWindow = require(\"ssr-window\");\n\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {// no getter for object\n    }\n\n    try {\n      delete object[key];\n    } catch (e) {// something got wrong\n    }\n  });\n}\n\nfunction nextTick(callback, delay = 0) {\n  return setTimeout(callback, delay);\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction getComputedStyle(el) {\n  const window = (0, _ssrWindow.getWindow)();\n  let style;\n\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n\n  if (!style) {\n    style = el.style;\n  }\n\n  return style;\n}\n\nfunction getTranslate(el, axis = 'x') {\n  const window = (0, _ssrWindow.getWindow)();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle(el, null);\n\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    } // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n\n\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n\n  return curTransform || 0;\n}\n\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\n\nfunction extend(...args) {\n  const to = Object(args[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n\n  for (let i = 1; i < args.length; i += 1) {\n    const nextSource = args[i];\n\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\n\nfunction animateCSSModeScroll({\n  swiper,\n  targetPosition,\n  side\n}) {\n  const window = (0, _ssrWindow.getWindow)();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n\n  const animate = () => {\n    time = new Date().getTime();\n\n    if (startTime === null) {\n      startTime = time;\n    }\n\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n\n  animate();\n}\n\n},{\"ssr-window\":27}],127:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"A11y\", {\n  enumerable: true,\n  get: function () {\n    return _a11y.default;\n  }\n});\nObject.defineProperty(exports, \"Autoplay\", {\n  enumerable: true,\n  get: function () {\n    return _autoplay.default;\n  }\n});\nObject.defineProperty(exports, \"Controller\", {\n  enumerable: true,\n  get: function () {\n    return _controller.default;\n  }\n});\nObject.defineProperty(exports, \"EffectCards\", {\n  enumerable: true,\n  get: function () {\n    return _effectCards.default;\n  }\n});\nObject.defineProperty(exports, \"EffectCoverflow\", {\n  enumerable: true,\n  get: function () {\n    return _effectCoverflow.default;\n  }\n});\nObject.defineProperty(exports, \"EffectCreative\", {\n  enumerable: true,\n  get: function () {\n    return _effectCreative.default;\n  }\n});\nObject.defineProperty(exports, \"EffectCube\", {\n  enumerable: true,\n  get: function () {\n    return _effectCube.default;\n  }\n});\nObject.defineProperty(exports, \"EffectFade\", {\n  enumerable: true,\n  get: function () {\n    return _effectFade.default;\n  }\n});\nObject.defineProperty(exports, \"EffectFlip\", {\n  enumerable: true,\n  get: function () {\n    return _effectFlip.default;\n  }\n});\nObject.defineProperty(exports, \"FreeMode\", {\n  enumerable: true,\n  get: function () {\n    return _freeMode.default;\n  }\n});\nObject.defineProperty(exports, \"Grid\", {\n  enumerable: true,\n  get: function () {\n    return _grid.default;\n  }\n});\nObject.defineProperty(exports, \"HashNavigation\", {\n  enumerable: true,\n  get: function () {\n    return _hashNavigation.default;\n  }\n});\nObject.defineProperty(exports, \"History\", {\n  enumerable: true,\n  get: function () {\n    return _history.default;\n  }\n});\nObject.defineProperty(exports, \"Keyboard\", {\n  enumerable: true,\n  get: function () {\n    return _keyboard.default;\n  }\n});\nObject.defineProperty(exports, \"Lazy\", {\n  enumerable: true,\n  get: function () {\n    return _lazy.default;\n  }\n});\nObject.defineProperty(exports, \"Manipulation\", {\n  enumerable: true,\n  get: function () {\n    return _manipulation.default;\n  }\n});\nObject.defineProperty(exports, \"Mousewheel\", {\n  enumerable: true,\n  get: function () {\n    return _mousewheel.default;\n  }\n});\nObject.defineProperty(exports, \"Navigation\", {\n  enumerable: true,\n  get: function () {\n    return _navigation.default;\n  }\n});\nObject.defineProperty(exports, \"Pagination\", {\n  enumerable: true,\n  get: function () {\n    return _pagination.default;\n  }\n});\nObject.defineProperty(exports, \"Parallax\", {\n  enumerable: true,\n  get: function () {\n    return _parallax.default;\n  }\n});\nObject.defineProperty(exports, \"Scrollbar\", {\n  enumerable: true,\n  get: function () {\n    return _scrollbar.default;\n  }\n});\nObject.defineProperty(exports, \"Swiper\", {\n  enumerable: true,\n  get: function () {\n    return _core.default;\n  }\n});\nObject.defineProperty(exports, \"Thumbs\", {\n  enumerable: true,\n  get: function () {\n    return _thumbs.default;\n  }\n});\nObject.defineProperty(exports, \"Virtual\", {\n  enumerable: true,\n  get: function () {\n    return _virtual.default;\n  }\n});\nObject.defineProperty(exports, \"Zoom\", {\n  enumerable: true,\n  get: function () {\n    return _zoom.default;\n  }\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _core.default;\n  }\n});\n\nvar _core = _interopRequireDefault(require(\"./core/core.js\"));\n\nvar _virtual = _interopRequireDefault(require(\"./modules/virtual/virtual.js\"));\n\nvar _keyboard = _interopRequireDefault(require(\"./modules/keyboard/keyboard.js\"));\n\nvar _mousewheel = _interopRequireDefault(require(\"./modules/mousewheel/mousewheel.js\"));\n\nvar _navigation = _interopRequireDefault(require(\"./modules/navigation/navigation.js\"));\n\nvar _pagination = _interopRequireDefault(require(\"./modules/pagination/pagination.js\"));\n\nvar _scrollbar = _interopRequireDefault(require(\"./modules/scrollbar/scrollbar.js\"));\n\nvar _parallax = _interopRequireDefault(require(\"./modules/parallax/parallax.js\"));\n\nvar _zoom = _interopRequireDefault(require(\"./modules/zoom/zoom.js\"));\n\nvar _lazy = _interopRequireDefault(require(\"./modules/lazy/lazy.js\"));\n\nvar _controller = _interopRequireDefault(require(\"./modules/controller/controller.js\"));\n\nvar _a11y = _interopRequireDefault(require(\"./modules/a11y/a11y.js\"));\n\nvar _history = _interopRequireDefault(require(\"./modules/history/history.js\"));\n\nvar _hashNavigation = _interopRequireDefault(require(\"./modules/hash-navigation/hash-navigation.js\"));\n\nvar _autoplay = _interopRequireDefault(require(\"./modules/autoplay/autoplay.js\"));\n\nvar _thumbs = _interopRequireDefault(require(\"./modules/thumbs/thumbs.js\"));\n\nvar _freeMode = _interopRequireDefault(require(\"./modules/free-mode/free-mode.js\"));\n\nvar _grid = _interopRequireDefault(require(\"./modules/grid/grid.js\"));\n\nvar _manipulation = _interopRequireDefault(require(\"./modules/manipulation/manipulation.js\"));\n\nvar _effectFade = _interopRequireDefault(require(\"./modules/effect-fade/effect-fade.js\"));\n\nvar _effectCube = _interopRequireDefault(require(\"./modules/effect-cube/effect-cube.js\"));\n\nvar _effectFlip = _interopRequireDefault(require(\"./modules/effect-flip/effect-flip.js\"));\n\nvar _effectCoverflow = _interopRequireDefault(require(\"./modules/effect-coverflow/effect-coverflow.js\"));\n\nvar _effectCreative = _interopRequireDefault(require(\"./modules/effect-creative/effect-creative.js\"));\n\nvar _effectCards = _interopRequireDefault(require(\"./modules/effect-cards/effect-cards.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./core/core.js\":35,\"./modules/a11y/a11y.js\":87,\"./modules/autoplay/autoplay.js\":88,\"./modules/controller/controller.js\":89,\"./modules/effect-cards/effect-cards.js\":90,\"./modules/effect-coverflow/effect-coverflow.js\":91,\"./modules/effect-creative/effect-creative.js\":92,\"./modules/effect-cube/effect-cube.js\":93,\"./modules/effect-fade/effect-fade.js\":94,\"./modules/effect-flip/effect-flip.js\":95,\"./modules/free-mode/free-mode.js\":96,\"./modules/grid/grid.js\":97,\"./modules/hash-navigation/hash-navigation.js\":98,\"./modules/history/history.js\":99,\"./modules/keyboard/keyboard.js\":100,\"./modules/lazy/lazy.js\":101,\"./modules/manipulation/manipulation.js\":102,\"./modules/mousewheel/mousewheel.js\":108,\"./modules/navigation/navigation.js\":109,\"./modules/pagination/pagination.js\":110,\"./modules/parallax/parallax.js\":111,\"./modules/scrollbar/scrollbar.js\":112,\"./modules/thumbs/thumbs.js\":113,\"./modules/virtual/virtual.js\":114,\"./modules/zoom/zoom.js\":115}],128:[function(require,module,exports){\n\"use strict\";\n\nvar _menu = require(\"./modules/menu\");\n\nvar _navigation = require(\"./modules/navigation\");\n\nvar _toggle = require(\"./modules/toggle\");\n\nvar _swiper = require(\"./modules/swiper\");\n\nvar _scrollToTop = require(\"./modules/scrollToTop\");\n\nvar _modal = require(\"./modules/modal\");\n\nvar _validateForm = require(\"./modules/validateForm\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  (0, _navigation.toggleNavigation)();\n  (0, _menu.toggleMenu)();\n  (0, _toggle.toggleCard)();\n  var gallery = new _swiper.Slider(\".swiper\");\n  gallery.start();\n  var clientsGallery = new _swiper.Slider(\".main__clients-swiper\");\n  clientsGallery.start();\n  (0, _modal.toggleModal)();\n  (0, _scrollToTop.scrollToTop)();\n  (0, _validateForm.validateForm)();\n});\n\n},{\"./modules/menu\":129,\"./modules/modal\":130,\"./modules/navigation\":131,\"./modules/scrollToTop\":132,\"./modules/swiper\":133,\"./modules/toggle\":134,\"./modules/validateForm\":135}],129:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleMenu = void 0;\n\nvar toggleMenu = function toggleMenu() {\n  var toggle = false;\n  var menuBtn = document.querySelector(\".header__menu-btn\");\n  var mobileMenu = document.querySelector(\".mobile-menu\");\n  var menuIcons = document.querySelectorAll(\".menu-btn-icon\");\n  menuBtn.addEventListener(\"click\", function () {\n    toggle = !toggle;\n\n    if (toggle) {\n      menuIcons[0].classList.toggle(\"menu-toggled\");\n      menuIcons[1].classList.toggle(\"menu-toggled\");\n      mobileMenu.classList.toggle(\"mobile-menu--open\");\n    } else {\n      menuIcons[0].classList.toggle(\"menu-toggled\");\n      menuIcons[1].classList.toggle(\"menu-toggled\");\n      mobileMenu.classList.toggle(\"mobile-menu--open\");\n    }\n\n    window.addEventListener(\"resize\", function () {\n      if (window.innerWidth >= \"1240\") {\n        toggle = false;\n        mobileMenu.classList.remove(\"mobile-menu--open\");\n        menuIcons[0].classList.remove(\"menu-toggled\");\n        menuIcons[1].classList.add(\"menu-toggled\");\n      }\n    });\n  });\n};\n\nexports.toggleMenu = toggleMenu;\n\n},{}],130:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleModal = void 0;\n\nvar toggleModal = function toggleModal() {\n  var modal = document.querySelector(\".modal\");\n  var closeModalBtn = document.querySelector(\".modal__close-btn\");\n  var modalBtns = document.querySelectorAll(\".open-modal\");\n  modalBtns.forEach(function (modalBtn, i) {\n    modalBtn.addEventListener(\"click\", function () {\n      modal.classList.toggle(\"modal-open\");\n    });\n  });\n  closeModalBtn.addEventListener(\"click\", function () {\n    modal.classList.remove(\"modal-open\");\n  });\n  modal.addEventListener(\"click\", function (e) {\n    e.target === modal ? modal.classList.remove(\"modal-open\") : \"\";\n  });\n};\n\nexports.toggleModal = toggleModal;\n\n},{}],131:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleNavigation = void 0;\n\nvar toggleNavigation = function toggleNavigation() {\n  var body = document.body;\n  var mobileMenu = document.querySelector(\".mobile-menu\");\n  var lastScroll = 0;\n  window.addEventListener(\"scroll\", function () {\n    var currentScroll = window.pageYOffset;\n\n    if (currentScroll > lastScroll && !body.classList.contains(\"scroll-down\")) {\n      body.classList.add(\"scroll-down\");\n    }\n\n    if (currentScroll < lastScroll && body.classList.contains(\"scroll-down\")) {\n      body.classList.remove(\"scroll-down\");\n    }\n\n    if (mobileMenu.classList.contains(\"mobile-menu--open\")) {\n      body.classList.remove(\"scroll-down\");\n    }\n\n    lastScroll = currentScroll;\n  });\n};\n\nexports.toggleNavigation = toggleNavigation;\n\n},{}],132:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scrollToTop = void 0;\n\nvar scrollToTop = function scrollToTop() {\n  var btn = document.querySelector(\".footer__btn-scroll\");\n  btn.addEventListener(\"click\", function () {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  });\n};\n\nexports.scrollToTop = scrollToTop;\n\n},{}],133:[function(require,module,exports){\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Slider = void 0;\n\nvar _swiper = _interopRequireWildcard(require(\"swiper\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\n_swiper[\"default\"].use([_swiper.Navigation, _swiper.Autoplay, _swiper.Lazy]);\n\nvar Slider = /*#__PURE__*/function () {\n  function Slider(el) {\n    _classCallCheck(this, Slider);\n\n    this.el = el;\n    this.swiper = this._initSwiper();\n  }\n\n  _createClass(Slider, [{\n    key: \"_initSwiper\",\n    value: function _initSwiper() {\n      return new _swiper[\"default\"](this.el, {\n        preloadImages: false,\n        lazy: true,\n        watchSlidesProgress: true,\n        direction: \"horizontal\",\n        loop: true,\n        centeredSlides: true,\n        grabCursor: true,\n        speed: 1000,\n        navigation: {\n          nextEl: \".swiper-button-next\",\n          prevEl: \".swiper-button-prev\"\n        },\n        breakpoints: {\n          280: {\n            slidesPerView: 1,\n            spaceBetween: 20\n          },\n          720: {\n            slidesPerView: 2,\n            spaceBetween: 20\n          },\n          1240: {\n            slidesPerView: 3,\n            spaceBetween: 40\n          }\n        }\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      options = Object.assign({\n        delay: 4000,\n        disableOnInteraction: false\n      }, options);\n      this.swiper.params.autoplay = options;\n      this.swiper.autoplay.start();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.swiper.autoplay.stop();\n    }\n  }]);\n\n  return Slider;\n}();\n\nexports.Slider = Slider;\n\n},{\"swiper\":127}],134:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleCard = void 0; //import gsap from \"gsap\";\n\nvar toggleCard = function toggleCard() {\n  var accordions = document.querySelectorAll(\".main__accordion-content\");\n  var accordionItems = document.querySelectorAll(\".main__accordion-item\");\n  var arrowBtns = document.querySelectorAll(\".main__accordion-toggle\");\n  var arrowIcons = document.querySelectorAll(\".main__accordion-toggle-icon\");\n  var cards = document.querySelectorAll(\".main__accordion-content\");\n  var textsOnHover = document.querySelectorAll(\".main__text--hover\");\n\n  var show = function show(i) {\n    textsOnHover[i].style.maxHeight = textsOnHover[i].scrollHeight + \"px\";\n  };\n\n  var hide = function hide(i) {\n    textsOnHover[i].style.maxHeight = 0;\n  };\n\n  arrowBtns.forEach(function (arrowBtn, i) {\n    arrowBtn.addEventListener(\"click\", function () {\n      arrowIcons[i].classList.toggle(\"icon--rotate\");\n      cards[i].classList.toggle(\"accordion--active\");\n\n      if (cards[i].classList.contains(\"accordion--active\")) {\n        accordions[i].style.maxHeight = accordions[i].scrollHeight + \"px\";\n      } else {\n        accordions[i].style.maxHeight = 0;\n      }\n    });\n  });\n  accordionItems.forEach(function (accordionItem, i) {\n    accordionItem.addEventListener(\"mouseenter\", function () {\n      return show(i);\n    });\n    accordionItem.addEventListener(\"focus\", function () {\n      return show(i);\n    });\n    accordionItem.addEventListener(\"mouseleave\", function () {\n      return hide(i);\n    });\n    accordionItem.addEventListener(\"focusout\", function () {\n      return hide(i);\n    });\n  });\n};\n\nexports.toggleCard = toggleCard;\n\n},{}],135:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateForm = void 0;\n\nvar _imask = _interopRequireDefault(require(\"imask\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar validateForm = function validateForm() {\n  var element = document.getElementById(\"number\");\n  var maskOptions = {\n    mask: \"+{7} (000) 000-00-00\"\n  };\n  var mask = IMask(element, maskOptions);\n  mask.updateValue();\n  var modalForm = document.querySelector(\".modal__form\");\n  var submitBtn = document.querySelector(\".modal__btn\");\n  var inputs = document.querySelectorAll(\".modal__input\");\n  var labels = document.querySelectorAll(\".modal__label\");\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n  };\n\n  submitBtn.addEventListener(\"click\", function () {\n    inputs.forEach(function (input, i) {\n      if (inputs[i].value.length <= 0) {\n        inputs[i].classList.add(\"validate-input\");\n        labels[i].classList.add(\"validate-label\");\n        modalForm.addEventListener(\"submit\", handleSubmit);\n      } else {\n        inputs[i].classList.remove(\"validate-input\");\n        labels[i].classList.remove(\"validate-label\");\n      }\n    });\n  });\n};\n\nexports.validateForm = validateForm;\n\n},{\"imask\":12}]},{},[128,129,130,131,132,133,134,135])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZG9tNy9kb203LmVzbS5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29udHJvbHMvaHRtbC1jb250ZW50ZWRpdGFibGUtbWFzay1lbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9jb250cm9scy9odG1sLW1hc2stZWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29udHJvbHMvaW5wdXQuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvbnRyb2xzL21hc2stZWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9hY3Rpb24tZGV0YWlscy5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9ob2xkZXIuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvcmUvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9tYXNrZWQvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL2RhdGUuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9keW5hbWljLmpzIiwibm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9tYXNrZWQvZW51bS5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL2ZhY3RvcnkuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL251bWJlci5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3BhdHRlcm4uanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3BhdHRlcm4vZml4ZWQtZGVmaW5pdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3BpcGUuanMiLCJub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9yYW5nZS5qcyIsIm5vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3JlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9zc3Itd2luZG93L3Nzci13aW5kb3cuZXNtLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2JyZWFrcG9pbnRzL2dldEJyZWFrcG9pbnQuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvYnJlYWtwb2ludHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvYnJlYWtwb2ludHMvc2V0QnJlYWtwb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY2xhc3Nlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL3JlbW92ZUNsYXNzZXMuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9kZWZhdWx0cy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMtZW1pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uQ2xpY2suanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uUmVzaXplLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblNjcm9sbC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Ub3VjaE1vdmUuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci9zZXRHcmFiQ3Vyc29yLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9pbWFnZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvaW1hZ2VzL2xvYWRJbWFnZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9pbWFnZXMvcHJlbG9hZEltYWdlcy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcENyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2xvb3BEZXN0cm95LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcEZpeC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9tb2R1bGVFeHRlbmRQYXJhbXMuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVOZXh0LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlUHJldi5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVJlc2V0LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlVG8uanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvQ2xvc2VzdC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25FbWl0LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVuZC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25TdGFydC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9taW5UcmFuc2xhdGUuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvdHJhbnNsYXRlVG8uanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVBY3RpdmVJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQ2xpY2tlZFNsaWRlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVQcm9ncmVzcy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNDbGFzc2VzLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNPZmZzZXQuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ExMXkvYTExeS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hdXRvcGxheS9hdXRvcGxheS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9jb250cm9sbGVyL2NvbnRyb2xsZXIuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNhcmRzL2VmZmVjdC1jYXJkcy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3cuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNyZWF0aXZlL2VmZmVjdC1jcmVhdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY3ViZS9lZmZlY3QtY3ViZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9mcmVlLW1vZGUvZnJlZS1tb2RlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2dyaWQvZ3JpZC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24vaGFzaC1uYXZpZ2F0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2hpc3RvcnkvaGlzdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9rZXlib2FyZC9rZXlib2FyZC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9sYXp5L2xhenkuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21hbmlwdWxhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hZGRTbGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hcHBlbmRTbGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9wcmVwZW5kU2xpZGUuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21ldGhvZHMvcmVtb3ZlQWxsU2xpZGVzLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL3JlbW92ZVNsaWRlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21vdXNld2hlZWwvbW91c2V3aGVlbC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uL25hdmlnYXRpb24uanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhcmFsbGF4L3BhcmFsbGF4LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3Njcm9sbGJhci9zY3JvbGxiYXIuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdGh1bWJzL3RodW1icy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy92aXJ0dWFsL3ZpcnR1YWwuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvem9vbS96b29tLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2RvbS5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0LmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtZGV2aWNlLmpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LXN1cHBvcnQuanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLmVzbS5qcyIsInNyYy9zY3JpcHRzL21haW4uanMiLCJzcmMvc2NyaXB0cy9tb2R1bGVzL21lbnUuanMiLCJzcmMvc2NyaXB0cy9tb2R1bGVzL21vZGFsLmpzIiwic3JjL3NjcmlwdHMvbW9kdWxlcy9uYXZpZ2F0aW9uLmpzIiwic3JjL3NjcmlwdHMvbW9kdWxlcy9zY3JvbGxUb1RvcC5qcyIsInNyYy9zY3JpcHRzL21vZHVsZXMvc3dpcGVyLmpzIiwic3JjL3NjcmlwdHMvbW9kdWxlcy90b2dnbGUuanMiLCJzcmMvc2NyaXB0cy9tb2R1bGVzL3ZhbGlkYXRlRm9ybS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNXQTs7QUFYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsU0FBUyxZQUFULENBQXNCLEdBQXRCLEVBQTJCO0FBQ3pCLFFBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxTQUFsQjtBQUNBLEVBQUEsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsR0FBdEIsRUFBMkIsV0FBM0IsRUFBd0M7QUFDdEMsSUFBQSxHQUFHLEdBQUc7QUFDSixhQUFPLEtBQVA7QUFDRCxLQUhxQzs7QUFLdEMsSUFBQSxHQUFHLENBQUMsS0FBRCxFQUFRO0FBQ1QsTUFBQSxLQUFLLENBQUMsU0FBTixHQUFrQixLQUFsQjtBQUNEOztBQVBxQyxHQUF4QztBQVVEOztBQUVELE1BQU0sSUFBTixTQUFtQixLQUFuQixDQUF5QjtBQUN2QixFQUFBLFdBQVcsQ0FBQyxLQUFELEVBQVE7QUFDakIsVUFBTSxJQUFJLEtB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USxJQUFSLEVBQWMsR0FBRyxJQUFqQixDQUFQO0FBQ0Q7O0FBRUQsU0FBTyxZQUFQO0FBQ0Q7O0FBRUQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQUQsQ0FBdEI7O0FBQ0EsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQUQsQ0FBckI7O0FBQ0EsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQUQsQ0FBdEI7O0FBQ0EsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFNBQUQsQ0FBeEI7O0FBQ0EsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQUQsQ0FBekI7O0FBQ0EsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQUQsQ0FBdEI7O0FBQ0EsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFNBQUQsQ0FBeEI7O0FBQ0EsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQUQsQ0FBekI7O0FBQ0EsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQUQsQ0FBdkI7O0FBQ0EsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQUQsQ0FBdkI7O0FBQ0EsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQUQsQ0FBMUI7O0FBQ0EsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQUQsQ0FBMUI7O0FBQ0EsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFNBQUQsQ0FBeEI7O0FBQ0EsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFlBQUQsQ0FBM0I7O0FBQ0EsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFlBQUQsQ0FBM0I7O0FBQ0EsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQUQsQ0FBekI7O0FBQ0EsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQUQsQ0FBMUI7O0FBQ0EsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFlBQUQsQ0FBM0I7O0FBQ0EsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQUQsQ0FBekI7O0FBQ0EsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQUQsQ0FBMUI7O0FBQ0Es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Q0FBQSxHQUFBLENBQUEsZ0JBQUE7QUFDQSxRQUFBLE1BQU0sQ0FBTixDQUFNLENBQU4sQ0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLGdCQUFBO0FBQ0EsUUFBQSxTQUFTLENBQVQsZ0JBQUEsQ0FBQSxRQUFBLEVBQUEsWUFBQTtBQUhGLE9BQUEsTUFJTztBQUNMLFFBQUEsTUFBTSxDQUFOLENBQU0sQ0FBTixDQUFBLFNBQUEsQ0FBQSxNQUFBLENBQUEsZ0JBQUE7QUFDQSxRQUFBLE1BQU0sQ0FBTixDQUFNLENBQU4sQ0FBQSxTQUFBLENBQUEsTUFBQSxDQUFBLGdCQUFBO0FBQ0Q7QUFSSCxLQUFBO0FBREYsR0FBQTtBQWpCSyxDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqXG4gKiBEb203IDQuMC4yXG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwczovL2ZyYW1ld29yazcuaW8vZG9jcy9kb203Lmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuZnVuY3Rpb24gbWFrZVJlYWN0aXZlKG9iaikge1xuICBjb25zdCBwcm90byA9IG9iai5fX3Byb3RvX187XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3Byb3RvX18nLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHByb3RvO1xuICAgIH0sXG5cbiAgICBzZXQodmFsdWUpIHtcbiAgICAgIHByb3RvLl9fcHJvdG9fXyA9IHZhbHVlO1xuICAgIH1cblxuICB9KTtcbn1cblxuY2xhc3MgRG9tNyBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3IoaXRlbXMpIHtcbiAgICBzdXBlciguLi4oaXRlbXMgfHwgW10pKTtcbiAgICBtYWtlUmVhY3RpdmUodGhpcyk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBhcnJheUZsYXQoYXJyID0gW10pIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGFyci5mb3JFYWNoKGVsID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgIHJlcy5wdXNoKC4uLmFycmF5RmxhdChlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaChlbCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFyciwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnIsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGFycikge1xuICBjb25zdCB1bmlxdWVBcnJheSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHVuaXF1ZUFycmF5LmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHVuaXF1ZUFycmF5LnB1c2goYXJyW2ldKTtcbiAgfVxuXG4gIHJldHVybiB1bmlxdWVBcnJheTtcbn1cbmZ1bmN0aW9uIHRvQ2FtZWxDYXNlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLSguKS9nLCAobWF0Y2gsIGdyb3VwKSA9PiBncm91cC50b1VwcGVyQ2FzZSgpKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbmZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgY29uc3QgYSA9IFtdO1xuICBjb25zdCByZXMgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgYS5wdXNoKHJlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBsZXQgYXJyID0gW107XG5cbiAgaWYgKCFjb250ZXh0ICYmIHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuXG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcblxuICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgIGxldCB0b0NyZWF0ZSA9ICdkaXYnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPGxpJykgPT09IDApIHRvQ3JlYXRlID0gJ3VsJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGJvZHknKSA9PT0gMCkgdG9DcmVhdGUgPSAndGFibGUnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgY29uc3QgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgdGVtcFBhcmVudC5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTtcbiAgICB9IC8vIGFyciA9IHFzYShzZWxlY3RvciwgZG9jdW1lbnQpO1xuXG4gIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSByZXR1cm4gc2VsZWN0b3I7XG4gICAgYXJyID0gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gbmV3IERvbTcoYXJyYXlVbmlxdWUoYXJyKSk7XG59XG5cbiQuZm4gPSBEb203LnByb3RvdHlwZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbmZ1bmN0aW9uIGFkZENsYXNzKC4uLmNsYXNzZXMpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpO1xuICB0aGlzLmZvckVhY2goZWwgPT4ge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoLi4uY2xhc3Nlcykge1xuICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7XG4gIHRoaXMuZm9yRWFjaChlbCA9PiB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgdGhpcy5mb3JFYWNoKGVsID0+IHtcbiAgICBjbGFzc05hbWVzLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKC4uLmNsYXNzZXMpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIodGhpcywgZWwgPT4ge1xuICAgIHJldHVybiBjbGFzc05hbWVzLmZpbHRlcihjbGFzc05hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpLmxlbmd0aCA+IDA7XG4gIH0pLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgYXR0clxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IGF0dHJzXG5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3RcbiAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJvcChwcm9wcywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBwcm9wXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdW3Byb3BzXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgcHJvcHNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgICB0aGlzW2ldW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2JqZWN0XG4gICAgICAgIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICBsZXQgZWw7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDsgLy8gR2V0IHZhbHVlXG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBrZXkgaW4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhS2V5ID0gZWwuZ2V0QXR0cmlidXRlKGBkYXRhLSR7a2V5fWApO1xuXG4gICAgaWYgKGRhdGFLZXkpIHtcbiAgICAgIHJldHVybiBkYXRhS2V5O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IHZhbHVlXG5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCFlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlID0ge307XG4gICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGF0YShrZXkpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldKSB7XG4gICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSBudWxsO1xuICAgICAgZGVsZXRlIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0YXNldCgpIHtcbiAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBjb25zdCBkYXRhc2V0ID0ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAoZWwuZGF0YXNldCkge1xuICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICBkYXRhc2V0W2RhdGFLZXldID0gZWwuZGF0YXNldFtkYXRhS2V5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBhdHRyID0gZWwuYXR0cmlidXRlc1tpXTtcblxuICAgICAgaWYgKGF0dHIubmFtZS5pbmRleE9mKCdkYXRhLScpID49IDApIHtcbiAgICAgICAgZGF0YXNldFt0b0NhbWVsQ2FzZShhdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IGF0dHIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2tleV0gPT09ICdmYWxzZScpIGRhdGFzZXRba2V5XSA9IGZhbHNlO2Vsc2UgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ3RydWUnKSBkYXRhc2V0W2tleV0gPSB0cnVlO2Vsc2UgaWYgKHBhcnNlRmxvYXQoZGF0YXNldFtrZXldKSA9PT0gZGF0YXNldFtrZXldICogMSkgZGF0YXNldFtrZXldICo9IDE7XG4gIH1cblxuICByZXR1cm4gZGF0YXNldDtcbn1cblxuZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gZ2V0IHZhbHVlXG4gICAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YWx1ZXMucHVzaChlbC5zZWxlY3RlZE9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHJldHVybiBlbC52YWx1ZTtcbiAgfSAvLyBzZXQgdmFsdWVcblxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBlbC5tdWx0aXBsZSAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbC5vcHRpb25zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGVsLm9wdGlvbnNbal0uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKGVsLm9wdGlvbnNbal0udmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnZhbCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycgPyBgJHtkdXJhdGlvbn1tc2AgOiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbiguLi5hcmdzKSB7XG4gIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnRUeXBlLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO2Vsc2Uge1xuICAgICAgY29uc3QgcGFyZW50cyA9ICQodGFyZ2V0KS5wYXJlbnRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgIGlmICgkKHBhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkocGFyZW50c1trXSwgZXZlbnREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gIH1cblxuICBjb25zdCBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgbGV0IGo7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVMaXZlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUxpdmVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9mZiguLi5hcmdzKSB7XG4gIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnRUeXBlLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG4gIGNvbnN0IGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTtcbiAgICAgIGxldCBoYW5kbGVycztcblxuICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpc3RlbmVyc1tldmVudF07XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcblxuICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbmNlKC4uLmFyZ3MpIHtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IFtldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBvbmNlSGFuZGxlciguLi5ldmVudEFyZ3MpIHtcbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudEFyZ3MpO1xuICAgIGRvbS5vZmYoZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cblxuICBvbmNlSGFuZGxlci5kb203cHJveHkgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGRvbS5vbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoLi4uYXJncykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICBjb25zdCBldmVudERhdGEgPSBhcmdzWzFdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTtcblxuICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoKGRhdGEsIGRhdGFJbmRleCkgPT4gZGF0YUluZGV4ID4gMCk7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IFtdO1xuICAgICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChjYWxsYmFjaykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGRvbS5vZmYoJ2FuaW1hdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ2FuaW1hdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gd2lkdGgoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnaGVpZ2h0JykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KCkge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzaG93KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpO1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIC5jc3MoJ3dpZHRoJylcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC5jc3MoeyB3aWR0aDogJzEwMHB4JyB9KVxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgdGhpcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBjYWxsYmFjay5hcHBseShlbCwgW2VsLCBpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICBjb25zdCByZXN1bHQgPSBhcnJheUZpbHRlcih0aGlzLCBjYWxsYmFjayk7XG4gIHJldHVybiAkKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGw7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLmlubmVySFRNTCA9IGh0bWw7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpIDogbnVsbDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgbGV0IGNvbXBhcmVXaXRoO1xuICBsZXQgaTtcbiAgaWYgKCFlbCB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIGVsID09PSB3aW5kb3c7XG4gIH1cblxuICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbmRleCgpIHtcbiAgbGV0IGNoaWxkID0gdGhpc1swXTtcbiAgbGV0IGk7XG5cbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGNvbnN0IHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuICQoW10pO1xuICAgIHJldHVybiAkKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICB9XG5cbiAgcmV0dXJuICQoW3RoaXNbaW5kZXhdXSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZCguLi5lbHMpIHtcbiAgbGV0IG5ld0NoaWxkO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgZm9yIChsZXQgayA9IDA7IGsgPCBlbHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICBuZXdDaGlsZCA9IGVsc1trXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuXG4gICAgICAgIHdoaWxlICh0ZW1wRGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkW2pdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkuYXBwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBpO1xuICBsZXQgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuXG4gICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5wcmVwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGJlZm9yZSA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChiZWZvcmUubGVuZ3RoID09PSAxKSB7XG4gICAgICBiZWZvcmVbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYmVmb3JlWzBdKTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJlZm9yZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBiZWZvcmVbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGJlZm9yZVtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEFmdGVyKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGFmdGVyID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFmdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYWZ0ZXJbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYWZ0ZXJbMF0ubmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSBpZiAoYWZ0ZXIubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhZnRlci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhZnRlcltqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYWZ0ZXJbal0ubmV4dFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gbmV4dEFsbChzZWxlY3Rvcikge1xuICBjb25zdCBuZXh0RWxzID0gW107XG4gIGxldCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChuZXh0KS5pcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuXG4gICAgZWwgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICQobmV4dEVscyk7XG59XG5cbmZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgJChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIGxldCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKHByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG5cbiAgICBlbCA9IHByZXY7XG4gIH1cblxuICByZXR1cm4gJChwcmV2RWxzKTtcbn1cblxuZnVuY3Rpb24gc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBwYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChwYXJlbnQpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgbGV0IGNsb3Nlc3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7XG4gICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn1cblxuZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICBjb25zdCBmb3VuZEVsZW1lbnRzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZm91bmQgPSB0aGlzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChmb3VuZEVsZW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkcmVuO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yIHx8ICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHRoaXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkZXRhY2goKSB7XG4gIHJldHVybiB0aGlzLnJlbW92ZSgpO1xufVxuXG5mdW5jdGlvbiBhZGQoLi4uZWxzKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBsZXQgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgdG9BZGQgPSAkKGVsc1tpXSk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGRvbS5wdXNoKHRvQWRkW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9tO1xufVxuXG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbC5jaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuZnVuY3Rpb24gc2Nyb2xsVG8oLi4uYXJncykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IFtsZWZ0LCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVhc2luZztcbiAgICBbbGVmdCwgdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSBlYXNpbmcgPSAnc3dpbmcnO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzO1xuICAgIGxldCBjdXJyZW50VG9wO1xuICAgIGxldCBjdXJyZW50TGVmdDtcbiAgICBsZXQgbWF4VG9wO1xuICAgIGxldCBtYXhMZWZ0O1xuICAgIGxldCBuZXdUb3A7XG4gICAgbGV0IG5ld0xlZnQ7XG4gICAgbGV0IHNjcm9sbFRvcDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgbGV0IHNjcm9sbExlZnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGxldCBhbmltYXRlVG9wID0gdG9wID4gMCB8fCB0b3AgPT09IDA7XG4gICAgbGV0IGFuaW1hdGVMZWZ0ID0gbGVmdCA+IDAgfHwgbGVmdCA9PT0gMDtcblxuICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZWFzaW5nID0gJ3N3aW5nJztcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgY3VycmVudFRvcCA9IGVsLnNjcm9sbFRvcDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVMZWZ0KSB7XG4gICAgICBjdXJyZW50TGVmdCA9IGVsLnNjcm9sbExlZnQ7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFkdXJhdGlvbikgcmV0dXJuO1xuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIG1heFRvcCA9IGVsLnNjcm9sbEhlaWdodCAtIGVsLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld1RvcCA9IE1hdGgubWF4KE1hdGgubWluKHRvcCwgbWF4VG9wKSwgMCk7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVMZWZ0KSB7XG4gICAgICBtYXhMZWZ0ID0gZWwuc2Nyb2xsV2lkdGggLSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgIG5ld0xlZnQgPSBNYXRoLm1heChNYXRoLm1pbihsZWZ0LCBtYXhMZWZ0KSwgMCk7XG4gICAgfVxuXG4gICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID09PSBjdXJyZW50VG9wKSBhbmltYXRlVG9wID0gZmFsc2U7XG4gICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPT09IGN1cnJlbnRMZWZ0KSBhbmltYXRlTGVmdCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyKHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSkge1xuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSBlYXNpbmcgPT09ICdsaW5lYXInID8gcHJvZ3Jlc3MgOiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIGxldCBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3VG9wIC0gY3VycmVudFRvcCk7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIHNjcm9sbExlZnQgPSBjdXJyZW50TGVmdCArIGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpO1xuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPiBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA+PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPCBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0IDw9IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9KTtcbn0gLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXG5mdW5jdGlvbiBzY3JvbGxUb3AoLi4uYXJncykge1xuICBsZXQgW3RvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFt0b3AsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cblxuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdG9wID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxUb3A7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZG9tLnNjcm9sbFRvKHVuZGVmaW5lZCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExlZnQoLi4uYXJncykge1xuICBsZXQgW2xlZnQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBbbGVmdCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuXG4gIGNvbnN0IGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyhsZWZ0LCB1bmRlZmluZWQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBlbHMgPSB0aGlzO1xuICBjb25zdCBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnIC8vIG9yICdsaW5lYXInXG5cbiAgICAgIC8qIENhbGxiYWNrc1xuICAgICAgYmVnaW4oZWxlbWVudHMpXG4gICAgICBjb21wbGV0ZShlbGVtZW50cylcbiAgICAgIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSwgcmVtYWluaW5nLCBzdGFydCwgdHdlZW5WYWx1ZSlcbiAgICAgICovXG5cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcbiAgICBlbGVtZW50czogZWxzLFxuICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgcXVlOiBbXSxcblxuICAgIGVhc2luZ1Byb2dyZXNzKGVhc2luZywgcHJvZ3Jlc3MpIHtcbiAgICAgIGlmIChlYXNpbmcgPT09ICdzd2luZycpIHtcbiAgICAgICAgcmV0dXJuIDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZWFzaW5nKHByb2dyZXNzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgIH0sXG5cbiAgICBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cblxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChlbCA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuXG4gICAgZG9uZShjb21wbGV0ZSkge1xuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChlbCA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXBsZXRlKSBjb21wbGV0ZShlbHMpO1xuXG4gICAgICBpZiAoYS5xdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBxdWUgPSBhLnF1ZS5zaGlmdCgpO1xuICAgICAgICBhLmFuaW1hdGUocXVlWzBdLCBxdWVbMV0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlbGVtZW50cyA9IFtdOyAvLyBEZWZpbmUgJiBDYWNoZSBJbml0aWFscyAmIFVuaXRzXG5cbiAgICAgIGEuZWxlbWVudHMuZWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBpbml0aWFsRnVsbFZhbHVlO1xuICAgICAgICBsZXQgaW5pdGlhbFZhbHVlO1xuICAgICAgICBsZXQgdW5pdDtcbiAgICAgICAgbGV0IGZpbmFsVmFsdWU7XG4gICAgICAgIGxldCBmaW5hbEZ1bGxWYWx1ZTtcbiAgICAgICAgaWYgKCFlbC5kb203QW5pbWF0ZUluc3RhbmNlKSBhLmVsZW1lbnRzW2luZGV4XS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgICAgICAgZWxlbWVudHNbaW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogZWxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQsXG4gICAgICAgICAgICBmaW5hbFZhbHVlLFxuICAgICAgICAgICAgZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIGxldCB0aW1lO1xuICAgICAgbGV0IGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICBsZXQgcHJvcHNEb25lID0gMDtcbiAgICAgIGxldCBkb25lO1xuICAgICAgbGV0IGJlZ2FuID0gZmFsc2U7XG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgcHJvZ3Jlc3M7XG4gICAgICAgIGxldCBlYXNlUHJvZ3Jlc3M7IC8vIGxldCBlbDtcblxuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksIHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUgPCAwID8gMCA6IHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcbiAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApO1xuICAgICAgICAgICAgZWFzZVByb2dyZXNzID0gYS5lYXNpbmdQcm9ncmVzcyhwYXJhbXMuZWFzaW5nLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgZmluYWxWYWx1ZSxcbiAgICAgICAgICAgICAgdW5pdFxuICAgICAgICAgICAgfSA9IGVsW3Byb3BdO1xuICAgICAgICAgICAgZWxbcHJvcF0uY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlICsgZWFzZVByb2dyZXNzICogKGZpbmFsVmFsdWUgLSBpbml0aWFsVmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gZWxbcHJvcF0uY3VycmVudFZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoZmluYWxWYWx1ZSA+IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPj0gZmluYWxWYWx1ZSB8fCBmaW5hbFZhbHVlIDwgaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA8PSBmaW5hbFZhbHVlKSB7XG4gICAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGZpbmFsVmFsdWUgKyB1bml0O1xuICAgICAgICAgICAgICBwcm9wc0RvbmUgKz0gMTtcblxuICAgICAgICAgICAgICBpZiAocHJvcHNEb25lID09PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZWwuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNEb25lICs9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZWxlbWVudHNEb25lID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBhLmRvbmUocGFyYW1zLmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBjdXJyZW50VmFsdWUgKyB1bml0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjsgLy8gVGhlbiBjYWxsXG5cbiAgICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgfVxuXG4gICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgbGV0IGFuaW1hdGVJbnN0YW5jZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGEuZWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBhbmltYXRlSW5zdGFuY2UgPSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgfSBlbHNlIGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgbm9UcmlnZ2VyID0gJ3Jlc2l6ZSBzY3JvbGwnLnNwbGl0KCcgJyk7XG5cbmZ1bmN0aW9uIHNob3J0Y3V0KG5hbWUpIHtcbiAgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG5vVHJpZ2dlci5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgICAgICAgIGlmIChuYW1lIGluIHRoaXNbaV0pIHRoaXNbaV1bbmFtZV0oKTtlbHNlIHtcbiAgICAgICAgICAgICQodGhpc1tpXSkudHJpZ2dlcihuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgLi4uYXJncyk7XG4gIH1cblxuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG5jb25zdCBjbGljayA9IHNob3J0Y3V0KCdjbGljaycpO1xuY29uc3QgYmx1ciA9IHNob3J0Y3V0KCdibHVyJyk7XG5jb25zdCBmb2N1cyA9IHNob3J0Y3V0KCdmb2N1cycpO1xuY29uc3QgZm9jdXNpbiA9IHNob3J0Y3V0KCdmb2N1c2luJyk7XG5jb25zdCBmb2N1c291dCA9IHNob3J0Y3V0KCdmb2N1c291dCcpO1xuY29uc3Qga2V5dXAgPSBzaG9ydGN1dCgna2V5dXAnKTtcbmNvbnN0IGtleWRvd24gPSBzaG9ydGN1dCgna2V5ZG93bicpO1xuY29uc3Qga2V5cHJlc3MgPSBzaG9ydGN1dCgna2V5cHJlc3MnKTtcbmNvbnN0IHN1Ym1pdCA9IHNob3J0Y3V0KCdzdWJtaXQnKTtcbmNvbnN0IGNoYW5nZSA9IHNob3J0Y3V0KCdjaGFuZ2UnKTtcbmNvbnN0IG1vdXNlZG93biA9IHNob3J0Y3V0KCdtb3VzZWRvd24nKTtcbmNvbnN0IG1vdXNlbW92ZSA9IHNob3J0Y3V0KCdtb3VzZW1vdmUnKTtcbmNvbnN0IG1vdXNldXAgPSBzaG9ydGN1dCgnbW91c2V1cCcpO1xuY29uc3QgbW91c2VlbnRlciA9IHNob3J0Y3V0KCdtb3VzZWVudGVyJyk7XG5jb25zdCBtb3VzZWxlYXZlID0gc2hvcnRjdXQoJ21vdXNlbGVhdmUnKTtcbmNvbnN0IG1vdXNlb3V0ID0gc2hvcnRjdXQoJ21vdXNlb3V0Jyk7XG5jb25zdCBtb3VzZW92ZXIgPSBzaG9ydGN1dCgnbW91c2VvdmVyJyk7XG5jb25zdCB0b3VjaHN0YXJ0ID0gc2hvcnRjdXQoJ3RvdWNoc3RhcnQnKTtcbmNvbnN0IHRvdWNoZW5kID0gc2hvcnRjdXQoJ3RvdWNoZW5kJyk7XG5jb25zdCB0b3VjaG1vdmUgPSBzaG9ydGN1dCgndG91Y2htb3ZlJyk7XG5jb25zdCByZXNpemUgPSBzaG9ydGN1dCgncmVzaXplJyk7XG5jb25zdCBzY3JvbGwgPSBzaG9ydGN1dCgnc2Nyb2xsJyk7XG5cbmV4cG9ydCBkZWZhdWx0ICQ7XG5leHBvcnQgeyAkLCBhZGQsIGFkZENsYXNzLCBhbmltYXRlLCBhbmltYXRpb25FbmQsIGFwcGVuZCwgYXBwZW5kVG8sIGF0dHIsIGJsdXIsIGNoYW5nZSwgY2hpbGRyZW4sIGNsaWNrLCBjbG9zZXN0LCBjc3MsIGRhdGEsIGRhdGFzZXQsIGRldGFjaCwgZWFjaCwgZW1wdHksIGVxLCBmaWx0ZXIsIGZpbmQsIGZvY3VzLCBmb2N1c2luLCBmb2N1c291dCwgaGFzQ2xhc3MsIGhlaWdodCwgaGlkZSwgaHRtbCwgaW5kZXgsIGluc2VydEFmdGVyLCBpbnNlcnRCZWZvcmUsIGlzLCBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAsIG1vdXNlZG93biwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2Vtb3ZlLCBtb3VzZW91dCwgbW91c2VvdmVyLCBtb3VzZXVwLCBuZXh0LCBuZXh0QWxsLCBvZmYsIG9mZnNldCwgb24sIG9uY2UsIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoLCBwYXJlbnQsIHBhcmVudHMsIHByZXBlbmQsIHByZXBlbmRUbywgcHJldiwgcHJldkFsbCwgcHJvcCwgcmVtb3ZlLCByZW1vdmVBdHRyLCByZW1vdmVDbGFzcywgcmVtb3ZlRGF0YSwgcmVzaXplLCBzY3JvbGwsIHNjcm9sbExlZnQsIHNjcm9sbFRvLCBzY3JvbGxUb3AsIHNob3csIHNpYmxpbmdzLCBzdG9wLCBzdHlsZXMsIHN1Ym1pdCwgdGV4dCwgdG9nZ2xlQ2xhc3MsIHRvdWNoZW5kLCB0b3VjaG1vdmUsIHRvdWNoc3RhcnQsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgdHJpZ2dlciwgdmFsLCB2YWx1ZSwgd2lkdGggfTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgIF9nZXQgPSBSZWZsZWN0LmdldDtcbiAgfSBlbHNlIHtcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5zZXQpIHtcbiAgICBzZXQgPSBSZWZsZWN0LnNldDtcbiAgfSBlbHNlIHtcbiAgICBzZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICB2YXIgZGVzYztcblxuICAgICAgaWYgKGJhc2UpIHtcbiAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgICAgIGRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYykge1xuICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgcHJvcGVydHksIGRlc2MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xufVxuXG5mdW5jdGlvbiBfc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlciwgaXNTdHJpY3QpIHtcbiAgdmFyIHMgPSBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyIHx8IHRhcmdldCk7XG5cbiAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gc2V0IHByb3BlcnR5Jyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmV4cG9ydCB7IF9jcmVhdGVDbGFzcyBhcyBfLCBfY2xhc3NDYWxsQ2hlY2sgYXMgYSwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGFzIGIsIF90eXBlb2YgYXMgYywgX2luaGVyaXRzIGFzIGQsIF9jcmVhdGVTdXBlciBhcyBlLCBfc2xpY2VkVG9BcnJheSBhcyBmLCBfZ2V0IGFzIGcsIF9nZXRQcm90b3R5cGVPZiBhcyBoLCBfc2V0IGFzIGkgfTtcbiIsImltcG9ydCB7IGQgYXMgX2luaGVyaXRzLCBlIGFzIF9jcmVhdGVTdXBlciwgYSBhcyBfY2xhc3NDYWxsQ2hlY2ssIF8gYXMgX2NyZWF0ZUNsYXNzIH0gZnJvbSAnLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgSFRNTE1hc2tFbGVtZW50IGZyb20gJy4vaHRtbC1tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi9tYXNrLWVsZW1lbnQuanMnO1xuXG52YXIgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfSFRNTE1hc2tFbGVtZW50KSB7XG4gIF9pbmhlcml0cyhIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQsIF9IVE1MTWFza0VsZW1lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50KTtcblxuICBmdW5jdGlvbiBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCk7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50LCBbe1xuICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uU3RhcnRcIixcbiAgICBnZXQ6XG4gICAgLyoqXG4gICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHJldHVybiBzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBlbmRcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uRW5kXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHJldHVybiBzZWxlY3Rpb24gJiYgdGhpcy5fdW5zYWZlU2VsZWN0aW9uU3RhcnQgKyBTdHJpbmcoc2VsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAgU2V0cyBIVE1MRWxlbWVudCBzZWxlY3Rpb25cbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdW5zYWZlU2VsZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCF0aGlzLnJvb3RFbGVtZW50LmNyZWF0ZVJhbmdlKSByZXR1cm47XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnJvb3RFbGVtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZS5zZXRTdGFydCh0aGlzLmlucHV0LmZpcnN0Q2hpbGQgfHwgdGhpcy5pbnB1dCwgc3RhcnQpO1xuICAgICAgcmFuZ2Uuc2V0RW5kKHRoaXMuaW5wdXQubGFzdENoaWxkIHx8IHRoaXMuaW5wdXQsIGVuZCk7XG4gICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcblxuICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAgSFRNTEVsZW1lbnQgdmFsdWVcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudGV4dENvbnRlbnQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XG59KEhUTUxNYXNrRWxlbWVudCk7XG5JTWFzay5IVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgPSBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XG5cbmV4cG9ydCB7IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBkIGFzIF9pbmhlcml0cywgZSBhcyBfY3JlYXRlU3VwZXIsIGEgYXMgX2NsYXNzQ2FsbENoZWNrLCBfIGFzIF9jcmVhdGVDbGFzcyB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IE1hc2tFbGVtZW50IGZyb20gJy4vbWFzay1lbGVtZW50LmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5cbi8qKiBCcmlkZ2UgYmV0d2VlbiBIVE1MRWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cblxudmFyIEhUTUxNYXNrRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tFbGVtZW50KSB7XG4gIF9pbmhlcml0cyhIVE1MTWFza0VsZW1lbnQsIF9NYXNrRWxlbWVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihIVE1MTWFza0VsZW1lbnQpO1xuXG4gIC8qKiBNYXBwaW5nIGJldHdlZW4gSFRNTEVsZW1lbnQgZXZlbnRzIGFuZCBtYXNrIGludGVybmFsIGV2ZW50cyAqL1xuXG4gIC8qKiBIVE1MRWxlbWVudCB0byB1c2UgbWFzayBvbiAqL1xuXG4gIC8qKlxuICAgIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fSBpbnB1dFxuICAqL1xuICBmdW5jdGlvbiBIVE1MTWFza0VsZW1lbnQoaW5wdXQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSFRNTE1hc2tFbGVtZW50KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgX3RoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICBfdGhpcy5faGFuZGxlcnMgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqICovXG4gIC8vICRGbG93Rml4TWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4MzlcblxuXG4gIF9jcmVhdGVDbGFzcyhIVE1MTWFza0VsZW1lbnQsIFt7XG4gICAga2V5OiBcInJvb3RFbGVtZW50XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dC5nZXRSb290Tm9kZSA/IHRoaXMuaW5wdXQuZ2V0Um9vdE5vZGUoKSA6IGRvY3VtZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgIElzIGVsZW1lbnQgaW4gZm9jdXNcbiAgICAgIEByZWFkb25seVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0FjdGl2ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8kRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gdGhpcy5pbnB1dCA9PT0gdGhpcy5yb290RWxlbWVudC5hY3RpdmVFbGVtZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIHN0YXJ0XG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdGlvblN0YXJ0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dC5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gICAgLyoqXG4gICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBlbmRcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uRW5kXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dC5zZWxlY3Rpb25FbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAgU2V0cyBIVE1MRWxlbWVudCBzZWxlY3Rpb25cbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdW5zYWZlU2VsZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCkge1xuICAgICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBIVE1MRWxlbWVudCB2YWx1ZVxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLmlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQmluZHMgSFRNTEVsZW1lbnQgZXZlbnRzIHRvIG1hc2sgaW50ZXJuYWwgZXZlbnRzXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYmluZEV2ZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kRXZlbnRzKGhhbmRsZXJzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3RvZ2dsZUV2ZW50SGFuZGxlcihIVE1MTWFza0VsZW1lbnQuRVZFTlRTX01BUFtldmVudF0sIGhhbmRsZXJzW2V2ZW50XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBVbmJpbmRzIEhUTUxFbGVtZW50IGV2ZW50cyB0byBtYXNrIGludGVybmFsIGV2ZW50c1xuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuYmluZEV2ZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRFdmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5faGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuX3RvZ2dsZUV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdG9nZ2xlRXZlbnRIYW5kbGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF90b2dnbGVFdmVudEhhbmRsZXIoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIGlmICh0aGlzLl9oYW5kbGVyc1tldmVudF0pIHtcbiAgICAgICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLl9oYW5kbGVyc1tldmVudF0pO1xuICAgICAgICBkZWxldGUgdGhpcy5faGFuZGxlcnNbZXZlbnRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9oYW5kbGVyc1tldmVudF0gPSBoYW5kbGVyO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIVE1MTWFza0VsZW1lbnQ7XG59KE1hc2tFbGVtZW50KTtcbkhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQID0ge1xuICBzZWxlY3Rpb25DaGFuZ2U6ICdrZXlkb3duJyxcbiAgaW5wdXQ6ICdpbnB1dCcsXG4gIGRyb3A6ICdkcm9wJyxcbiAgY2xpY2s6ICdjbGljaycsXG4gIGZvY3VzOiAnZm9jdXMnLFxuICBjb21taXQ6ICdibHVyJ1xufTtcbklNYXNrLkhUTUxNYXNrRWxlbWVudCA9IEhUTUxNYXNrRWxlbWVudDtcblxuZXhwb3J0IHsgSFRNTE1hc2tFbGVtZW50IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IF8gYXMgX2NyZWF0ZUNsYXNzLCBhIGFzIF9jbGFzc0NhbGxDaGVjaywgYiBhcyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgfSBmcm9tICcuLi9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLWEwYjM0NzY0LmpzJztcbmltcG9ydCB7IG9iamVjdEluY2x1ZGVzLCBESVJFQ1RJT04gfSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCBBY3Rpb25EZXRhaWxzIGZyb20gJy4uL2NvcmUvYWN0aW9uLWRldGFpbHMuanMnO1xuaW1wb3J0IE1hc2tlZERhdGUgZnJvbSAnLi4vbWFza2VkL2RhdGUuanMnO1xuaW1wb3J0IGNyZWF0ZU1hc2ssIHsgbWFza2VkQ2xhc3MgfSBmcm9tICcuLi9tYXNrZWQvZmFjdG9yeS5qcyc7XG5pbXBvcnQgTWFza0VsZW1lbnQgZnJvbSAnLi9tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IEhUTUxNYXNrRWxlbWVudCBmcm9tICcuL2h0bWwtbWFzay1lbGVtZW50LmpzJztcbmltcG9ydCBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgZnJvbSAnLi9odG1sLWNvbnRlbnRlZGl0YWJsZS1tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vbWFza2VkL3BhdHRlcm4uanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi4vbWFza2VkL2Jhc2UuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi4vbWFza2VkL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4uL21hc2tlZC9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuLi9tYXNrZWQvcGF0dGVybi9jaHVuay10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuLi9tYXNrZWQvcmVnZXhwLmpzJztcbmltcG9ydCAnLi4vbWFza2VkL3JhbmdlLmpzJztcblxudmFyIF9leGNsdWRlZCA9IFtcIm1hc2tcIl07XG4vKiogTGlzdGVucyB0byBlbGVtZW50IGV2ZW50cyBhbmQgY29udHJvbHMgY2hhbmdlcyBiZXR3ZWVuIGVsZW1lbnQgYW5kIHtAbGluayBNYXNrZWR9ICovXG5cbnZhciBJbnB1dE1hc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICBWaWV3IGVsZW1lbnRcbiAgICBAcmVhZG9ubHlcbiAgKi9cblxuICAvKipcbiAgICBJbnRlcm5hbCB7QGxpbmsgTWFza2VkfSBtb2RlbFxuICAgIEByZWFkb25seVxuICAqL1xuXG4gIC8qKlxuICAgIEBwYXJhbSB7TWFza0VsZW1lbnR8SFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fSBlbFxuICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICovXG4gIGZ1bmN0aW9uIElucHV0TWFzayhlbCwgb3B0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnB1dE1hc2spO1xuXG4gICAgdGhpcy5lbCA9IGVsIGluc3RhbmNlb2YgTWFza0VsZW1lbnQgPyBlbCA6IGVsLmlzQ29udGVudEVkaXRhYmxlICYmIGVsLnRhZ05hbWUgIT09ICdJTlBVVCcgJiYgZWwudGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyA/IG5ldyBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQoZWwpIDogbmV3IEhUTUxNYXNrRWxlbWVudChlbCk7XG4gICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKG9wdHMpO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX3ZhbHVlID0gJyc7XG4gICAgdGhpcy5fdW5tYXNrZWRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuX3NhdmVTZWxlY3Rpb24gPSB0aGlzLl9zYXZlU2VsZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25JbnB1dCA9IHRoaXMuX29uSW5wdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Ecm9wID0gdGhpcy5fb25Ecm9wLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Gb2N1cyA9IHRoaXMuX29uRm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkNsaWNrID0gdGhpcy5fb25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWxpZ25DdXJzb3IgPSB0aGlzLmFsaWduQ3Vyc29yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5ID0gdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLl9iaW5kRXZlbnRzKCk7IC8vIHJlZnJlc2hcblxuXG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuXG4gICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgfVxuICAvKiogUmVhZCBvciB1cGRhdGUgbWFzayAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKElucHV0TWFzaywgW3tcbiAgICBrZXk6IFwibWFza1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFza2VkLm1hc2s7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChtYXNrKSB7XG4gICAgICBpZiAodGhpcy5tYXNrRXF1YWxzKG1hc2spKSByZXR1cm47XG5cbiAgICAgIGlmICghKG1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpICYmIHRoaXMubWFza2VkLmNvbnN0cnVjdG9yID09PSBtYXNrZWRDbGFzcyhtYXNrKSkge1xuICAgICAgICB0aGlzLm1hc2tlZC51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgICBtYXNrOiBtYXNrXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXNrZWQgPSBjcmVhdGVNYXNrKHtcbiAgICAgICAgbWFzazogbWFza1xuICAgICAgfSk7XG4gICAgICBtYXNrZWQudW5tYXNrZWRWYWx1ZSA9IHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG4gICAgICB0aGlzLm1hc2tlZCA9IG1hc2tlZDtcbiAgICB9XG4gICAgLyoqIFJhdyB2YWx1ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWFza0VxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrRXF1YWxzKG1hc2spIHtcbiAgICAgIHJldHVybiBtYXNrID09IG51bGwgfHwgbWFzayA9PT0gdGhpcy5tYXNrZWQubWFzayB8fCBtYXNrID09PSBEYXRlICYmIHRoaXMubWFza2VkIGluc3RhbmNlb2YgTWFza2VkRGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHN0cikge1xuICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSBzdHI7XG4gICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcbiAgICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcbiAgICB9XG4gICAgLyoqIFVubWFza2VkIHZhbHVlICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdW5tYXNrZWRWYWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHN0cikge1xuICAgICAgdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZSA9IHN0cjtcbiAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuICAgIH1cbiAgICAvKiogVHlwZWQgdW5tYXNrZWQgdmFsdWUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInR5cGVkVmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hc2tlZC50eXBlZFZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB0aGlzLm1hc2tlZC50eXBlZFZhbHVlID0gdmFsO1xuICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG4gICAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgU3RhcnRzIGxpc3RlbmluZyB0byBlbGVtZW50IGV2ZW50c1xuICAgICAgQHByb3RlY3RlZFxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYmluZEV2ZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYmluZEV2ZW50cygpIHtcbiAgICAgIHRoaXMuZWwuYmluZEV2ZW50cyh7XG4gICAgICAgIHNlbGVjdGlvbkNoYW5nZTogdGhpcy5fc2F2ZVNlbGVjdGlvbixcbiAgICAgICAgaW5wdXQ6IHRoaXMuX29uSW5wdXQsXG4gICAgICAgIGRyb3A6IHRoaXMuX29uRHJvcCxcbiAgICAgICAgY2xpY2s6IHRoaXMuX29uQ2xpY2ssXG4gICAgICAgIGZvY3VzOiB0aGlzLl9vbkZvY3VzLFxuICAgICAgICBjb21taXQ6IHRoaXMuX29uQ2hhbmdlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBTdG9wcyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHNcbiAgICAgIEBwcm90ZWN0ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl91bmJpbmRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VuYmluZEV2ZW50cygpIHtcbiAgICAgIGlmICh0aGlzLmVsKSB0aGlzLmVsLnVuYmluZEV2ZW50cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEZpcmVzIGN1c3RvbSBldmVudFxuICAgICAgQHByb3RlY3RlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2ZpcmVFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlyZUV2ZW50KGV2KSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW2V2XTtcbiAgICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm47XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICByZXR1cm4gbC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQ3VycmVudCBzZWxlY3Rpb24gc3RhcnRcbiAgICAgIEByZWFkb25seVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZWxlY3Rpb25TdGFydFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvckNoYW5naW5nID8gdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgOiB0aGlzLmVsLnNlbGVjdGlvblN0YXJ0O1xuICAgIH1cbiAgICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cblxuICB9LCB7XG4gICAga2V5OiBcImN1cnNvclBvc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvckNoYW5naW5nID8gdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgOiB0aGlzLmVsLnNlbGVjdGlvbkVuZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHBvcykge1xuICAgICAgaWYgKCF0aGlzLmVsIHx8ICF0aGlzLmVsLmlzQWN0aXZlKSByZXR1cm47XG4gICAgICB0aGlzLmVsLnNlbGVjdChwb3MsIHBvcyk7XG5cbiAgICAgIHRoaXMuX3NhdmVTZWxlY3Rpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBTdG9yZXMgY3VycmVudCBzZWxlY3Rpb25cbiAgICAgIEBwcm90ZWN0ZWRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3NhdmVTZWxlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NhdmVTZWxlY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy52YWx1ZSAhPT0gdGhpcy5lbC52YWx1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0VsZW1lbnQgdmFsdWUgd2FzIGNoYW5nZWQgb3V0c2lkZSBvZiBtYXNrLiBTeW5jcm9uaXplIG1hc2sgdXNpbmcgYG1hc2sudXBkYXRlVmFsdWUoKWAgdG8gd29yayBwcm9wZXJseS4nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IHRoaXMuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogdGhpcy5jdXJzb3JQb3NcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKiBTeW5jcm9uaXplcyBtb2RlbCB2YWx1ZSBmcm9tIHZpZXcgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKCkge1xuICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSB0aGlzLmVsLnZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLm1hc2tlZC52YWx1ZTtcbiAgICB9XG4gICAgLyoqIFN5bmNyb25pemVzIHZpZXcgZnJvbSBtb2RlbCB2YWx1ZSwgZmlyZXMgY2hhbmdlIGV2ZW50cyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlQ29udHJvbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDb250cm9sKCkge1xuICAgICAgdmFyIG5ld1VubWFza2VkVmFsdWUgPSB0aGlzLm1hc2tlZC51bm1hc2tlZFZhbHVlO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XG4gICAgICB2YXIgaXNDaGFuZ2VkID0gdGhpcy51bm1hc2tlZFZhbHVlICE9PSBuZXdVbm1hc2tlZFZhbHVlIHx8IHRoaXMudmFsdWUgIT09IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5fdW5tYXNrZWRWYWx1ZSA9IG5ld1VubWFza2VkVmFsdWU7XG4gICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaWYgKHRoaXMuZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB0aGlzLmVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBpZiAoaXNDaGFuZ2VkKSB0aGlzLl9maXJlQ2hhbmdlRXZlbnRzKCk7XG4gICAgfVxuICAgIC8qKiBVcGRhdGVzIG9wdGlvbnMgd2l0aCBkZWVwIGVxdWFsIGNoZWNrLCByZWNyZWF0ZXMgQHtsaW5rIE1hc2tlZH0gbW9kZWwgaWYgbWFzayB0eXBlIGNoYW5nZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZU9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhvcHRzKSB7XG4gICAgICB2YXIgbWFzayA9IG9wdHMubWFzayxcbiAgICAgICAgICByZXN0T3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRzLCBfZXhjbHVkZWQpO1xuXG4gICAgICB2YXIgdXBkYXRlTWFzayA9ICF0aGlzLm1hc2tFcXVhbHMobWFzayk7XG4gICAgICB2YXIgdXBkYXRlT3B0cyA9ICFvYmplY3RJbmNsdWRlcyh0aGlzLm1hc2tlZCwgcmVzdE9wdHMpO1xuICAgICAgaWYgKHVwZGF0ZU1hc2spIHRoaXMubWFzayA9IG1hc2s7XG4gICAgICBpZiAodXBkYXRlT3B0cykgdGhpcy5tYXNrZWQudXBkYXRlT3B0aW9ucyhyZXN0T3B0cyk7XG4gICAgICBpZiAodXBkYXRlTWFzayB8fCB1cGRhdGVPcHRzKSB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcbiAgICB9XG4gICAgLyoqIFVwZGF0ZXMgY3Vyc29yICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVDdXJzb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ3Vyc29yKGN1cnNvclBvcykge1xuICAgICAgaWYgKGN1cnNvclBvcyA9PSBudWxsKSByZXR1cm47XG4gICAgICB0aGlzLmN1cnNvclBvcyA9IGN1cnNvclBvczsgLy8gYWxzbyBxdWV1ZSBjaGFuZ2UgY3Vyc29yIGZvciBtb2JpbGUgYnJvd3NlcnNcblxuICAgICAgdGhpcy5fZGVsYXlVcGRhdGVDdXJzb3IoY3Vyc29yUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBEZWxheXMgY3Vyc29yIHVwZGF0ZSB0byBzdXBwb3J0IG1vYmlsZSBicm93c2Vyc1xuICAgICAgQHByaXZhdGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGF5VXBkYXRlQ3Vyc29yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxheVVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7XG5cbiAgICAgIHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zID0gY3Vyc29yUG9zO1xuICAgICAgdGhpcy5fY3Vyc29yQ2hhbmdpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5lbCkgcmV0dXJuOyAvLyBpZiB3YXMgZGVzdHJveWVkXG5cbiAgICAgICAgX3RoaXMuY3Vyc29yUG9zID0gX3RoaXMuX2NoYW5naW5nQ3Vyc29yUG9zO1xuXG4gICAgICAgIF90aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xuICAgICAgfSwgMTApO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEZpcmVzIGN1c3RvbSBldmVudHNcbiAgICAgIEBwcm90ZWN0ZWRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2ZpcmVDaGFuZ2VFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpcmVDaGFuZ2VFdmVudHMoKSB7XG4gICAgICB0aGlzLl9maXJlRXZlbnQoJ2FjY2VwdCcsIHRoaXMuX2lucHV0RXZlbnQpO1xuXG4gICAgICBpZiAodGhpcy5tYXNrZWQuaXNDb21wbGV0ZSkgdGhpcy5fZmlyZUV2ZW50KCdjb21wbGV0ZScsIHRoaXMuX2lucHV0RXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEFib3J0cyBkZWxheWVkIGN1cnNvciB1cGRhdGVcbiAgICAgIEBwcml2YXRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hYm9ydFVwZGF0ZUN1cnNvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWJvcnRVcGRhdGVDdXJzb3IoKSB7XG4gICAgICBpZiAodGhpcy5fY3Vyc29yQ2hhbmdpbmcpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2N1cnNvckNoYW5naW5nKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvckNoYW5naW5nO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiogQWxpZ25zIGN1cnNvciB0byBuZWFyZXN0IGF2YWlsYWJsZSBwb3NpdGlvbiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxpZ25DdXJzb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWxpZ25DdXJzb3IoKSB7XG4gICAgICB0aGlzLmN1cnNvclBvcyA9IHRoaXMubWFza2VkLm5lYXJlc3RJbnB1dFBvcyh0aGlzLmN1cnNvclBvcywgRElSRUNUSU9OLkxFRlQpO1xuICAgIH1cbiAgICAvKiogQWxpZ25zIGN1cnNvciBvbmx5IGlmIHNlbGVjdGlvbiBpcyBlbXB0eSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxpZ25DdXJzb3JGcmllbmRseVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbGlnbkN1cnNvckZyaWVuZGx5KCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IHRoaXMuY3Vyc29yUG9zKSByZXR1cm47IC8vIHNraXAgaWYgcmFuZ2UgaXMgc2VsZWN0ZWRcblxuICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuICAgIH1cbiAgICAvKiogQWRkcyBsaXN0ZW5lciBvbiBjdXN0b20gZXZlbnQgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2LCBoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHRoaXMuX2xpc3RlbmVyc1tldl0gPSBbXTtcblxuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2XS5wdXNoKGhhbmRsZXIpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIFJlbW92ZXMgY3VzdG9tIGV2ZW50IGxpc3RlbmVyICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2LCBoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldl07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgaEluZGV4ID0gdGhpcy5fbGlzdGVuZXJzW2V2XS5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgICBpZiAoaEluZGV4ID49IDApIHRoaXMuX2xpc3RlbmVyc1tldl0uc3BsaWNlKGhJbmRleCwgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEhhbmRsZXMgdmlldyBpbnB1dCBldmVudCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uSW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uSW5wdXQoZSkge1xuICAgICAgdGhpcy5faW5wdXRFdmVudCA9IGU7XG5cbiAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7IC8vIGZpeCBzdHJhbmdlIElFIGJlaGF2aW9yXG5cblxuICAgICAgaWYgKCF0aGlzLl9zZWxlY3Rpb24pIHJldHVybiB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICB2YXIgZGV0YWlscyA9IG5ldyBBY3Rpb25EZXRhaWxzKCAvLyBuZXcgc3RhdGVcbiAgICAgIHRoaXMuZWwudmFsdWUsIHRoaXMuY3Vyc29yUG9zLCAvLyBvbGQgc3RhdGVcbiAgICAgIHRoaXMudmFsdWUsIHRoaXMuX3NlbGVjdGlvbik7XG4gICAgICB2YXIgb2xkUmF3VmFsdWUgPSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlO1xuICAgICAgdmFyIG9mZnNldCA9IHRoaXMubWFza2VkLnNwbGljZShkZXRhaWxzLnN0YXJ0Q2hhbmdlUG9zLCBkZXRhaWxzLnJlbW92ZWQubGVuZ3RoLCBkZXRhaWxzLmluc2VydGVkLCBkZXRhaWxzLnJlbW92ZURpcmVjdGlvbikub2Zmc2V0OyAvLyBmb3JjZSBhbGlnbiBpbiByZW1vdmUgZGlyZWN0aW9uIG9ubHkgaWYgbm8gaW5wdXQgY2hhcnMgd2VyZSByZW1vdmVkXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugc3RpbGwgbmVlZCB0byBhbGlnbiB3aXRoIE5PTkUgKHRvIGdldCBvdXQgZnJvbSBmaXhlZCBzeW1ib2xzIGZvciBpbnN0YW5jZSlcblxuICAgICAgdmFyIHJlbW92ZURpcmVjdGlvbiA9IG9sZFJhd1ZhbHVlID09PSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlID8gZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24gOiBESVJFQ1RJT04uTk9ORTtcbiAgICAgIHZhciBjdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3MoZGV0YWlscy5zdGFydENoYW5nZVBvcyArIG9mZnNldCwgcmVtb3ZlRGlyZWN0aW9uKTtcbiAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuICAgICAgdGhpcy51cGRhdGVDdXJzb3IoY3Vyc29yUG9zKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9pbnB1dEV2ZW50O1xuICAgIH1cbiAgICAvKiogSGFuZGxlcyB2aWV3IGNoYW5nZSBldmVudCBhbmQgY29tbWl0cyBtb2RlbCB2YWx1ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoYW5nZSgpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcbiAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuXG4gICAgICB0aGlzLl9zYXZlU2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIC8qKiBIYW5kbGVzIHZpZXcgZHJvcCBldmVudCwgcHJldmVudHMgYnkgZGVmYXVsdCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uRHJvcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Ecm9wKGV2KSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIC8qKiBSZXN0b3JlIGxhc3Qgc2VsZWN0aW9uIG9uIGZvY3VzICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfb25Gb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Gb2N1cyhldikge1xuICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG4gICAgfVxuICAgIC8qKiBSZXN0b3JlIGxhc3Qgc2VsZWN0aW9uIG9uIGZvY3VzICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfb25DbGlja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DbGljayhldikge1xuICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG4gICAgfVxuICAgIC8qKiBVbmJpbmQgdmlldyBldmVudHMgYW5kIHJlbW92ZXMgZWxlbWVudCByZWZlcmVuY2UgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpOyAvLyAkRmxvd0ZpeE1lIHdoeSBub3QgZG8gc28/XG5cblxuICAgICAgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA9IDA7IC8vICRGbG93Rml4TWVcblxuICAgICAgZGVsZXRlIHRoaXMuZWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElucHV0TWFzaztcbn0oKTtcbklNYXNrLklucHV0TWFzayA9IElucHV0TWFzaztcblxuZXhwb3J0IHsgSW5wdXRNYXNrIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IF8gYXMgX2NyZWF0ZUNsYXNzLCBhIGFzIF9jbGFzc0NhbGxDaGVjayB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcblxuLyoqXG4gIEdlbmVyaWMgZWxlbWVudCBBUEkgdG8gdXNlIHdpdGggbWFza1xuICBAaW50ZXJmYWNlXG4qL1xudmFyIE1hc2tFbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWFza0VsZW1lbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tFbGVtZW50KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYXNrRWxlbWVudCwgW3tcbiAgICBrZXk6IFwic2VsZWN0aW9uU3RhcnRcIixcbiAgICBnZXQ6XG4gICAgLyoqICovXG5cbiAgICAvKiogKi9cblxuICAgIC8qKiAqL1xuXG4gICAgLyoqIFNhZmVseSByZXR1cm5zIHNlbGVjdGlvbiBzdGFydCAqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBzdGFydDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHJldHVybiBzdGFydCAhPSBudWxsID8gc3RhcnQgOiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgLyoqIFNhZmVseSByZXR1cm5zIHNlbGVjdGlvbiBlbmQgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNlbGVjdGlvbkVuZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGVuZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZW5kID0gdGhpcy5fdW5zYWZlU2VsZWN0aW9uRW5kO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIGVuZCAhPSBudWxsID8gZW5kIDogdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKiBTYWZlbHkgc2V0cyBlbGVtZW50IHNlbGVjdGlvbiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2VsZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdChzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCB8fCBzdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25TdGFydCAmJiBlbmQgPT09IHRoaXMuc2VsZWN0aW9uRW5kKSByZXR1cm47XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl91bnNhZmVTZWxlY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7fVxuICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzQWN0aXZlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImJpbmRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cyhoYW5kbGVycykge31cbiAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bmJpbmRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRzKCkge31cbiAgfV0pO1xuXG4gIHJldHVybiBNYXNrRWxlbWVudDtcbn0oKTtcbklNYXNrLk1hc2tFbGVtZW50ID0gTWFza0VsZW1lbnQ7XG5cbmV4cG9ydCB7IE1hc2tFbGVtZW50IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IF8gYXMgX2NyZWF0ZUNsYXNzLCBhIGFzIF9jbGFzc0NhbGxDaGVjayB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IHsgRElSRUNUSU9OIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKiBQcm92aWRlcyBkZXRhaWxzIG9mIGNoYW5naW5nIGlucHV0ICovXG5cbnZhciBBY3Rpb25EZXRhaWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqIEN1cnJlbnQgaW5wdXQgdmFsdWUgKi9cblxuICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cblxuICAvKiogT2xkIGlucHV0IHZhbHVlICovXG5cbiAgLyoqIE9sZCBzZWxlY3Rpb24gKi9cbiAgZnVuY3Rpb24gQWN0aW9uRGV0YWlscyh2YWx1ZSwgY3Vyc29yUG9zLCBvbGRWYWx1ZSwgb2xkU2VsZWN0aW9uKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjdGlvbkRldGFpbHMpO1xuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuY3Vyc29yUG9zID0gY3Vyc29yUG9zO1xuICAgIHRoaXMub2xkVmFsdWUgPSBvbGRWYWx1ZTtcbiAgICB0aGlzLm9sZFNlbGVjdGlvbiA9IG9sZFNlbGVjdGlvbjsgLy8gZG91YmxlIGNoZWNrIGlmIGxlZnQgcGFydCB3YXMgY2hhbmdlZCAoYXV0b2ZpbGxpbmcsIG90aGVyIG5vbi1zdGFuZGFyZCBpbnB1dCB0cmlnZ2VycylcblxuICAgIHdoaWxlICh0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuc3RhcnRDaGFuZ2VQb3MpICE9PSB0aGlzLm9sZFZhbHVlLnNsaWNlKDAsIHRoaXMuc3RhcnRDaGFuZ2VQb3MpKSB7XG4gICAgICAtLXRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICBTdGFydCBjaGFuZ2luZyBwb3NpdGlvblxuICAgIEByZWFkb25seVxuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEFjdGlvbkRldGFpbHMsIFt7XG4gICAga2V5OiBcInN0YXJ0Q2hhbmdlUG9zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5jdXJzb3JQb3MsIHRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBJbnNlcnRlZCBzeW1ib2xzIGNvdW50XG4gICAgICBAcmVhZG9ubHlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0ZWRDb3VudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zIC0gdGhpcy5zdGFydENoYW5nZVBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgICBJbnNlcnRlZCBzeW1ib2xzXG4gICAgICBAcmVhZG9ubHlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0ZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLmluc2VydGVkQ291bnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIFJlbW92ZWQgc3ltYm9scyBjb3VudFxuICAgICAgQHJlYWRvbmx5XG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZWRDb3VudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8gTWF0aC5tYXggZm9yIG9wcG9zaXRlIG9wZXJhdGlvblxuICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMub2xkU2VsZWN0aW9uLmVuZCAtIHRoaXMuc3RhcnRDaGFuZ2VQb3MgfHwgLy8gZm9yIERlbGV0ZVxuICAgICAgdGhpcy5vbGRWYWx1ZS5sZW5ndGggLSB0aGlzLnZhbHVlLmxlbmd0aCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgUmVtb3ZlZCBzeW1ib2xzXG4gICAgICBAcmVhZG9ubHlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMub2xkVmFsdWUuc3Vic3RyKHRoaXMuc3RhcnRDaGFuZ2VQb3MsIHRoaXMucmVtb3ZlZENvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBVbmNoYW5nZWQgaGVhZCBzeW1ib2xzXG4gICAgICBAcmVhZG9ubHlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGVhZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKDAsIHRoaXMuc3RhcnRDaGFuZ2VQb3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIFVuY2hhbmdlZCB0YWlsIHN5bWJvbHNcbiAgICAgIEByZWFkb25seVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0YWlsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZS5zdWJzdHJpbmcodGhpcy5zdGFydENoYW5nZVBvcyArIHRoaXMuaW5zZXJ0ZWRDb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgUmVtb3ZlIGRpcmVjdGlvblxuICAgICAgQHJlYWRvbmx5XG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZURpcmVjdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLnJlbW92ZWRDb3VudCB8fCB0aGlzLmluc2VydGVkQ291bnQpIHJldHVybiBESVJFQ1RJT04uTk9ORTsgLy8gYWxpZ24gcmlnaHQgaWYgZGVsZXRlIGF0IHJpZ2h0IG9yIGlmIHJhbmdlIHJlbW92ZWQgKGV2ZW50IHdpdGggYmFja3NwYWNlKVxuXG4gICAgICByZXR1cm4gdGhpcy5vbGRTZWxlY3Rpb24uZW5kID09PSB0aGlzLmN1cnNvclBvcyB8fCB0aGlzLm9sZFNlbGVjdGlvbi5zdGFydCA9PT0gdGhpcy5jdXJzb3JQb3MgPyBESVJFQ1RJT04uUklHSFQgOiBESVJFQ1RJT04uTEVGVDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWN0aW9uRGV0YWlscztcbn0oKTtcblxuZXhwb3J0IHsgQWN0aW9uRGV0YWlscyBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBfIGFzIF9jcmVhdGVDbGFzcywgYSBhcyBfY2xhc3NDYWxsQ2hlY2sgfSBmcm9tICcuLi9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLWEwYjM0NzY0LmpzJztcblxuLyoqXG4gIFByb3ZpZGVzIGRldGFpbHMgb2YgY2hhbmdpbmcgbW9kZWwgdmFsdWVcbiAgQHBhcmFtIHtPYmplY3R9IFtkZXRhaWxzXVxuICBAcGFyYW0ge3N0cmluZ30gW2RldGFpbHMuaW5zZXJ0ZWRdIC0gSW5zZXJ0ZWQgc3ltYm9sc1xuICBAcGFyYW0ge2Jvb2xlYW59IFtkZXRhaWxzLnNraXBdIC0gQ2FuIHNraXAgY2hhcnNcbiAgQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWxzLnJlbW92ZUNvdW50XSAtIFJlbW92ZWQgc3ltYm9scyBjb3VudFxuICBAcGFyYW0ge251bWJlcn0gW2RldGFpbHMudGFpbFNoaWZ0XSAtIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsXG4qL1xudmFyIENoYW5nZURldGFpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKiogSW5zZXJ0ZWQgc3ltYm9scyAqL1xuXG4gIC8qKiBDYW4gc2tpcCBjaGFycyAqL1xuXG4gIC8qKiBBZGRpdGlvbmFsIG9mZnNldCBpZiBhbnkgY2hhbmdlcyBvY2N1cnJlZCBiZWZvcmUgdGFpbCAqL1xuXG4gIC8qKiBSYXcgaW5zZXJ0ZWQgaXMgdXNlZCBieSBkeW5hbWljIG1hc2sgKi9cbiAgZnVuY3Rpb24gQ2hhbmdlRGV0YWlscyhkZXRhaWxzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoYW5nZURldGFpbHMpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICBpbnNlcnRlZDogJycsXG4gICAgICByYXdJbnNlcnRlZDogJycsXG4gICAgICBza2lwOiBmYWxzZSxcbiAgICAgIHRhaWxTaGlmdDogMFxuICAgIH0sIGRldGFpbHMpO1xuICB9XG4gIC8qKlxuICAgIEFnZ3JlZ2F0ZSBjaGFuZ2VzXG4gICAgQHJldHVybnMge0NoYW5nZURldGFpbHN9IGB0aGlzYFxuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKENoYW5nZURldGFpbHMsIFt7XG4gICAga2V5OiBcImFnZ3JlZ2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZ2dyZWdhdGUoZGV0YWlscykge1xuICAgICAgdGhpcy5yYXdJbnNlcnRlZCArPSBkZXRhaWxzLnJhd0luc2VydGVkO1xuICAgICAgdGhpcy5za2lwID0gdGhpcy5za2lwIHx8IGRldGFpbHMuc2tpcDtcbiAgICAgIHRoaXMuaW5zZXJ0ZWQgKz0gZGV0YWlscy5pbnNlcnRlZDtcbiAgICAgIHRoaXMudGFpbFNoaWZ0ICs9IGRldGFpbHMudGFpbFNoaWZ0O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBUb3RhbCBvZmZzZXQgY29uc2lkZXJpbmcgYWxsIGNoYW5nZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9mZnNldFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFpbFNoaWZ0ICsgdGhpcy5pbnNlcnRlZC5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENoYW5nZURldGFpbHM7XG59KCk7XG5cbmV4cG9ydCB7IENoYW5nZURldGFpbHMgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfY3JlYXRlQ2xhc3MsIGEgYXMgX2NsYXNzQ2FsbENoZWNrIH0gZnJvbSAnLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5cbi8qKiBQcm92aWRlcyBkZXRhaWxzIG9mIGNvbnRpbnVvdXMgZXh0cmFjdGVkIHRhaWwgKi9cbnZhciBDb250aW51b3VzVGFpbERldGFpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKiogVGFpbCB2YWx1ZSBhcyBzdHJpbmcgKi9cblxuICAvKiogVGFpbCBzdGFydCBwb3NpdGlvbiAqL1xuXG4gIC8qKiBTdGFydCBwb3NpdGlvbiAqL1xuICBmdW5jdGlvbiBDb250aW51b3VzVGFpbERldGFpbHMoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICB2YXIgc3RvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRpbnVvdXNUYWlsRGV0YWlscyk7XG5cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICB0aGlzLnN0b3AgPSBzdG9wO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbnRpbnVvdXNUYWlsRGV0YWlscywgW3tcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0ZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YWlsKSB7XG4gICAgICB0aGlzLnZhbHVlICs9IFN0cmluZyh0YWlsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwZW5kVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVG8obWFza2VkKSB7XG4gICAgICByZXR1cm4gbWFza2VkLmFwcGVuZCh0aGlzLnRvU3RyaW5nKCksIHtcbiAgICAgICAgdGFpbDogdHJ1ZVxuICAgICAgfSkuYWdncmVnYXRlKG1hc2tlZC5fYXBwZW5kUGxhY2Vob2xkZXIoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxuICAgICAgICBzdG9wOiB0aGlzLnN0b3BcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNoaWZ0QmVmb3JlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0QmVmb3JlKHBvcykge1xuICAgICAgaWYgKHRoaXMuZnJvbSA+PSBwb3MgfHwgIXRoaXMudmFsdWUubGVuZ3RoKSByZXR1cm4gJyc7XG4gICAgICB2YXIgc2hpZnRDaGFyID0gdGhpcy52YWx1ZVswXTtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIHNoaWZ0Q2hhcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udGludW91c1RhaWxEZXRhaWxzO1xufSgpO1xuXG5leHBvcnQgeyBDb250aW51b3VzVGFpbERldGFpbHMgYXMgZGVmYXVsdCB9O1xuIiwiLyoqXG4gKiBBcHBsaWVzIG1hc2sgb24gZWxlbWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR8TWFza0VsZW1lbnR9IGVsIC0gRWxlbWVudCB0byBhcHBseSBtYXNrXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEN1c3RvbSBtYXNrIG9wdGlvbnNcbiAqIEByZXR1cm4ge0lucHV0TWFza31cbiAqL1xuZnVuY3Rpb24gSU1hc2soZWwpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAvLyBjdXJyZW50bHkgYXZhaWxhYmxlIG9ubHkgZm9yIGlucHV0LWxpa2UgZWxlbWVudHNcbiAgcmV0dXJuIG5ldyBJTWFzay5JbnB1dE1hc2soZWwsIG9wdHMpO1xufVxuXG5leHBvcnQgeyBJTWFzayBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBjIGFzIF90eXBlb2YgfSBmcm9tICcuLi9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLWEwYjM0NzY0LmpzJztcblxuLyoqIENoZWNrcyBpZiB2YWx1ZSBpcyBzdHJpbmcgKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHN0cikge1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuLyoqXG4gIERpcmVjdGlvblxuICBAcHJvcCB7c3RyaW5nfSBOT05FXG4gIEBwcm9wIHtzdHJpbmd9IExFRlRcbiAgQHByb3Age3N0cmluZ30gRk9SQ0VfTEVGVFxuICBAcHJvcCB7c3RyaW5nfSBSSUdIVFxuICBAcHJvcCB7c3RyaW5nfSBGT1JDRV9SSUdIVFxuKi9cblxudmFyIERJUkVDVElPTiA9IHtcbiAgTk9ORTogJ05PTkUnLFxuICBMRUZUOiAnTEVGVCcsXG4gIEZPUkNFX0xFRlQ6ICdGT1JDRV9MRUZUJyxcbiAgUklHSFQ6ICdSSUdIVCcsXG4gIEZPUkNFX1JJR0hUOiAnRk9SQ0VfUklHSFQnXG59O1xuLyoqXG4gIERpcmVjdGlvblxuICBAZW51bSB7c3RyaW5nfVxuKi9cblxuLyoqIFJldHVybnMgbmV4dCBjaGFyIGluZGV4IGluIGRpcmVjdGlvbiAqL1xuZnVuY3Rpb24gaW5kZXhJbkRpcmVjdGlvbihwb3MsIGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCkgLS1wb3M7XG4gIHJldHVybiBwb3M7XG59XG4vKiogUmV0dXJucyBuZXh0IGNoYXIgcG9zaXRpb24gaW4gZGlyZWN0aW9uICovXG5cbmZ1bmN0aW9uIHBvc0luRGlyZWN0aW9uKHBvcywgZGlyZWN0aW9uKSB7XG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcbiAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuICAgICAgcmV0dXJuIC0tcG9zO1xuXG4gICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG4gICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG4gICAgICByZXR1cm4gKytwb3M7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBvcztcbiAgfVxufVxuLyoqICovXG5cbmZ1bmN0aW9uIGZvcmNlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XG4gICAgICByZXR1cm4gRElSRUNUSU9OLkZPUkNFX0xFRlQ7XG5cbiAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcbiAgICAgIHJldHVybiBESVJFQ1RJT04uRk9SQ0VfUklHSFQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgfVxufVxuLyoqIEVzY2FwZXMgcmVndWxhciBleHByZXNzaW9uIGNvbnRyb2wgY2hhcnMgKi9cblxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLiorP149IToke30oKXxbXFxdXFwvXFxcXF0pL2csICdcXFxcJDEnKTtcbn0gLy8gY2xvbmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Vwb2JlcmV6a2luL2Zhc3QtZGVlcC1lcXVhbCB3aXRoIHNtYWxsIGNoYW5nZXNcblxuZnVuY3Rpb24gb2JqZWN0SW5jbHVkZXMoYiwgYSkge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gIHZhciBhcnJBID0gQXJyYXkuaXNBcnJheShhKSxcbiAgICAgIGFyckIgPSBBcnJheS5pc0FycmF5KGIpLFxuICAgICAgaTtcblxuICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmplY3RJbmNsdWRlcyhhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhICYmIGIgJiYgX3R5cGVvZihhKSA9PT0gJ29iamVjdCcgJiYgX3R5cGVvZihiKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcbiAgICAgICAgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHAsXG4gICAgICAgIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuICAgIGlmIChyZWdleHBBICE9IHJlZ2V4cEIpIHJldHVybiBmYWxzZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyBpZiAoa2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqZWN0SW5jbHVkZXMoYltrZXlzW2ldXSwgYVtrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKiogU2VsZWN0aW9uIHJhbmdlICovXG5cbmV4cG9ydCB7IERJUkVDVElPTiwgZXNjYXBlUmVnRXhwLCBmb3JjZURpcmVjdGlvbiwgaW5kZXhJbkRpcmVjdGlvbiwgaXNTdHJpbmcsIG9iamVjdEluY2x1ZGVzLCBwb3NJbkRpcmVjdGlvbiB9O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnB1dE1hc2sgfSBmcm9tICcuL2NvbnRyb2xzL2lucHV0LmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuL2NvcmUvaG9sZGVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2NvcmUvaG9sZGVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkIH0gZnJvbSAnLi9tYXNrZWQvYmFzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tlZFBhdHRlcm4gfSBmcm9tICcuL21hc2tlZC9wYXR0ZXJuLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkRW51bSB9IGZyb20gJy4vbWFza2VkL2VudW0uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWRSYW5nZSB9IGZyb20gJy4vbWFza2VkL3JhbmdlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkTnVtYmVyIH0gZnJvbSAnLi9tYXNrZWQvbnVtYmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkRGF0ZSB9IGZyb20gJy4vbWFza2VkL2RhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWRSZWdFeHAgfSBmcm9tICcuL21hc2tlZC9yZWdleHAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWRGdW5jdGlvbiB9IGZyb20gJy4vbWFza2VkL2Z1bmN0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkRHluYW1pYyB9IGZyb20gJy4vbWFza2VkL2R5bmFtaWMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVNYXNrIH0gZnJvbSAnLi9tYXNrZWQvZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tFbGVtZW50IH0gZnJvbSAnLi9jb250cm9scy9tYXNrLWVsZW1lbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIVE1MTWFza0VsZW1lbnQgfSBmcm9tICcuL2NvbnRyb2xzL2h0bWwtbWFzay1lbGVtZW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IH0gZnJvbSAnLi9jb250cm9scy9odG1sLWNvbnRlbnRlZGl0YWJsZS1tYXNrLWVsZW1lbnQuanMnO1xuZXhwb3J0IHsgUElQRV9UWVBFLCBjcmVhdGVQaXBlLCBwaXBlIH0gZnJvbSAnLi9tYXNrZWQvcGlwZS5qcyc7XG5pbXBvcnQgJy4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgJy4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgJy4vY29yZS9hY3Rpb24tZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vbWFza2VkL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vbWFza2VkL3BhdHRlcm4vZml4ZWQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vbWFza2VkL3BhdHRlcm4vY2h1bmstdGFpbC1kZXRhaWxzLmpzJztcblxudHJ5IHtcbiAgZ2xvYmFsVGhpcy5JTWFzayA9IElNYXNrO1xufSBjYXRjaCAoZSkge31cbiIsImltcG9ydCB7IF8gYXMgX2NyZWF0ZUNsYXNzLCBhIGFzIF9jbGFzc0NhbGxDaGVjayB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgQ29udGludW91c1RhaWxEZXRhaWxzIGZyb20gJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5cbi8qKiBTdXBwb3J0ZWQgbWFzayB0eXBlICovXG5cbi8qKiBQcm92aWRlcyBjb21tb24gbWFza2luZyBzdHVmZiAqL1xudmFyIE1hc2tlZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vICRTaGFwZTxNYXNrZWRPcHRpb25zPjsgVE9ETyBhZnRlciBmaXggaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ3NzNcblxuICAvKiogQHR5cGUge01hc2t9ICovXG5cbiAgLyoqICovXG4gIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuICAvKiogVHJhbnNmb3JtcyB2YWx1ZSBiZWZvcmUgbWFzayBwcm9jZXNzaW5nICovXG5cbiAgLyoqIFZhbGlkYXRlcyBpZiB2YWx1ZSBpcyBhY2NlcHRhYmxlICovXG5cbiAgLyoqIERvZXMgYWRkaXRpb25hbCBwcm9jZXNzaW5nIGluIHRoZSBlbmQgb2YgZWRpdGluZyAqL1xuXG4gIC8qKiBGb3JtYXQgdHlwZWQgdmFsdWUgdG8gc3RyaW5nICovXG5cbiAgLyoqIFBhcnNlIHN0cmdpbiB0byBnZXQgdHlwZWQgdmFsdWUgKi9cblxuICAvKiogRW5hYmxlIGNoYXJhY3RlcnMgb3ZlcndyaXRpbmcgKi9cblxuICAvKiogKi9cbiAgZnVuY3Rpb24gTWFza2VkKG9wdHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gJyc7XG5cbiAgICB0aGlzLl91cGRhdGUoT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkLkRFRkFVTFRTLCBvcHRzKSk7XG5cbiAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG4gIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTWFza2VkLCBbe1xuICAgIGtleTogXCJ1cGRhdGVPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgICAgaWYgKCFPYmplY3Qua2V5cyhvcHRzKS5sZW5ndGgpIHJldHVybjtcbiAgICAgIHRoaXMud2l0aFZhbHVlUmVmcmVzaCh0aGlzLl91cGRhdGUuYmluZCh0aGlzLCBvcHRzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgU2V0cyBuZXcgb3B0aW9uc1xuICAgICAgQHByb3RlY3RlZFxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICB9XG4gICAgLyoqIE1hc2sgc3RhdGUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0YXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfdmFsdWU6IHRoaXMudmFsdWVcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSBzdGF0ZS5fdmFsdWU7XG4gICAgfVxuICAgIC8qKiBSZXNldHMgdmFsdWUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBSZXNvbHZlIG5ldyB2YWx1ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVzb2x2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge1xuICAgICAgICBpbnB1dDogdHJ1ZVxuICAgICAgfSwgJycpO1xuICAgICAgdGhpcy5kb0NvbW1pdCgpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgdGhpcy5hcHBlbmQodmFsdWUsIHt9LCAnJyk7XG4gICAgICB0aGlzLmRvQ29tbWl0KCk7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidHlwZWRWYWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9QYXJzZSh0aGlzLnZhbHVlKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5kb0Zvcm1hdCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBWYWx1ZSB0aGF0IGluY2x1ZGVzIHJhdyB1c2VyIGlucHV0ICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyYXdJbnB1dFZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5leHRyYWN0SW5wdXQoMCwgdGhpcy52YWx1ZS5sZW5ndGgsIHtcbiAgICAgICAgcmF3OiB0cnVlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge1xuICAgICAgICByYXc6IHRydWVcbiAgICAgIH0sICcnKTtcbiAgICAgIHRoaXMuZG9Db21taXQoKTtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqIEZpbmRzIG5lYXJlc3QgaW5wdXQgcG9zaXRpb24gaW4gZGlyZWN0aW9uICovXG5cbiAgfSwge1xuICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcywgZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gY3Vyc29yUG9zO1xuICAgIH1cbiAgICAvKiogRXh0cmFjdHMgdmFsdWUgaW4gcmFuZ2UgY29uc2lkZXJpbmcgZmxhZ3MgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XG4gICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZS5zbGljZShmcm9tUG9zLCB0b1Bvcyk7XG4gICAgfVxuICAgIC8qKiBFeHRyYWN0cyB0YWlsIGluIHJhbmdlICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcbiAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIHJldHVybiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKHRoaXMuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zKSwgZnJvbVBvcyk7XG4gICAgfVxuICAgIC8qKiBBcHBlbmRzIHRhaWwgKi9cbiAgICAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXG5cbiAgfSwge1xuICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRhaWwodGFpbCkge1xuICAgICAgaWYgKGlzU3RyaW5nKHRhaWwpKSB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpO1xuICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XG4gICAgfVxuICAgIC8qKiBBcHBlbmRzIGNoYXIgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRDaGFyUmF3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyUmF3KGNoKSB7XG4gICAgICBpZiAoIWNoKSByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICAgIHRoaXMuX3ZhbHVlICs9IGNoO1xuICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcbiAgICAgICAgaW5zZXJ0ZWQ6IGNoLFxuICAgICAgICByYXdJbnNlcnRlZDogY2hcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQXBwZW5kcyBjaGFyICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYXBwZW5kQ2hhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihjaCkge1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBjaGVja1RhaWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBjb25zaXN0ZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGVuZENoYXJSYXcodGhpcy5kb1ByZXBhcmUoY2gsIGZsYWdzKSwgZmxhZ3MpO1xuXG4gICAgICBpZiAoZGV0YWlscy5pbnNlcnRlZCkge1xuICAgICAgICB2YXIgY29uc2lzdGVudFRhaWw7XG4gICAgICAgIHZhciBhcHBlbmRlZCA9IHRoaXMuZG9WYWxpZGF0ZShmbGFncykgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChhcHBlbmRlZCAmJiBjaGVja1RhaWwgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIHZhbGlkYXRpb24gb2ssIGNoZWNrIHRhaWxcbiAgICAgICAgICB2YXIgYmVmb3JlVGFpbFN0YXRlID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICAgIGlmICh0aGlzLm92ZXJ3cml0ZSkge1xuICAgICAgICAgICAgY29uc2lzdGVudFRhaWwgPSBjaGVja1RhaWwuc3RhdGU7XG4gICAgICAgICAgICBjaGVja1RhaWwuc2hpZnRCZWZvcmUodGhpcy52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0YWlsRGV0YWlscyA9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpO1xuICAgICAgICAgIGFwcGVuZGVkID0gdGFpbERldGFpbHMucmF3SW5zZXJ0ZWQgPT09IGNoZWNrVGFpbC50b1N0cmluZygpOyAvLyBpZiBvaywgcm9sbGJhY2sgc3RhdGUgYWZ0ZXIgdGFpbFxuXG4gICAgICAgICAgaWYgKGFwcGVuZGVkICYmIHRhaWxEZXRhaWxzLmluc2VydGVkKSB0aGlzLnN0YXRlID0gYmVmb3JlVGFpbFN0YXRlO1xuICAgICAgICB9IC8vIHJldmVydCBhbGwgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmdcblxuXG4gICAgICAgIGlmICghYXBwZW5kZWQpIHtcbiAgICAgICAgICBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gY29uc2lzdGVudFN0YXRlO1xuICAgICAgICAgIGlmIChjaGVja1RhaWwgJiYgY29uc2lzdGVudFRhaWwpIGNoZWNrVGFpbC5zdGF0ZSA9IGNvbnNpc3RlbnRUYWlsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH1cbiAgICAvKiogQXBwZW5kcyBvcHRpb25hbCBwbGFjZWhvbGRlciBhdCBlbmQgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XG4gICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICB9XG4gICAgLyoqIEFwcGVuZHMgc3ltYm9scyBjb25zaWRlcmluZyBmbGFncyAqL1xuICAgIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuICB9LCB7XG4gICAga2V5OiBcImFwcGVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoc3RyLCBmbGFncywgdGFpbCkge1xuICAgICAgaWYgKCFpc1N0cmluZyhzdHIpKSB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICAgIHZhciBjaGVja1RhaWwgPSBpc1N0cmluZyh0YWlsKSA/IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKSA6IHRhaWw7XG4gICAgICBpZiAoZmxhZ3MgJiYgZmxhZ3MudGFpbCkgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBzdHIubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuX2FwcGVuZENoYXIoc3RyW2NpXSwgZmxhZ3MsIGNoZWNrVGFpbCkpO1xuICAgICAgfSAvLyBhcHBlbmQgdGFpbCBidXQgYWdncmVnYXRlIG9ubHkgdGFpbFNoaWZ0XG5cblxuICAgICAgaWYgKGNoZWNrVGFpbCAhPSBudWxsKSB7XG4gICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ICs9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpLnRhaWxTaGlmdDsgLy8gVE9ETyBpdCdzIGEgZ29vZCBpZGVhIHRvIGNsZWFyIHN0YXRlIGFmdGVyIGFwcGVuZGluZyBlbmRzXG4gICAgICAgIC8vIGJ1dCBpdCBjYXVzZXMgYnVncyB3aGVuIG9uZSBhcHBlbmQgY2FsbHMgYW5vdGhlciAod2hlbiBkeW5hbWljIGRpc3BhdGNoIHNldCByYXdJbnB1dFZhbHVlKVxuICAgICAgICAvLyB0aGlzLl9yZXNldEJlZm9yZVRhaWxTdGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGV0YWlscztcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpICsgdGhpcy52YWx1ZS5zbGljZSh0b1Bvcyk7XG4gICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICB9XG4gICAgLyoqIENhbGxzIGZ1bmN0aW9uIGFuZCByZWFwcGxpZXMgY3VycmVudCB2YWx1ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2l0aFZhbHVlUmVmcmVzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3aXRoVmFsdWVSZWZyZXNoKGZuKSB7XG4gICAgICBpZiAodGhpcy5fcmVmcmVzaGluZyB8fCAhdGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm4gZm4oKTtcbiAgICAgIHRoaXMuX3JlZnJlc2hpbmcgPSB0cnVlO1xuICAgICAgdmFyIHJhd0lucHV0ID0gdGhpcy5yYXdJbnB1dFZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHZhciByZXQgPSBmbigpO1xuICAgICAgdGhpcy5yYXdJbnB1dFZhbHVlID0gcmF3SW5wdXQ7IC8vIGFwcGVuZCBsb3N0IHRyYWlsaW5nIGNoYXJzIGF0IGVuZFxuXG4gICAgICBpZiAodGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlICE9PSB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKHRoaXMudmFsdWUpID09PSAwKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLnNsaWNlKHRoaXMudmFsdWUubGVuZ3RoKSwge30sICcnKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHRoaXMuX3JlZnJlc2hpbmc7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICAvKiogKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJ1bklzb2xhdGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJ1bklzb2xhdGVkKGZuKSB7XG4gICAgICBpZiAodGhpcy5faXNvbGF0ZWQgfHwgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZuKHRoaXMpO1xuICAgICAgdGhpcy5faXNvbGF0ZWQgPSB0cnVlO1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgIHZhciByZXQgPSBmbih0aGlzKTtcbiAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9pc29sYXRlZDtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAgUHJlcGFyZXMgc3RyaW5nIGJlZm9yZSBtYXNrIHByb2Nlc3NpbmdcbiAgICAgIEBwcm90ZWN0ZWRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZG9QcmVwYXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvUHJlcGFyZShzdHIpIHtcbiAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5wcmVwYXJlID8gdGhpcy5wcmVwYXJlKHN0ciwgdGhpcywgZmxhZ3MpIDogc3RyO1xuICAgIH1cbiAgICAvKipcbiAgICAgIFZhbGlkYXRlcyBpZiB2YWx1ZSBpcyBhY2NlcHRhYmxlXG4gICAgICBAcHJvdGVjdGVkXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvVmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZShmbGFncykge1xuICAgICAgcmV0dXJuICghdGhpcy52YWxpZGF0ZSB8fCB0aGlzLnZhbGlkYXRlKHRoaXMudmFsdWUsIHRoaXMsIGZsYWdzKSkgJiYgKCF0aGlzLnBhcmVudCB8fCB0aGlzLnBhcmVudC5kb1ZhbGlkYXRlKGZsYWdzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgRG9lcyBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgaW4gdGhlIGVuZCBvZiBlZGl0aW5nXG4gICAgICBAcHJvdGVjdGVkXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvQ29tbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuICAgICAgaWYgKHRoaXMuY29tbWl0KSB0aGlzLmNvbW1pdCh0aGlzLnZhbHVlLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkb0Zvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb0Zvcm1hdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0ID8gdGhpcy5mb3JtYXQodmFsdWUsIHRoaXMpIDogdmFsdWU7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZG9QYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb1BhcnNlKHN0cikge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2UgPyB0aGlzLnBhcnNlKHN0ciwgdGhpcykgOiBzdHI7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3BsaWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGluc2VydGVkLCByZW1vdmVEaXJlY3Rpb24pIHtcbiAgICAgIHZhciB0YWlsUG9zID0gc3RhcnQgKyBkZWxldGVDb3VudDtcbiAgICAgIHZhciB0YWlsID0gdGhpcy5leHRyYWN0VGFpbCh0YWlsUG9zKTtcbiAgICAgIHZhciBzdGFydENoYW5nZVBvcyA9IHRoaXMubmVhcmVzdElucHV0UG9zKHN0YXJ0LCByZW1vdmVEaXJlY3Rpb24pO1xuICAgICAgdmFyIGNoYW5nZURldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscyh7XG4gICAgICAgIHRhaWxTaGlmdDogc3RhcnRDaGFuZ2VQb3MgLSBzdGFydCAvLyBhZGp1c3QgdGFpbFNoaWZ0IGlmIHN0YXJ0IHdhcyBhbGlnbmVkXG5cbiAgICAgIH0pLmFnZ3JlZ2F0ZSh0aGlzLnJlbW92ZShzdGFydENoYW5nZVBvcykpLmFnZ3JlZ2F0ZSh0aGlzLmFwcGVuZChpbnNlcnRlZCwge1xuICAgICAgICBpbnB1dDogdHJ1ZVxuICAgICAgfSwgdGFpbCkpO1xuICAgICAgcmV0dXJuIGNoYW5nZURldGFpbHM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hc2tlZDtcbn0oKTtcbk1hc2tlZC5ERUZBVUxUUyA9IHtcbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodikge1xuICAgIHJldHVybiB2O1xuICB9LFxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uodikge1xuICAgIHJldHVybiB2O1xuICB9XG59O1xuSU1hc2suTWFza2VkID0gTWFza2VkO1xuXG5leHBvcnQgeyBNYXNrZWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZCBhcyBfaW5oZXJpdHMsIGUgYXMgX2NyZWF0ZVN1cGVyLCBhIGFzIF9jbGFzc0NhbGxDaGVjaywgXyBhcyBfY3JlYXRlQ2xhc3MsIGYgYXMgX3NsaWNlZFRvQXJyYXksIGcgYXMgX2dldCwgaCBhcyBfZ2V0UHJvdG90eXBlT2YsIGkgYXMgX3NldCB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IE1hc2tlZFBhdHRlcm4gZnJvbSAnLi9wYXR0ZXJuLmpzJztcbmltcG9ydCBNYXNrZWRSYW5nZSBmcm9tICcuL3JhbmdlLmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9iYXNlLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9pbnB1dC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9mYWN0b3J5LmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vY2h1bmstdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9yZWdleHAuanMnO1xuXG4vKiogRGF0ZSBtYXNrICovXG5cbnZhciBNYXNrZWREYXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza2VkUGF0dGVybikge1xuICBfaW5oZXJpdHMoTWFza2VkRGF0ZSwgX01hc2tlZFBhdHRlcm4pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWFza2VkRGF0ZSk7XG5cbiAgLyoqIFBhdHRlcm4gbWFzayBmb3IgZGF0ZSBhY2NvcmRpbmcgdG8ge0BsaW5rIE1hc2tlZERhdGUjZm9ybWF0fSAqL1xuXG4gIC8qKiBTdGFydCBkYXRlICovXG5cbiAgLyoqIEVuZCBkYXRlICovXG5cbiAgLyoqICovXG5cbiAgLyoqXG4gICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgKi9cbiAgZnVuY3Rpb24gTWFza2VkRGF0ZShvcHRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZERhdGUpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZERhdGUuREVGQVVMVFMsIG9wdHMpKTtcbiAgfVxuICAvKipcbiAgICBAb3ZlcnJpZGVcbiAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhNYXNrZWREYXRlLCBbe1xuICAgIGtleTogXCJfdXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuICAgICAgaWYgKG9wdHMubWFzayA9PT0gRGF0ZSkgZGVsZXRlIG9wdHMubWFzaztcbiAgICAgIGlmIChvcHRzLnBhdHRlcm4pIG9wdHMubWFzayA9IG9wdHMucGF0dGVybjtcbiAgICAgIHZhciBibG9ja3MgPSBvcHRzLmJsb2NrcztcbiAgICAgIG9wdHMuYmxvY2tzID0gT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkRGF0ZS5HRVRfREVGQVVMVF9CTE9DS1MoKSk7IC8vIGFkanVzdCB5ZWFyIGJsb2NrXG5cbiAgICAgIGlmIChvcHRzLm1pbikgb3B0cy5ibG9ja3MuWS5mcm9tID0gb3B0cy5taW4uZ2V0RnVsbFllYXIoKTtcbiAgICAgIGlmIChvcHRzLm1heCkgb3B0cy5ibG9ja3MuWS50byA9IG9wdHMubWF4LmdldEZ1bGxZZWFyKCk7XG5cbiAgICAgIGlmIChvcHRzLm1pbiAmJiBvcHRzLm1heCAmJiBvcHRzLmJsb2Nrcy5ZLmZyb20gPT09IG9wdHMuYmxvY2tzLlkudG8pIHtcbiAgICAgICAgb3B0cy5ibG9ja3MubS5mcm9tID0gb3B0cy5taW4uZ2V0TW9udGgoKSArIDE7XG4gICAgICAgIG9wdHMuYmxvY2tzLm0udG8gPSBvcHRzLm1heC5nZXRNb250aCgpICsgMTtcblxuICAgICAgICBpZiAob3B0cy5ibG9ja3MubS5mcm9tID09PSBvcHRzLmJsb2Nrcy5tLnRvKSB7XG4gICAgICAgICAgb3B0cy5ibG9ja3MuZC5mcm9tID0gb3B0cy5taW4uZ2V0RGF0ZSgpO1xuICAgICAgICAgIG9wdHMuYmxvY2tzLmQudG8gPSBvcHRzLm1heC5nZXREYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihvcHRzLmJsb2NrcywgYmxvY2tzKTsgLy8gYWRkIGF1dG9maXhcblxuICAgICAgT2JqZWN0LmtleXMob3B0cy5ibG9ja3MpLmZvckVhY2goZnVuY3Rpb24gKGJrKSB7XG4gICAgICAgIHZhciBiID0gb3B0cy5ibG9ja3NbYmtdO1xuICAgICAgICBpZiAoISgnYXV0b2ZpeCcgaW4gYikpIGIuYXV0b2ZpeCA9IG9wdHMuYXV0b2ZpeDtcbiAgICAgIH0pO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG4gICAgICB2YXIgX2dldDI7XG5cbiAgICAgIHZhciBkYXRlID0gdGhpcy5kYXRlO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZERhdGUucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSAmJiAoIXRoaXMuaXNDb21wbGV0ZSB8fCB0aGlzLmlzRGF0ZUV4aXN0KHRoaXMudmFsdWUpICYmIGRhdGUgIT0gbnVsbCAmJiAodGhpcy5taW4gPT0gbnVsbCB8fCB0aGlzLm1pbiA8PSBkYXRlKSAmJiAodGhpcy5tYXggPT0gbnVsbCB8fCBkYXRlIDw9IHRoaXMubWF4KSk7XG4gICAgfVxuICAgIC8qKiBDaGVja3MgaWYgZGF0ZSBpcyBleGlzdHMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzRGF0ZUV4aXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRGF0ZUV4aXN0KHN0cikge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMucGFyc2Uoc3RyLCB0aGlzKSwgdGhpcykuaW5kZXhPZihzdHIpID49IDA7XG4gICAgfVxuICAgIC8qKiBQYXJzZWQgRGF0ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZWRWYWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGRhdGUpIHtcbiAgICAgIHRoaXMudHlwZWRWYWx1ZSA9IGRhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInR5cGVkVmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwidHlwZWRWYWx1ZVwiLCB0aGlzKSA6IG51bGw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZS5wcm90b3R5cGUpLCBcInR5cGVkVmFsdWVcIiwgdmFsdWUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXNrZWREYXRlO1xufShNYXNrZWRQYXR0ZXJuKTtcbk1hc2tlZERhdGUuREVGQVVMVFMgPSB7XG4gIHBhdHRlcm46ICdkey59YG17Ln1gWScsXG4gIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcbiAgICB2YXIgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIHZhciBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBbZGF5LCBtb250aCwgeWVhcl0uam9pbignLicpO1xuICB9LFxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gICAgdmFyIF9zdHIkc3BsaXQgPSBzdHIuc3BsaXQoJy4nKSxcbiAgICAgICAgX3N0ciRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfc3RyJHNwbGl0LCAzKSxcbiAgICAgICAgZGF5ID0gX3N0ciRzcGxpdDJbMF0sXG4gICAgICAgIG1vbnRoID0gX3N0ciRzcGxpdDJbMV0sXG4gICAgICAgIHllYXIgPSBfc3RyJHNwbGl0MlsyXTtcblxuICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XG4gIH1cbn07XG5cbk1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGQ6IHtcbiAgICAgIG1hc2s6IE1hc2tlZFJhbmdlLFxuICAgICAgZnJvbTogMSxcbiAgICAgIHRvOiAzMSxcbiAgICAgIG1heExlbmd0aDogMlxuICAgIH0sXG4gICAgbToge1xuICAgICAgbWFzazogTWFza2VkUmFuZ2UsXG4gICAgICBmcm9tOiAxLFxuICAgICAgdG86IDEyLFxuICAgICAgbWF4TGVuZ3RoOiAyXG4gICAgfSxcbiAgICBZOiB7XG4gICAgICBtYXNrOiBNYXNrZWRSYW5nZSxcbiAgICAgIGZyb206IDE5MDAsXG4gICAgICB0bzogOTk5OVxuICAgIH1cbiAgfTtcbn07XG5cbklNYXNrLk1hc2tlZERhdGUgPSBNYXNrZWREYXRlO1xuXG5leHBvcnQgeyBNYXNrZWREYXRlIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGQgYXMgX2luaGVyaXRzLCBlIGFzIF9jcmVhdGVTdXBlciwgYSBhcyBfY2xhc3NDYWxsQ2hlY2ssIF8gYXMgX2NyZWF0ZUNsYXNzLCBnIGFzIF9nZXQsIGggYXMgX2dldFByb3RvdHlwZU9mLCBpIGFzIF9zZXQsIGIgYXMgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCBjcmVhdGVNYXNrIGZyb20gJy4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgTWFza2VkIGZyb20gJy4vYmFzZS5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0ICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJjb21waWxlZE1hc2tzXCIsIFwiY3VycmVudE1hc2tSZWZcIiwgXCJjdXJyZW50TWFza1wiXTtcblxuLyoqIER5bmFtaWMgbWFzayBmb3IgY2hvb3NpbmcgYXByb3ByaWF0ZSBtYXNrIGluIHJ1bi10aW1lICovXG52YXIgTWFza2VkRHluYW1pYyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuICBfaW5oZXJpdHMoTWFza2VkRHluYW1pYywgX01hc2tlZCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWREeW5hbWljKTtcblxuICAvKiogQ3VycmVudGx5IGNob3NlbiBtYXNrICovXG5cbiAgLyoqIENvbXBsaWxlZCB7QGxpbmsgTWFza2VkfSBvcHRpb25zICovXG5cbiAgLyoqIENob29zZXMge0BsaW5rIE1hc2tlZH0gZGVwZW5kaW5nIG9uIGlucHV0IHZhbHVlICovXG5cbiAgLyoqXG4gICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgKi9cbiAgZnVuY3Rpb24gTWFza2VkRHluYW1pYyhvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZER5bmFtaWMpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBPYmplY3QuYXNzaWduKHt9LCBNYXNrZWREeW5hbWljLkRFRkFVTFRTLCBvcHRzKSk7XG4gICAgX3RoaXMuY3VycmVudE1hc2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICBAb3ZlcnJpZGVcbiAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhNYXNrZWREeW5hbWljLCBbe1xuICAgIGtleTogXCJfdXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuICAgICAgaWYgKCdtYXNrJyBpbiBvcHRzKSB7XG4gICAgICAgIC8vIG1hc2sgY291bGQgYmUgdG90YWxseSBkeW5hbWljIHdpdGggb25seSBgZGlzcGF0Y2hgIG9wdGlvblxuICAgICAgICB0aGlzLmNvbXBpbGVkTWFza3MgPSBBcnJheS5pc0FycmF5KG9wdHMubWFzaykgPyBvcHRzLm1hc2subWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZU1hc2sobSk7XG4gICAgICAgIH0pIDogW107XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRDaGFyUmF3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyUmF3KGNoKSB7XG4gICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGx5RGlzcGF0Y2goY2gsIGZsYWdzKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5jdXJyZW50TWFzay5fYXBwZW5kQ2hhcihjaCwgZmxhZ3MpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBseURpc3BhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBseURpc3BhdGNoKCkge1xuICAgICAgdmFyIGFwcGVuZGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgcHJldlZhbHVlQmVmb3JlVGFpbCA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSAhPSBudWxsID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLnZhbHVlO1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSB0aGlzLnJhd0lucHV0VmFsdWU7XG4gICAgICB2YXIgaW5zZXJ0VmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgIT0gbnVsbCA/IC8vICRGbG93Rml4TWUgLSB0aXJlZCB0byBmaWdodCB3aXRoIHR5cGUgc3lzdGVtXG4gICAgICBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl9yYXdJbnB1dFZhbHVlIDogaW5wdXRWYWx1ZTtcbiAgICAgIHZhciB0YWlsVmFsdWUgPSBpbnB1dFZhbHVlLnNsaWNlKGluc2VydFZhbHVlLmxlbmd0aCk7XG4gICAgICB2YXIgcHJldk1hc2sgPSB0aGlzLmN1cnJlbnRNYXNrO1xuICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgICAgdmFyIHByZXZNYXNrU3RhdGUgPSBwcmV2TWFzayAmJiBwcmV2TWFzay5zdGF0ZTsgLy8gY2xvbmUgZmxhZ3MgdG8gcHJldmVudCBvdmVyd3JpdGluZyBgX2JlZm9yZVRhaWxTdGF0ZWBcblxuICAgICAgdGhpcy5jdXJyZW50TWFzayA9IHRoaXMuZG9EaXNwYXRjaChhcHBlbmRlZCwgT2JqZWN0LmFzc2lnbih7fSwgZmxhZ3MpKTsgLy8gcmVzdG9yZSBzdGF0ZSBhZnRlciBkaXNwYXRjaFxuXG4gICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzayAhPT0gcHJldk1hc2spIHtcbiAgICAgICAgICAvLyBpZiBtYXNrIGNoYW5nZWQgcmVhcHBseSBpbnB1dFxuICAgICAgICAgIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcblxuICAgICAgICAgIGlmIChpbnNlcnRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIGl0J3Mgb2ssIHdlIGRvbid0IGNoYW5nZSBjdXJyZW50IG1hc2sgYWJvdmVcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQoaW5zZXJ0VmFsdWUsIHtcbiAgICAgICAgICAgICAgcmF3OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ID0gZC5pbnNlcnRlZC5sZW5ndGggLSBwcmV2VmFsdWVCZWZvcmVUYWlsLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFpbFZhbHVlKSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gaXQncyBvaywgd2UgZG9uJ3QgY2hhbmdlIGN1cnJlbnQgbWFzayBhYm92ZVxuICAgICAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQodGFpbFZhbHVlLCB7XG4gICAgICAgICAgICAgIHJhdzogdHJ1ZSxcbiAgICAgICAgICAgICAgdGFpbDogdHJ1ZVxuICAgICAgICAgICAgfSkudGFpbFNoaWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBEaXNwYXRjaCBjYW4gZG8gc29tZXRoaW5nIGJhZCB3aXRoIHN0YXRlLCBzb1xuICAgICAgICAgIC8vIHJlc3RvcmUgcHJldiBtYXNrIHN0YXRlXG4gICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IHByZXZNYXNrU3RhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGx5RGlzcGF0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5jdXJyZW50TWFzay5fYXBwZW5kUGxhY2Vob2xkZXIoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkb0Rpc3BhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvRGlzcGF0Y2goYXBwZW5kZWQpIHtcbiAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChhcHBlbmRlZCwgdGhpcywgZmxhZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG4gICAgICB2YXIgX2dldDIsIF90aGlzJGN1cnJlbnRNYXNrO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSAmJiAoIXRoaXMuY3VycmVudE1hc2sgfHwgKF90aGlzJGN1cnJlbnRNYXNrID0gdGhpcy5jdXJyZW50TWFzaykuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRjdXJyZW50TWFzaywgYXJncykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB0aGlzLmN1cnJlbnRNYXNrLnJlc2V0KCk7XG4gICAgICB0aGlzLmNvbXBpbGVkTWFza3MuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudmFsdWUgOiAnJztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwidmFsdWVcIiwgdmFsdWUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudW5tYXNrZWRWYWx1ZSA6ICcnO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodW5tYXNrZWRWYWx1ZSkge1xuICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZSwgdGhpcywgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInR5cGVkVmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlIDogJyc7XG4gICAgfSAvLyBwcm9iYWJseSB0eXBlZFZhbHVlIHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIGR5bmFtaWNcbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gU3RyaW5nKHZhbHVlKTsgLy8gZG91YmxlIGNoZWNrIGl0XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hc2sudHlwZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB1bm1hc2tlZFZhbHVlID0gdGhpcy5jdXJyZW50TWFzay51bm1hc2tlZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVubWFza2VkVmFsdWUgPSB1bm1hc2tlZFZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRNYXNrICYmIHRoaXMuY3VycmVudE1hc2suaXNDb21wbGV0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrMjtcblxuICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSgoX3RoaXMkY3VycmVudE1hc2syID0gdGhpcy5jdXJyZW50TWFzaykucmVtb3ZlLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrMiwgYXJndW1lbnRzKSkgLy8gdXBkYXRlIHdpdGggZGlzcGF0Y2hcbiAgICAgICAgLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBseURpc3BhdGNoKCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGV0YWlscztcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwic3RhdGVcIiwgdGhpcyksIHtcbiAgICAgICAgX3Jhd0lucHV0VmFsdWU6IHRoaXMucmF3SW5wdXRWYWx1ZSxcbiAgICAgICAgY29tcGlsZWRNYXNrczogdGhpcy5jb21waWxlZE1hc2tzLm1hcChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLnN0YXRlO1xuICAgICAgICB9KSxcbiAgICAgICAgY3VycmVudE1hc2tSZWY6IHRoaXMuY3VycmVudE1hc2ssXG4gICAgICAgIGN1cnJlbnRNYXNrOiB0aGlzLmN1cnJlbnRNYXNrICYmIHRoaXMuY3VycmVudE1hc2suc3RhdGVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICAgIHZhciBjb21waWxlZE1hc2tzID0gc3RhdGUuY29tcGlsZWRNYXNrcyxcbiAgICAgICAgICBjdXJyZW50TWFza1JlZiA9IHN0YXRlLmN1cnJlbnRNYXNrUmVmLFxuICAgICAgICAgIGN1cnJlbnRNYXNrID0gc3RhdGUuY3VycmVudE1hc2ssXG4gICAgICAgICAgbWFza2VkU3RhdGUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIF9leGNsdWRlZCk7XG5cbiAgICAgIHRoaXMuY29tcGlsZWRNYXNrcy5mb3JFYWNoKGZ1bmN0aW9uIChtLCBtaSkge1xuICAgICAgICByZXR1cm4gbS5zdGF0ZSA9IGNvbXBpbGVkTWFza3NbbWldO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjdXJyZW50TWFza1JlZiAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hc2sgPSBjdXJyZW50TWFza1JlZjtcbiAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IGN1cnJlbnRNYXNrO1xuICAgICAgfVxuXG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwic3RhdGVcIiwgbWFza2VkU3RhdGUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrMztcblxuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyAoX3RoaXMkY3VycmVudE1hc2szID0gdGhpcy5jdXJyZW50TWFzaykuZXh0cmFjdElucHV0LmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrMywgYXJndW1lbnRzKSA6ICcnO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcbiAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazQsIF9nZXQzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazQgPSB0aGlzLmN1cnJlbnRNYXNrKS5leHRyYWN0VGFpbC5hcHBseShfdGhpcyRjdXJyZW50TWFzazQsIGFyZ3MpIDogKF9nZXQzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcImV4dHJhY3RUYWlsXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQzLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZG9Db21taXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZG9Db21taXQoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykgdGhpcy5jdXJyZW50TWFzay5kb0NvbW1pdCgpO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwiZG9Db21taXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcygpIHtcbiAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazUsIF9nZXQ0O1xuXG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazUgPSB0aGlzLmN1cnJlbnRNYXNrKS5uZWFyZXN0SW5wdXRQb3MuYXBwbHkoX3RoaXMkY3VycmVudE1hc2s1LCBhcmdzKSA6IChfZ2V0NCA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJuZWFyZXN0SW5wdXRQb3NcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDQsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvdmVyd3JpdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5vdmVyd3JpdGUgOiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwib3ZlcndyaXRlXCIsIHRoaXMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3ZlcndyaXRlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1wib3ZlcndyaXRlXCIgb3B0aW9uIGlzIG5vdCBhdmFpbGFibGUgaW4gZHluYW1pYyBtYXNrLCB1c2UgdGhpcyBvcHRpb24gaW4gc2libGluZ3MnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFza2VkRHluYW1pYztcbn0oTWFza2VkKTtcbk1hc2tlZER5bmFtaWMuREVGQVVMVFMgPSB7XG4gIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaChhcHBlbmRlZCwgbWFza2VkLCBmbGFncykge1xuICAgIGlmICghbWFza2VkLmNvbXBpbGVkTWFza3MubGVuZ3RoKSByZXR1cm47XG4gICAgdmFyIGlucHV0VmFsdWUgPSBtYXNrZWQucmF3SW5wdXRWYWx1ZTsgLy8gc2ltdWxhdGUgaW5wdXRcblxuICAgIHZhciBpbnB1dHMgPSBtYXNrZWQuY29tcGlsZWRNYXNrcy5tYXAoZnVuY3Rpb24gKG0sIGluZGV4KSB7XG4gICAgICBtLnJlc2V0KCk7XG4gICAgICBtLmFwcGVuZChpbnB1dFZhbHVlLCB7XG4gICAgICAgIHJhdzogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBtLmFwcGVuZChhcHBlbmRlZCwgZmxhZ3MpO1xuICAgICAgdmFyIHdlaWdodCA9IG0ucmF3SW5wdXRWYWx1ZS5sZW5ndGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3ZWlnaHQ6IHdlaWdodCxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9O1xuICAgIH0pOyAvLyBwb3AgbWFza3Mgd2l0aCBsb25nZXIgdmFsdWVzIGZpcnN0XG5cbiAgICBpbnB1dHMuc29ydChmdW5jdGlvbiAoaTEsIGkyKSB7XG4gICAgICByZXR1cm4gaTIud2VpZ2h0IC0gaTEud2VpZ2h0O1xuICAgIH0pO1xuICAgIHJldHVybiBtYXNrZWQuY29tcGlsZWRNYXNrc1tpbnB1dHNbMF0uaW5kZXhdO1xuICB9XG59O1xuSU1hc2suTWFza2VkRHluYW1pYyA9IE1hc2tlZER5bmFtaWM7XG5cbmV4cG9ydCB7IE1hc2tlZER5bmFtaWMgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZCBhcyBfaW5oZXJpdHMsIGUgYXMgX2NyZWF0ZVN1cGVyLCBhIGFzIF9jbGFzc0NhbGxDaGVjaywgXyBhcyBfY3JlYXRlQ2xhc3MsIGcgYXMgX2dldCwgaCBhcyBfZ2V0UHJvdG90eXBlT2YgfSBmcm9tICcuLi9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLWEwYjM0NzY0LmpzJztcbmltcG9ydCBNYXNrZWRQYXR0ZXJuIGZyb20gJy4vcGF0dGVybi5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0ICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vYmFzZS5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vcmVnZXhwLmpzJztcblxuLyoqIFBhdHRlcm4gd2hpY2ggdmFsaWRhdGVzIGVudW0gdmFsdWVzICovXG5cbnZhciBNYXNrZWRFbnVtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza2VkUGF0dGVybikge1xuICBfaW5oZXJpdHMoTWFza2VkRW51bSwgX01hc2tlZFBhdHRlcm4pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWFza2VkRW51bSk7XG5cbiAgZnVuY3Rpb24gTWFza2VkRW51bSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkRW51bSk7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWFza2VkRW51bSwgW3tcbiAgICBrZXk6IFwiX3VwZGF0ZVwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICovXG4gICAgZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG4gICAgICAvLyBUT0RPIHR5cGVcbiAgICAgIGlmIChvcHRzLmVudW0pIG9wdHMubWFzayA9ICcqJy5yZXBlYXQob3B0cy5lbnVtWzBdLmxlbmd0aCk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZEVudW0ucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvVmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgX2dldDI7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5lbnVtLnNvbWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUuaW5kZXhPZihfdGhpcy51bm1hc2tlZFZhbHVlKSA+PSAwO1xuICAgICAgfSkgJiYgKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRW51bS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXNrZWRFbnVtO1xufShNYXNrZWRQYXR0ZXJuKTtcbklNYXNrLk1hc2tlZEVudW0gPSBNYXNrZWRFbnVtO1xuXG5leHBvcnQgeyBNYXNrZWRFbnVtIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0ICcuLi9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLWEwYjM0NzY0LmpzJztcblxuLyoqIEdldCBNYXNrZWQgY2xhc3MgYnkgbWFzayB0eXBlICovXG5cbmZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2spIHtcbiAgaWYgKG1hc2sgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFzayBwcm9wZXJ0eSBzaG91bGQgYmUgZGVmaW5lZCcpO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgUmVnRXhwKSByZXR1cm4gSU1hc2suTWFza2VkUmVnRXhwOyAvLyAkRmxvd0ZpeE1lXG5cbiAgaWYgKGlzU3RyaW5nKG1hc2spKSByZXR1cm4gSU1hc2suTWFza2VkUGF0dGVybjsgLy8gJEZsb3dGaXhNZVxuXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgRGF0ZSB8fCBtYXNrID09PSBEYXRlKSByZXR1cm4gSU1hc2suTWFza2VkRGF0ZTsgLy8gJEZsb3dGaXhNZVxuXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgTnVtYmVyIHx8IHR5cGVvZiBtYXNrID09PSAnbnVtYmVyJyB8fCBtYXNrID09PSBOdW1iZXIpIHJldHVybiBJTWFzay5NYXNrZWROdW1iZXI7IC8vICRGbG93Rml4TWVcblxuICBpZiAoQXJyYXkuaXNBcnJheShtYXNrKSB8fCBtYXNrID09PSBBcnJheSkgcmV0dXJuIElNYXNrLk1hc2tlZER5bmFtaWM7IC8vICRGbG93Rml4TWVcblxuICBpZiAoSU1hc2suTWFza2VkICYmIG1hc2sucHJvdG90eXBlIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzazsgLy8gJEZsb3dGaXhNZVxuXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHJldHVybiBJTWFzay5NYXNrZWRGdW5jdGlvbjsgLy8gJEZsb3dGaXhNZVxuXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzay5jb25zdHJ1Y3RvcjtcbiAgY29uc29sZS53YXJuKCdNYXNrIG5vdCBmb3VuZCBmb3IgbWFzaycsIG1hc2spOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiBJTWFzay5NYXNrZWQ7XG59XG4vKiogQ3JlYXRlcyBuZXcge0BsaW5rIE1hc2tlZH0gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNYXNrKG9wdHMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICBpZiAoSU1hc2suTWFza2VkICYmIG9wdHMgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpIHJldHVybiBvcHRzO1xuICBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG4gIHZhciBtYXNrID0gb3B0cy5tYXNrOyAvLyAkRmxvd0ZpeE1lXG5cbiAgaWYgKElNYXNrLk1hc2tlZCAmJiBtYXNrIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzaztcbiAgdmFyIE1hc2tlZENsYXNzID0gbWFza2VkQ2xhc3MobWFzayk7XG4gIGlmICghTWFza2VkQ2xhc3MpIHRocm93IG5ldyBFcnJvcignTWFza2VkIGNsYXNzIGlzIG5vdCBmb3VuZCBmb3IgcHJvdmlkZWQgbWFzaywgYXBwcm9wcmlhdGUgbW9kdWxlIG5lZWRzIHRvIGJlIGltcG9ydCBtYW51YWxseSBiZWZvcmUgY3JlYXRpbmcgbWFzay4nKTtcbiAgcmV0dXJuIG5ldyBNYXNrZWRDbGFzcyhvcHRzKTtcbn1cbklNYXNrLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xuXG5leHBvcnQgeyBjcmVhdGVNYXNrIGFzIGRlZmF1bHQsIG1hc2tlZENsYXNzIH07XG4iLCJpbXBvcnQgeyBkIGFzIF9pbmhlcml0cywgZSBhcyBfY3JlYXRlU3VwZXIsIGEgYXMgX2NsYXNzQ2FsbENoZWNrLCBfIGFzIF9jcmVhdGVDbGFzcywgZyBhcyBfZ2V0LCBoIGFzIF9nZXRQcm90b3R5cGVPZiB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IE1hc2tlZCBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuLi9jb3JlL3V0aWxzLmpzJztcblxuLyoqIE1hc2tpbmcgYnkgY3VzdG9tIEZ1bmN0aW9uICovXG5cbnZhciBNYXNrZWRGdW5jdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuICBfaW5oZXJpdHMoTWFza2VkRnVuY3Rpb24sIF9NYXNrZWQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWFza2VkRnVuY3Rpb24pO1xuXG4gIGZ1bmN0aW9uIE1hc2tlZEZ1bmN0aW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRGdW5jdGlvbik7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWFza2VkRnVuY3Rpb24sIFt7XG4gICAga2V5OiBcIl91cGRhdGVcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAqL1xuICAgIGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuICAgICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9IG9wdHMubWFzaztcblxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRnVuY3Rpb24ucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hc2tlZEZ1bmN0aW9uO1xufShNYXNrZWQpO1xuSU1hc2suTWFza2VkRnVuY3Rpb24gPSBNYXNrZWRGdW5jdGlvbjtcblxuZXhwb3J0IHsgTWFza2VkRnVuY3Rpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZCBhcyBfaW5oZXJpdHMsIGUgYXMgX2NyZWF0ZVN1cGVyLCBhIGFzIF9jbGFzc0NhbGxDaGVjaywgXyBhcyBfY3JlYXRlQ2xhc3MsIGcgYXMgX2dldCwgaCBhcyBfZ2V0UHJvdG90eXBlT2YsIGYgYXMgX3NsaWNlZFRvQXJyYXksIGkgYXMgX3NldCB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IHsgZXNjYXBlUmVnRXhwLCBESVJFQ1RJT04gfSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0IE1hc2tlZCBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5cbi8qKlxuICBOdW1iZXIgbWFza1xuICBAcGFyYW0ge09iamVjdH0gb3B0c1xuICBAcGFyYW0ge3N0cmluZ30gb3B0cy5yYWRpeCAtIFNpbmdsZSBjaGFyXG4gIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnRob3VzYW5kc1NlcGFyYXRvciAtIFNpbmdsZSBjaGFyXG4gIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3B0cy5tYXBUb1JhZGl4IC0gQXJyYXkgb2Ygc2luZ2xlIGNoYXJzXG4gIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1pblxuICBAcGFyYW0ge251bWJlcn0gb3B0cy5tYXhcbiAgQHBhcmFtIHtudW1iZXJ9IG9wdHMuc2NhbGUgLSBEaWdpdHMgYWZ0ZXIgcG9pbnRcbiAgQHBhcmFtIHtib29sZWFufSBvcHRzLnNpZ25lZCAtIEFsbG93IG5lZ2F0aXZlXG4gIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5ub3JtYWxpemVaZXJvcyAtIEZsYWcgdG8gcmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHplcm9zIGluIHRoZSBlbmQgb2YgZWRpdGluZ1xuICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMucGFkRnJhY3Rpb25hbFplcm9zIC0gRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nXG4qL1xudmFyIE1hc2tlZE51bWJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuICBfaW5oZXJpdHMoTWFza2VkTnVtYmVyLCBfTWFza2VkKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1hc2tlZE51bWJlcik7XG5cbiAgLyoqIFNpbmdsZSBjaGFyICovXG5cbiAgLyoqIFNpbmdsZSBjaGFyICovXG5cbiAgLyoqIEFycmF5IG9mIHNpbmdsZSBjaGFycyAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiBEaWdpdHMgYWZ0ZXIgcG9pbnQgKi9cblxuICAvKiogKi9cblxuICAvKiogRmxhZyB0byByZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgemVyb3MgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXG5cbiAgLyoqIEZsYWcgdG8gcGFkIHRyYWlsaW5nIHplcm9zIGFmdGVyIHBvaW50IGluIHRoZSBlbmQgb2YgZWRpdGluZyAqL1xuICBmdW5jdGlvbiBNYXNrZWROdW1iZXIob3B0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWROdW1iZXIpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZE51bWJlci5ERUZBVUxUUywgb3B0cykpO1xuICB9XG4gIC8qKlxuICAgIEBvdmVycmlkZVxuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE1hc2tlZE51bWJlciwgW3tcbiAgICBrZXk6IFwiX3VwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuICAgICAgdGhpcy5fdXBkYXRlUmVnRXhwcygpO1xuICAgIH1cbiAgICAvKiogKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl91cGRhdGVSZWdFeHBzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVSZWdFeHBzKCkge1xuICAgICAgLy8gdXNlIGRpZmZlcmVudCByZWdleHAgdG8gcHJvY2VzcyB1c2VyIGlucHV0IChtb3JlIHN0cmljdCwgaW5wdXQgc3VmZml4KSBhbmQgdGFpbCBzaGlmdGluZ1xuICAgICAgdmFyIHN0YXJ0ID0gJ14nICsgKHRoaXMuYWxsb3dOZWdhdGl2ZSA/ICdbK3xcXFxcLV0/JyA6ICcnKTtcbiAgICAgIHZhciBtaWRJbnB1dCA9ICcoMHwoWzEtOV0rXFxcXGQqKSk/JztcbiAgICAgIHZhciBtaWQgPSAnXFxcXGQqJztcbiAgICAgIHZhciBlbmQgPSAodGhpcy5zY2FsZSA/ICcoJyArIGVzY2FwZVJlZ0V4cCh0aGlzLnJhZGl4KSArICdcXFxcZHswLCcgKyB0aGlzLnNjYWxlICsgJ30pPycgOiAnJykgKyAnJCc7XG4gICAgICB0aGlzLl9udW1iZXJSZWdFeHBJbnB1dCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWRJbnB1dCArIGVuZCk7XG4gICAgICB0aGlzLl9udW1iZXJSZWdFeHAgPSBuZXcgUmVnRXhwKHN0YXJ0ICsgbWlkICsgZW5kKTtcbiAgICAgIHRoaXMuX21hcFRvUmFkaXhSZWdFeHAgPSBuZXcgUmVnRXhwKCdbJyArIHRoaXMubWFwVG9SYWRpeC5tYXAoZXNjYXBlUmVnRXhwKS5qb2luKCcnKSArICddJywgJ2cnKTtcbiAgICAgIHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSwgJ2cnKTtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9yc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5fdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwLCAnJyk7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5MDExMDIvaG93LXRvLXByaW50LWEtbnVtYmVyLXdpdGgtY29tbWFzLWFzLXRob3VzYW5kcy1zZXBhcmF0b3JzLWluLWphdmFzY3JpcHRcbiAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNwbGl0KHRoaXMucmFkaXgpO1xuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCB0aGlzLnRob3VzYW5kc1NlcGFyYXRvcik7XG4gICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZG9QcmVwYXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvUHJlcGFyZShzdHIpIHtcbiAgICAgIHZhciBfZ2V0MjtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcImRvUHJlcGFyZVwiLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MiwgW3RoaXMsIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoc3RyLnJlcGxhY2UodGhpcy5fbWFwVG9SYWRpeFJlZ0V4cCwgdGhpcy5yYWRpeCkpXS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgICAvKiogKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZXBhcmF0b3JzQ291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlcGFyYXRvcnNDb3VudCh0bykge1xuICAgICAgdmFyIGV4dGVuZE9uU2VwYXJhdG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCB0bzsgKytwb3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlLmluZGV4T2YodGhpcy50aG91c2FuZHNTZXBhcmF0b3IsIHBvcykgPT09IHBvcykge1xuICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgaWYgKGV4dGVuZE9uU2VwYXJhdG9ycykgdG8gKz0gdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UoKSB7XG4gICAgICB2YXIgc2xpY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuX3ZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuX3NlcGFyYXRvcnNDb3VudCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHNsaWNlKS5sZW5ndGgsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQgPSB0aGlzLl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb21Qb3MsIHRvUG9zKTtcblxuICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdDIgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRfYWRqdXN0UmFuZ2VXaXQsIDIpO1xuXG4gICAgICBmcm9tUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0MlswXTtcbiAgICAgIHRvUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0MlsxXTtcbiAgICAgIHJldHVybiB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcImV4dHJhY3RJbnB1dFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZyb21Qb3MsIHRvUG9zLCBmbGFncykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYXBwZW5kQ2hhclJhd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIGlmICghdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJfYXBwZW5kQ2hhclJhd1wiLCB0aGlzKS5jYWxsKHRoaXMsIGNoLCBmbGFncyk7XG4gICAgICB2YXIgcHJldkJlZm9yZVRhaWxWYWx1ZSA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA/IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3ZhbHVlIDogdGhpcy5fdmFsdWU7XG5cbiAgICAgIHZhciBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZShwcmV2QmVmb3JlVGFpbFZhbHVlKTtcblxuICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpO1xuXG4gICAgICB2YXIgYXBwZW5kRGV0YWlscyA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl9hcHBlbmRDaGFyUmF3XCIsIHRoaXMpLmNhbGwodGhpcywgY2gsIGZsYWdzKTtcblxuICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMuX3ZhbHVlKTtcbiAgICAgIHZhciBiZWZvcmVUYWlsVmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgPyBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl92YWx1ZSA6IHRoaXMuX3ZhbHVlO1xuXG4gICAgICB2YXIgYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZShiZWZvcmVUYWlsVmFsdWUpO1xuXG4gICAgICBhcHBlbmREZXRhaWxzLnRhaWxTaGlmdCArPSAoYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCAtIHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50KSAqIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgIGFwcGVuZERldGFpbHMuc2tpcCA9ICFhcHBlbmREZXRhaWxzLnJhd0luc2VydGVkICYmIGNoID09PSB0aGlzLnRob3VzYW5kc1NlcGFyYXRvcjtcbiAgICAgIHJldHVybiBhcHBlbmREZXRhaWxzO1xuICAgIH1cbiAgICAvKiogKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9maW5kU2VwYXJhdG9yQXJvdW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU2VwYXJhdG9yQXJvdW5kKHBvcykge1xuICAgICAgaWYgKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSB7XG4gICAgICAgIHZhciBzZWFyY2hGcm9tID0gcG9zIC0gdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoICsgMTtcbiAgICAgICAgdmFyIHNlcGFyYXRvclBvcyA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgc2VhcmNoRnJvbSk7XG4gICAgICAgIGlmIChzZXBhcmF0b3JQb3MgPD0gcG9zKSByZXR1cm4gc2VwYXJhdG9yUG9zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb20sIHRvKSB7XG4gICAgICB2YXIgc2VwYXJhdG9yQXJvdW5kRnJvbVBvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQoZnJvbSk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRGcm9tUG9zID49IDApIGZyb20gPSBzZXBhcmF0b3JBcm91bmRGcm9tUG9zO1xuXG4gICAgICB2YXIgc2VwYXJhdG9yQXJvdW5kVG9Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKHRvKTtcblxuICAgICAgaWYgKHNlcGFyYXRvckFyb3VuZFRvUG9zID49IDApIHRvID0gc2VwYXJhdG9yQXJvdW5kVG9Qb3MgKyB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG4gICAgICByZXR1cm4gW2Zyb20sIHRvXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblxuICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdDMgPSB0aGlzLl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb21Qb3MsIHRvUG9zKTtcblxuICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdDQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRfYWRqdXN0UmFuZ2VXaXQzLCAyKTtcblxuICAgICAgZnJvbVBvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDRbMF07XG4gICAgICB0b1BvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDRbMV07XG4gICAgICB2YXIgdmFsdWVCZWZvcmVQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpO1xuICAgICAgdmFyIHZhbHVlQWZ0ZXJQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKHRvUG9zKTtcblxuICAgICAgdmFyIHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50KHZhbHVlQmVmb3JlUG9zLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlQmVmb3JlUG9zICsgdmFsdWVBZnRlclBvcykpO1xuXG4gICAgICB2YXIgYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSh2YWx1ZUJlZm9yZVBvcyk7XG5cbiAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XG4gICAgICAgIHRhaWxTaGlmdDogKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGhcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcywgZGlyZWN0aW9uKSB7XG4gICAgICBpZiAoIXRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSByZXR1cm4gY3Vyc29yUG9zO1xuXG4gICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlIERJUkVDVElPTi5OT05FOlxuICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdExlZnRQb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGN1cnNvclBvcyAtIDEpO1xuXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRMZWZ0UG9zID49IDApIHtcbiAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvckF0TGVmdEVuZFBvcyA9IHNlcGFyYXRvckF0TGVmdFBvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcblxuICAgICAgICAgICAgICBpZiAoY3Vyc29yUG9zIDwgc2VwYXJhdG9yQXRMZWZ0RW5kUG9zIHx8IHRoaXMudmFsdWUubGVuZ3RoIDw9IHNlcGFyYXRvckF0TGVmdEVuZFBvcyB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcGFyYXRvckF0TGVmdFBvcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG4gICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdFJpZ2h0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MpO1xuXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRSaWdodFBvcyA+PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXBhcmF0b3JBdFJpZ2h0UG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnNvclBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKGZsYWdzKSB7XG4gICAgICB2YXIgcmVnZXhwID0gZmxhZ3MuaW5wdXQgPyB0aGlzLl9udW1iZXJSZWdFeHBJbnB1dCA6IHRoaXMuX251bWJlclJlZ0V4cDsgLy8gdmFsaWRhdGUgYXMgc3RyaW5nXG5cbiAgICAgIHZhciB2YWxpZCA9IHJlZ2V4cC50ZXN0KHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy52YWx1ZSkpO1xuXG4gICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgLy8gdmFsaWRhdGUgYXMgbnVtYmVyXG4gICAgICAgIHZhciBudW1iZXIgPSB0aGlzLm51bWJlcjtcbiAgICAgICAgdmFsaWQgPSB2YWxpZCAmJiAhaXNOYU4obnVtYmVyKSAmJiAodGhpcy5taW4gPT0gbnVsbCB8fCB0aGlzLm1pbiA+PSAwIHx8IHRoaXMubWluIDw9IHRoaXMubnVtYmVyKSAmJiAodGhpcy5tYXggPT0gbnVsbCB8fCB0aGlzLm1heCA8PSAwIHx8IHRoaXMubnVtYmVyIDw9IHRoaXMubWF4KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbGlkICYmIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBmbGFncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvQ29tbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHRoaXMubnVtYmVyO1xuICAgICAgICB2YXIgdmFsaWRudW0gPSBudW1iZXI7IC8vIGNoZWNrIGJvdW5kc1xuXG4gICAgICAgIGlmICh0aGlzLm1pbiAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWF4KHZhbGlkbnVtLCB0aGlzLm1pbik7XG4gICAgICAgIGlmICh0aGlzLm1heCAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWluKHZhbGlkbnVtLCB0aGlzLm1heCk7XG4gICAgICAgIGlmICh2YWxpZG51bSAhPT0gbnVtYmVyKSB0aGlzLnVubWFza2VkVmFsdWUgPSBTdHJpbmcodmFsaWRudW0pO1xuICAgICAgICB2YXIgZm9ybWF0dGVkID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMubm9ybWFsaXplWmVyb3MpIGZvcm1hdHRlZCA9IHRoaXMuX25vcm1hbGl6ZVplcm9zKGZvcm1hdHRlZCk7XG4gICAgICAgIGlmICh0aGlzLnBhZEZyYWN0aW9uYWxaZXJvcykgZm9ybWF0dGVkID0gdGhpcy5fcGFkRnJhY3Rpb25hbFplcm9zKGZvcm1hdHRlZCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gZm9ybWF0dGVkO1xuICAgICAgfVxuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb0NvbW1pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICAvKiogKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9ub3JtYWxpemVaZXJvc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbm9ybWFsaXplWmVyb3ModmFsdWUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpLnNwbGl0KHRoaXMucmFkaXgpOyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvc1xuXG5cbiAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXihcXEQqKSgwKikoXFxkKikvLCBmdW5jdGlvbiAobWF0Y2gsIHNpZ24sIHplcm9zLCBudW0pIHtcbiAgICAgICAgcmV0dXJuIHNpZ24gKyBudW07XG4gICAgICB9KTsgLy8gYWRkIGxlYWRpbmcgemVyb1xuXG4gICAgICBpZiAodmFsdWUubGVuZ3RoICYmICEvXFxkJC8udGVzdChwYXJ0c1swXSkpIHBhcnRzWzBdID0gcGFydHNbMF0gKyAnMCc7XG5cbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucmVwbGFjZSgvMCokLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgemVyb3NcblxuICAgICAgICBpZiAoIXBhcnRzWzFdLmxlbmd0aCkgcGFydHMubGVuZ3RoID0gMTsgLy8gcmVtb3ZlIGZyYWN0aW9uYWxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnMocGFydHMuam9pbih0aGlzLnJhZGl4KSk7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3BhZEZyYWN0aW9uYWxaZXJvc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcGFkRnJhY3Rpb25hbFplcm9zKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKSBwYXJ0cy5wdXNoKCcnKTtcbiAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucGFkRW5kKHRoaXMuc2NhbGUsICcwJyk7XG4gICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fbm9ybWFsaXplWmVyb3ModGhpcy52YWx1ZSkpLnJlcGxhY2UodGhpcy5yYWRpeCwgJy4nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcbiAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZS5yZXBsYWNlKCcuJywgdGhpcy5yYWRpeCksIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHRoaXMudW5tYXNrZWRWYWx1ZSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuKSB7XG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJ1bm1hc2tlZFZhbHVlXCIsIFN0cmluZyhuKSwgdGhpcywgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKiBQYXJzZWQgTnVtYmVyICovXG5cbiAgfSwge1xuICAgIGtleTogXCJudW1iZXJcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGVkVmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChudW1iZXIpIHtcbiAgICAgIHRoaXMudHlwZWRWYWx1ZSA9IG51bWJlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICBJcyBuZWdhdGl2ZSBhbGxvd2VkXG4gICAgICBAcmVhZG9ubHlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxsb3dOZWdhdGl2ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2lnbmVkIHx8IHRoaXMubWluICE9IG51bGwgJiYgdGhpcy5taW4gPCAwIHx8IHRoaXMubWF4ICE9IG51bGwgJiYgdGhpcy5tYXggPCAwO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXNrZWROdW1iZXI7XG59KE1hc2tlZCk7XG5NYXNrZWROdW1iZXIuREVGQVVMVFMgPSB7XG4gIHJhZGl4OiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJycsXG4gIG1hcFRvUmFkaXg6IFsnLiddLFxuICBzY2FsZTogMixcbiAgc2lnbmVkOiBmYWxzZSxcbiAgbm9ybWFsaXplWmVyb3M6IHRydWUsXG4gIHBhZEZyYWN0aW9uYWxaZXJvczogZmFsc2Vcbn07XG5JTWFzay5NYXNrZWROdW1iZXIgPSBNYXNrZWROdW1iZXI7XG5cbmV4cG9ydCB7IE1hc2tlZE51bWJlciBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBkIGFzIF9pbmhlcml0cywgZSBhcyBfY3JlYXRlU3VwZXIsIGEgYXMgX2NsYXNzQ2FsbENoZWNrLCBfIGFzIF9jcmVhdGVDbGFzcywgZyBhcyBfZ2V0LCBoIGFzIF9nZXRQcm90b3R5cGVPZiwgYiBhcyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMsIGkgYXMgX3NldCB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IHsgRElSRUNUSU9OLCBmb3JjZURpcmVjdGlvbiB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgTWFza2VkIGZyb20gJy4vYmFzZS5qcyc7XG5pbXBvcnQgUGF0dGVybklucHV0RGVmaW5pdGlvbiwgeyBERUZBVUxUX0lOUFVUX0RFRklOSVRJT05TIH0gZnJvbSAnLi9wYXR0ZXJuL2lucHV0LWRlZmluaXRpb24uanMnO1xuaW1wb3J0IFBhdHRlcm5GaXhlZERlZmluaXRpb24gZnJvbSAnLi9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMnO1xuaW1wb3J0IENodW5rc1RhaWxEZXRhaWxzIGZyb20gJy4vcGF0dGVybi9jaHVuay10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0IGNyZWF0ZU1hc2sgZnJvbSAnLi9mYWN0b3J5LmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5pbXBvcnQgJy4vcmVnZXhwLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJfYmxvY2tzXCJdO1xuXG4vKipcbiAgUGF0dGVybiBtYXNrXG4gIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmJsb2Nrc1xuICBAcGFyYW0ge09iamVjdH0gb3B0cy5kZWZpbml0aW9uc1xuICBAcGFyYW0ge3N0cmluZ30gb3B0cy5wbGFjZWhvbGRlckNoYXJcbiAgQHBhcmFtIHtib29sZWFufSBvcHRzLmxhenlcbiovXG52YXIgTWFza2VkUGF0dGVybiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuICBfaW5oZXJpdHMoTWFza2VkUGF0dGVybiwgX01hc2tlZCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRQYXR0ZXJuKTtcblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogU2luZ2xlIGNoYXIgZm9yIGVtcHR5IGlucHV0ICovXG5cbiAgLyoqIFNob3cgcGxhY2Vob2xkZXIgb25seSB3aGVuIG5lZWRlZCAqL1xuICBmdW5jdGlvbiBNYXNrZWRQYXR0ZXJuKCkge1xuICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRQYXR0ZXJuKTtcblxuICAgIC8vIFRPRE8gdHlwZSAkU2hhcGU8TWFza2VkUGF0dGVybk9wdGlvbnM+PXt9IGRvZXMgbm90IHdvcmtcbiAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9JTlBVVF9ERUZJTklUSU9OUywgb3B0cy5kZWZpbml0aW9ucyk7XG4gICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZFBhdHRlcm4uREVGQVVMVFMsIG9wdHMpKTtcbiAgfVxuICAvKipcbiAgICBAb3ZlcnJpZGVcbiAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE1hc2tlZFBhdHRlcm4sIFt7XG4gICAga2V5OiBcIl91cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcbiAgICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIG9wdHMuZGVmaW5pdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmluaXRpb25zLCBvcHRzLmRlZmluaXRpb25zKTtcblxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuICAgICAgdGhpcy5fcmVidWlsZE1hc2soKTtcbiAgICB9XG4gICAgLyoqICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVidWlsZE1hc2tcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYnVpbGRNYXNrKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGRlZnMgPSB0aGlzLmRlZmluaXRpb25zO1xuICAgICAgdGhpcy5fYmxvY2tzID0gW107XG4gICAgICB0aGlzLl9zdG9wcyA9IFtdO1xuICAgICAgdGhpcy5fbWFza2VkQmxvY2tzID0ge307XG4gICAgICB2YXIgcGF0dGVybiA9IHRoaXMubWFzaztcbiAgICAgIGlmICghcGF0dGVybiB8fCAhZGVmcykgcmV0dXJuO1xuICAgICAgdmFyIHVubWFza2luZ0Jsb2NrID0gZmFsc2U7XG4gICAgICB2YXIgb3B0aW9uYWxCbG9jayA9IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHRoaXMuYmxvY2tzKSB7XG4gICAgICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHBhdHRlcm4uc2xpY2UoaSk7XG4gICAgICAgICAgICB2YXIgYk5hbWVzID0gT2JqZWN0LmtleXMoX3RoaXMuYmxvY2tzKS5maWx0ZXIoZnVuY3Rpb24gKGJOYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwLmluZGV4T2YoYk5hbWUpID09PSAwO1xuICAgICAgICAgICAgfSk7IC8vIG9yZGVyIGJ5IGtleSBsZW5ndGhcblxuICAgICAgICAgICAgYk5hbWVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgICAgICB9KTsgLy8gdXNlIGJsb2NrIG5hbWUgd2l0aCBtYXggbGVuZ3RoXG5cbiAgICAgICAgICAgIHZhciBiTmFtZSA9IGJOYW1lc1swXTtcblxuICAgICAgICAgICAgaWYgKGJOYW1lKSB7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcbiAgICAgICAgICAgICAgdmFyIG1hc2tlZEJsb2NrID0gY3JlYXRlTWFzayhPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IF90aGlzLFxuICAgICAgICAgICAgICAgIGxhenk6IF90aGlzLmxhenksXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiBfdGhpcy5wbGFjZWhvbGRlckNoYXIsXG4gICAgICAgICAgICAgICAgb3ZlcndyaXRlOiBfdGhpcy5vdmVyd3JpdGVcbiAgICAgICAgICAgICAgfSwgX3RoaXMuYmxvY2tzW2JOYW1lXSkpO1xuXG4gICAgICAgICAgICAgIGlmIChtYXNrZWRCbG9jaykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9ibG9ja3MucHVzaChtYXNrZWRCbG9jayk7IC8vIHN0b3JlIGJsb2NrIGluZGV4XG5cblxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0pIF90aGlzLl9tYXNrZWRCbG9ja3NbYk5hbWVdID0gW107XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5fbWFza2VkQmxvY2tzW2JOYW1lXS5wdXNoKF90aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpICs9IGJOYW1lLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhciA9IHBhdHRlcm5baV07XG5cbiAgICAgICAgdmFyIF9pc0lucHV0ID0gKGNoYXIgaW4gZGVmcyk7XG5cbiAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uU1RPUF9DSEFSKSB7XG4gICAgICAgICAgdGhpcy5fc3RvcHMucHVzaCh0aGlzLl9ibG9ja3MubGVuZ3RoKTtcblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYXIgPT09ICd7JyB8fCBjaGFyID09PSAnfScpIHtcbiAgICAgICAgICB1bm1hc2tpbmdCbG9jayA9ICF1bm1hc2tpbmdCbG9jaztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyID09PSAnWycgfHwgY2hhciA9PT0gJ10nKSB7XG4gICAgICAgICAgb3B0aW9uYWxCbG9jayA9ICFvcHRpb25hbEJsb2NrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uRVNDQVBFX0NIQVIpIHtcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgY2hhciA9IHBhdHRlcm5baV07XG4gICAgICAgICAgaWYgKCFjaGFyKSBicmVhaztcbiAgICAgICAgICBfaXNJbnB1dCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZiA9IF9pc0lucHV0ID8gbmV3IFBhdHRlcm5JbnB1dERlZmluaXRpb24oe1xuICAgICAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgICAgICBsYXp5OiB0aGlzLmxhenksXG4gICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiB0aGlzLnBsYWNlaG9sZGVyQ2hhcixcbiAgICAgICAgICBtYXNrOiBkZWZzW2NoYXJdLFxuICAgICAgICAgIGlzT3B0aW9uYWw6IG9wdGlvbmFsQmxvY2tcbiAgICAgICAgfSkgOiBuZXcgUGF0dGVybkZpeGVkRGVmaW5pdGlvbih7XG4gICAgICAgICAgY2hhcjogY2hhcixcbiAgICAgICAgICBpc1VubWFza2luZzogdW5tYXNraW5nQmxvY2tcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fYmxvY2tzLnB1c2goZGVmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwic3RhdGVcIiwgdGhpcyksIHtcbiAgICAgICAgX2Jsb2NrczogdGhpcy5fYmxvY2tzLm1hcChmdW5jdGlvbiAoYikge1xuICAgICAgICAgIHJldHVybiBiLnN0YXRlO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgdmFyIF9ibG9ja3MgPSBzdGF0ZS5fYmxvY2tzLFxuICAgICAgICAgIG1hc2tlZFN0YXRlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHN0YXRlLCBfZXhjbHVkZWQpO1xuXG4gICAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYiwgYmkpIHtcbiAgICAgICAgcmV0dXJuIGIuc3RhdGUgPSBfYmxvY2tzW2JpXTtcbiAgICAgIH0pO1xuXG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwic3RhdGVcIiwgbWFza2VkU3RhdGUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJyZXNldFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgICByZXR1cm4gYi5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzQ29tcGxldGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MuZXZlcnkoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIGIuaXNDb21wbGV0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkb0NvbW1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb0NvbW1pdCgpIHtcbiAgICAgIHRoaXMuX2Jsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIHJldHVybiBiLmRvQ29tbWl0KCk7XG4gICAgICB9KTtcblxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcImRvQ29tbWl0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGIpIHtcbiAgICAgICAgcmV0dXJuIHN0ciArPSBiLnVubWFza2VkVmFsdWU7XG4gICAgICB9LCAnJyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh1bm1hc2tlZFZhbHVlKSB7XG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCB1bm1hc2tlZFZhbHVlLCB0aGlzLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICBAb3ZlcnJpZGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIC8vIFRPRE8gcmV0dXJuIF92YWx1ZSB3aGVuIG5vdCBpbiBjaGFuZ2U/XG4gICAgICByZXR1cm4gdGhpcy5fYmxvY2tzLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBiKSB7XG4gICAgICAgIHJldHVybiBzdHIgKz0gYi52YWx1ZTtcbiAgICAgIH0sICcnKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwidmFsdWVcIiwgdmFsdWUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRhaWwodGFpbCkge1xuICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJhcHBlbmRUYWlsXCIsIHRoaXMpLmNhbGwodGhpcywgdGFpbCkuYWdncmVnYXRlKHRoaXMuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYXBwZW5kQ2hhclJhd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgdmFyIGJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgICBpZiAoIWJsb2NrSXRlcikgcmV0dXJuIGRldGFpbHM7XG5cbiAgICAgIGZvciAodmFyIGJpID0gYmxvY2tJdGVyLmluZGV4OzsgKytiaSkge1xuICAgICAgICB2YXIgX2Jsb2NrID0gdGhpcy5fYmxvY2tzW2JpXTtcbiAgICAgICAgaWYgKCFfYmxvY2spIGJyZWFrO1xuXG4gICAgICAgIHZhciBibG9ja0RldGFpbHMgPSBfYmxvY2suX2FwcGVuZENoYXIoY2gsIGZsYWdzKTtcblxuICAgICAgICB2YXIgc2tpcCA9IGJsb2NrRGV0YWlscy5za2lwO1xuICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShibG9ja0RldGFpbHMpO1xuICAgICAgICBpZiAoc2tpcCB8fCBibG9ja0RldGFpbHMucmF3SW5zZXJ0ZWQpIGJyZWFrOyAvLyBnbyBuZXh0IGNoYXJcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIHZhciBjaHVua1RhaWwgPSBuZXcgQ2h1bmtzVGFpbERldGFpbHMoKTtcbiAgICAgIGlmIChmcm9tUG9zID09PSB0b1BvcykgcmV0dXJuIGNodW5rVGFpbDtcblxuICAgICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIGZ1bmN0aW9uIChiLCBiaSwgYkZyb21Qb3MsIGJUb1Bvcykge1xuICAgICAgICB2YXIgYmxvY2tDaHVuayA9IGIuZXh0cmFjdFRhaWwoYkZyb21Qb3MsIGJUb1Bvcyk7XG4gICAgICAgIGJsb2NrQ2h1bmsuc3RvcCA9IF90aGlzMi5fZmluZFN0b3BCZWZvcmUoYmkpO1xuICAgICAgICBibG9ja0NodW5rLmZyb20gPSBfdGhpczIuX2Jsb2NrU3RhcnRQb3MoYmkpO1xuICAgICAgICBpZiAoYmxvY2tDaHVuayBpbnN0YW5jZW9mIENodW5rc1RhaWxEZXRhaWxzKSBibG9ja0NodW5rLmJsb2NrSW5kZXggPSBiaTtcbiAgICAgICAgY2h1bmtUYWlsLmV4dGVuZChibG9ja0NodW5rKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gY2h1bmtUYWlsO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIGlmIChmcm9tUG9zID09PSB0b1BvcykgcmV0dXJuICcnO1xuICAgICAgdmFyIGlucHV0ID0gJyc7XG5cbiAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgXywgZnJvbVBvcywgdG9Qb3MpIHtcbiAgICAgICAgaW5wdXQgKz0gYi5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9maW5kU3RvcEJlZm9yZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZFN0b3BCZWZvcmUoYmxvY2tJbmRleCkge1xuICAgICAgdmFyIHN0b3BCZWZvcmU7XG5cbiAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzLl9zdG9wcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgdmFyIHN0b3AgPSB0aGlzLl9zdG9wc1tzaV07XG4gICAgICAgIGlmIChzdG9wIDw9IGJsb2NrSW5kZXgpIHN0b3BCZWZvcmUgPSBzdG9wO2Vsc2UgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9wQmVmb3JlO1xuICAgIH1cbiAgICAvKiogQXBwZW5kcyBwbGFjZWhvbGRlciBkZXBlbmRpbmcgb24gbGF6aW5lc3MgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIodG9CbG9ja0luZGV4KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgICAgaWYgKHRoaXMubGF6eSAmJiB0b0Jsb2NrSW5kZXggPT0gbnVsbCkgcmV0dXJuIGRldGFpbHM7XG5cbiAgICAgIHZhciBzdGFydEJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICBpZiAoIXN0YXJ0QmxvY2tJdGVyKSByZXR1cm4gZGV0YWlscztcbiAgICAgIHZhciBzdGFydEJsb2NrSW5kZXggPSBzdGFydEJsb2NrSXRlci5pbmRleDtcbiAgICAgIHZhciBlbmRCbG9ja0luZGV4ID0gdG9CbG9ja0luZGV4ICE9IG51bGwgPyB0b0Jsb2NrSW5kZXggOiB0aGlzLl9ibG9ja3MubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9ibG9ja3Muc2xpY2Uoc3RhcnRCbG9ja0luZGV4LCBlbmRCbG9ja0luZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGlmICghYi5sYXp5IHx8IHRvQmxvY2tJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSBgX2Jsb2Nrc2AgbWF5IG5vdCBiZSBwcmVzZW50XG4gICAgICAgICAgdmFyIGFyZ3MgPSBiLl9ibG9ja3MgIT0gbnVsbCA/IFtiLl9ibG9ja3MubGVuZ3RoXSA6IFtdO1xuXG4gICAgICAgICAgdmFyIGJEZXRhaWxzID0gYi5fYXBwZW5kUGxhY2Vob2xkZXIuYXBwbHkoYiwgYXJncyk7XG5cbiAgICAgICAgICBfdGhpczMuX3ZhbHVlICs9IGJEZXRhaWxzLmluc2VydGVkO1xuICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKGJEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH1cbiAgICAvKiogRmluZHMgYmxvY2sgaW4gcG9zICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfbWFwUG9zVG9CbG9ja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFwUG9zVG9CbG9jayhwb3MpIHtcbiAgICAgIHZhciBhY2NWYWwgPSAnJztcblxuICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgdmFyIF9ibG9jazIgPSB0aGlzLl9ibG9ja3NbYmldO1xuICAgICAgICB2YXIgYmxvY2tTdGFydFBvcyA9IGFjY1ZhbC5sZW5ndGg7XG4gICAgICAgIGFjY1ZhbCArPSBfYmxvY2syLnZhbHVlO1xuXG4gICAgICAgIGlmIChwb3MgPD0gYWNjVmFsLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogYmksXG4gICAgICAgICAgICBvZmZzZXQ6IHBvcyAtIGJsb2NrU3RhcnRQb3NcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2Jsb2NrU3RhcnRQb3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Jsb2NrU3RhcnRQb3MoYmxvY2tJbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5zbGljZSgwLCBibG9ja0luZGV4KS5yZWR1Y2UoZnVuY3Rpb24gKHBvcywgYikge1xuICAgICAgICByZXR1cm4gcG9zICs9IGIudmFsdWUubGVuZ3RoO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICAgIC8qKiAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2ZvckVhY2hCbG9ja3NJblJhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zKSB7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmcm9tQmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayhmcm9tUG9zKTtcblxuICAgICAgaWYgKGZyb21CbG9ja0l0ZXIpIHtcbiAgICAgICAgdmFyIHRvQmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0b1Bvcyk7IC8vIHByb2Nlc3MgZmlyc3QgYmxvY2tcblxuXG4gICAgICAgIHZhciBpc1NhbWVCbG9jayA9IHRvQmxvY2tJdGVyICYmIGZyb21CbG9ja0l0ZXIuaW5kZXggPT09IHRvQmxvY2tJdGVyLmluZGV4O1xuICAgICAgICB2YXIgZnJvbUJsb2NrU3RhcnRQb3MgPSBmcm9tQmxvY2tJdGVyLm9mZnNldDtcbiAgICAgICAgdmFyIGZyb21CbG9ja0VuZFBvcyA9IHRvQmxvY2tJdGVyICYmIGlzU2FtZUJsb2NrID8gdG9CbG9ja0l0ZXIub2Zmc2V0IDogdGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgZm4odGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLCBmcm9tQmxvY2tJdGVyLmluZGV4LCBmcm9tQmxvY2tTdGFydFBvcywgZnJvbUJsb2NrRW5kUG9zKTtcblxuICAgICAgICBpZiAodG9CbG9ja0l0ZXIgJiYgIWlzU2FtZUJsb2NrKSB7XG4gICAgICAgICAgLy8gcHJvY2VzcyBpbnRlcm1lZGlhdGUgYmxvY2tzXG4gICAgICAgICAgZm9yICh2YXIgYmkgPSBmcm9tQmxvY2tJdGVyLmluZGV4ICsgMTsgYmkgPCB0b0Jsb2NrSXRlci5pbmRleDsgKytiaSkge1xuICAgICAgICAgICAgZm4odGhpcy5fYmxvY2tzW2JpXSwgYmksIDAsIHRoaXMuX2Jsb2Nrc1tiaV0udmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICB9IC8vIHByb2Nlc3MgbGFzdCBibG9ja1xuXG5cbiAgICAgICAgICBmbih0aGlzLl9ibG9ja3NbdG9CbG9ja0l0ZXIuaW5kZXhdLCB0b0Jsb2NrSXRlci5pbmRleCwgMCwgdG9CbG9ja0l0ZXIub2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXG4gICAgICB2YXIgcmVtb3ZlRGV0YWlscyA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJyZW1vdmVcIiwgdGhpcykuY2FsbCh0aGlzLCBmcm9tUG9zLCB0b1Bvcyk7XG5cbiAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgXywgYkZyb21Qb3MsIGJUb1Bvcykge1xuICAgICAgICByZW1vdmVEZXRhaWxzLmFnZ3JlZ2F0ZShiLnJlbW92ZShiRnJvbVBvcywgYlRvUG9zKSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJlbW92ZURldGFpbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcbiAgICAgIC8vIFRPRE8gcmVmYWN0b3IgLSBleHRyYWN0IGFsaWduYmxvY2tcbiAgICAgIHZhciBiZWdpbkJsb2NrRGF0YSA9IHRoaXMuX21hcFBvc1RvQmxvY2soY3Vyc29yUG9zKSB8fCB7XG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH07XG4gICAgICB2YXIgYmVnaW5CbG9ja09mZnNldCA9IGJlZ2luQmxvY2tEYXRhLm9mZnNldCxcbiAgICAgICAgICBiZWdpbkJsb2NrSW5kZXggPSBiZWdpbkJsb2NrRGF0YS5pbmRleDtcbiAgICAgIHZhciBiZWdpbkJsb2NrID0gdGhpcy5fYmxvY2tzW2JlZ2luQmxvY2tJbmRleF07XG4gICAgICBpZiAoIWJlZ2luQmxvY2spIHJldHVybiBjdXJzb3JQb3M7XG4gICAgICB2YXIgYmVnaW5CbG9ja0N1cnNvclBvcyA9IGJlZ2luQmxvY2tPZmZzZXQ7IC8vIGlmIHBvc2l0aW9uIGluc2lkZSBibG9jayAtIHRyeSB0byBhZGp1c3QgaXRcblxuICAgICAgaWYgKGJlZ2luQmxvY2tDdXJzb3JQb3MgIT09IDAgJiYgYmVnaW5CbG9ja0N1cnNvclBvcyA8IGJlZ2luQmxvY2sudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGJlZ2luQmxvY2tDdXJzb3JQb3MgPSBiZWdpbkJsb2NrLm5lYXJlc3RJbnB1dFBvcyhiZWdpbkJsb2NrT2Zmc2V0LCBmb3JjZURpcmVjdGlvbihkaXJlY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnNvckF0UmlnaHQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSBiZWdpbkJsb2NrLnZhbHVlLmxlbmd0aDtcbiAgICAgIHZhciBjdXJzb3JBdExlZnQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSAwOyAvLyAgY3Vyc29yIGlzIElOU0lERSBmaXJzdCBibG9jayAobm90IGF0IGJvdW5kcylcblxuICAgICAgaWYgKCFjdXJzb3JBdExlZnQgJiYgIWN1cnNvckF0UmlnaHQpIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJlZ2luQmxvY2tJbmRleCkgKyBiZWdpbkJsb2NrQ3Vyc29yUG9zO1xuICAgICAgdmFyIHNlYXJjaEJsb2NrSW5kZXggPSBjdXJzb3JBdFJpZ2h0ID8gYmVnaW5CbG9ja0luZGV4ICsgMSA6IGJlZ2luQmxvY2tJbmRleDtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLk5PTkUpIHtcbiAgICAgICAgLy8gTk9ORSBkaXJlY3Rpb24gdXNlZCB0byBjYWxjdWxhdGUgc3RhcnQgaW5wdXQgcG9zaXRpb24gaWYgbm8gY2hhcnMgd2VyZSByZW1vdmVkXG4gICAgICAgIC8vIEZPUiBOT05FOlxuICAgICAgICAvLyAtXG4gICAgICAgIC8vIGlucHV0fGFueVxuICAgICAgICAvLyAtPlxuICAgICAgICAvLyAgYW55fGlucHV0XG4gICAgICAgIC8vIDwtXG4gICAgICAgIC8vICBmaWxsZWQtaW5wdXR8YW55XG4gICAgICAgIC8vIGNoZWNrIGlmIGZpcnN0IGJsb2NrIGF0IGxlZnQgaXMgaW5wdXRcbiAgICAgICAgaWYgKHNlYXJjaEJsb2NrSW5kZXggPiAwKSB7XG4gICAgICAgICAgdmFyIGJsb2NrSW5kZXhBdExlZnQgPSBzZWFyY2hCbG9ja0luZGV4IC0gMTtcbiAgICAgICAgICB2YXIgYmxvY2tBdExlZnQgPSB0aGlzLl9ibG9ja3NbYmxvY2tJbmRleEF0TGVmdF07XG4gICAgICAgICAgdmFyIGJsb2NrSW5wdXRQb3MgPSBibG9ja0F0TGVmdC5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpOyAvLyBpcyBpbnB1dFxuXG4gICAgICAgICAgaWYgKCFibG9ja0F0TGVmdC52YWx1ZS5sZW5ndGggfHwgYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdExlZnQudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhzZWFyY2hCbG9ja0luZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gLT5cblxuXG4gICAgICAgIHZhciBmaXJzdElucHV0QXRSaWdodCA9IHNlYXJjaEJsb2NrSW5kZXg7XG5cbiAgICAgICAgZm9yICh2YXIgYmkgPSBmaXJzdElucHV0QXRSaWdodDsgYmkgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK2JpKSB7XG4gICAgICAgICAgdmFyIGJsb2NrQXRSaWdodCA9IHRoaXMuX2Jsb2Nrc1tiaV07XG5cbiAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MgPSBibG9ja0F0UmlnaHQubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcblxuICAgICAgICAgIGlmICghYmxvY2tBdFJpZ2h0LnZhbHVlLmxlbmd0aCB8fCBfYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdFJpZ2h0LnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpICsgX2Jsb2NrSW5wdXRQb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIDwtXG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLWZpeGVkIHN5bWJvbFxuXG5cbiAgICAgICAgZm9yICh2YXIgX2JpID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7IF9iaSA+PSAwOyAtLV9iaSkge1xuICAgICAgICAgIHZhciBfYmxvY2szID0gdGhpcy5fYmxvY2tzW19iaV07XG5cbiAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MyID0gX2Jsb2NrMy5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpOyAvLyBpcyBpbnB1dFxuXG5cbiAgICAgICAgICBpZiAoIV9ibG9jazMudmFsdWUubGVuZ3RoIHx8IF9ibG9ja0lucHV0UG9zMiAhPT0gX2Jsb2NrMy52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaSkgKyBfYmxvY2szLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3Vyc29yUG9zO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUKSB7XG4gICAgICAgIC8vIC1cbiAgICAgICAgLy8gIGFueXxmaWxsZWQtaW5wdXRcbiAgICAgICAgLy8gPC1cbiAgICAgICAgLy8gIGFueXxmaXJzdCBub3QgZW1wdHkgaXMgbm90LWxlbi1hbGlnbmVkXG4gICAgICAgIC8vICBub3QtMC1hbGlnbmVkfGFueVxuICAgICAgICAvLyAtPlxuICAgICAgICAvLyAgYW55fG5vdC1sZW4tYWxpZ25lZCBvciBlbmRcbiAgICAgICAgLy8gY2hlY2sgaWYgZmlyc3QgYmxvY2sgYXQgcmlnaHQgaXMgZmlsbGVkIGlucHV0XG4gICAgICAgIHZhciBmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0O1xuXG4gICAgICAgIGZvciAodmFyIF9iaTIgPSBzZWFyY2hCbG9ja0luZGV4OyBfYmkyIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmkyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Jsb2Nrc1tfYmkyXS52YWx1ZSkge1xuICAgICAgICAgICAgZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodCA9IF9iaTI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIGZpbGxlZEJsb2NrID0gdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHRdO1xuXG4gICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zMyA9IGZpbGxlZEJsb2NrLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uUklHSFQpO1xuXG4gICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zMyA9PT0gMCAmJiBmaWxsZWRCbG9jay51bm1hc2tlZFZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gZmlsbGVkIGJsb2NrIGlzIGlucHV0XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0KSArIF9ibG9ja0lucHV0UG9zMztcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gPC1cbiAgICAgICAgLy8gZmluZCB0aGlzIHZhcnNcblxuXG4gICAgICAgIHZhciBmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA9IC0xO1xuICAgICAgICB2YXIgZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleDsgLy8gVE9ETyBjb25zaWRlciBuZXN0ZWQgZW1wdHkgaW5wdXRzXG5cbiAgICAgICAgZm9yICh2YXIgX2JpMyA9IHNlYXJjaEJsb2NrSW5kZXggLSAxOyBfYmkzID49IDA7IC0tX2JpMykge1xuICAgICAgICAgIHZhciBfYmxvY2s0ID0gdGhpcy5fYmxvY2tzW19iaTNdO1xuXG4gICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNCA9IF9ibG9jazQubmVhcmVzdElucHV0UG9zKF9ibG9jazQudmFsdWUubGVuZ3RoLCBESVJFQ1RJT04uRk9SQ0VfTEVGVCk7XG5cbiAgICAgICAgICBpZiAoIV9ibG9jazQudmFsdWUgfHwgX2Jsb2NrSW5wdXRQb3M0ICE9PSAwKSBmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4ID0gX2JpMztcblxuICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczQgIT09IDApIHtcbiAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczQgIT09IF9ibG9jazQudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIGFsaWduZWQgaW5zaWRlIGJsb2NrIC0gcmV0dXJuIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTMpICsgX2Jsb2NrSW5wdXRQb3M0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gZm91bmQgZmlsbGVkXG4gICAgICAgICAgICAgIGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ID0gX2JpMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkxFRlQpIHtcbiAgICAgICAgICAvLyB0cnkgZmluZCBmaXJzdCBlbXB0eSBpbnB1dCBiZWZvcmUgc3RhcnQgc2VhcmNoaW5nIHBvc2l0aW9uIG9ubHkgd2hlbiBub3QgZm9yY2VkXG4gICAgICAgICAgZm9yICh2YXIgX2JpNCA9IGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ICsgMTsgX2JpNCA8PSBNYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7ICsrX2JpNCkge1xuICAgICAgICAgICAgdmFyIF9ibG9jazUgPSB0aGlzLl9ibG9ja3NbX2JpNF07XG5cbiAgICAgICAgICAgIHZhciBfYmxvY2tJbnB1dFBvczUgPSBfYmxvY2s1Lm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSk7XG5cbiAgICAgICAgICAgIHZhciBibG9ja0FsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTQpICsgX2Jsb2NrSW5wdXRQb3M1O1xuXG4gICAgICAgICAgICBpZiAoYmxvY2tBbGlnbmVkUG9zID4gY3Vyc29yUG9zKSBicmVhazsgLy8gaWYgYmxvY2sgaXMgbm90IGxhenkgaW5wdXRcblxuICAgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zNSAhPT0gX2Jsb2NrNS52YWx1ZS5sZW5ndGgpIHJldHVybiBibG9ja0FsaWduZWRQb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHByb2Nlc3Mgb3ZlcmZsb3dcblxuXG4gICAgICAgIGlmIChmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgpICsgdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4XS52YWx1ZS5sZW5ndGg7XG4gICAgICAgIH0gLy8gZm9yIGxhenkgaWYgaGFzIGFsaWduZWQgbGVmdCBpbnNpZGUgZml4ZWQgYW5kIGhhcyBjYW1lIHRvIHRoZSBzdGFydCAtIHVzZSBzdGFydCBwb3NpdGlvblxuXG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQgfHwgdGhpcy5sYXp5ICYmICF0aGlzLmV4dHJhY3RJbnB1dCgpICYmICFpc0lucHV0KHRoaXMuX2Jsb2Nrc1tzZWFyY2hCbG9ja0luZGV4XSkpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4KTtcbiAgICAgICAgfSAvLyBmaW5kIGZpcnN0IGlucHV0XG5cblxuICAgICAgICBmb3IgKHZhciBfYmk1ID0gc2VhcmNoQmxvY2tJbmRleDsgX2JpNSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrX2JpNSkge1xuICAgICAgICAgIHZhciBfYmxvY2s2ID0gdGhpcy5fYmxvY2tzW19iaTVdO1xuXG4gICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNiA9IF9ibG9jazYubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTsgLy8gaXMgaW5wdXRcblxuXG4gICAgICAgICAgaWYgKCFfYmxvY2s2LnZhbHVlLmxlbmd0aCB8fCBfYmxvY2tJbnB1dFBvczYgIT09IF9ibG9jazYudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk1KSArIF9ibG9ja0lucHV0UG9zNjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLlJJR0hUIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX1JJR0hUKSB7XG4gICAgICAgIC8vIC0+XG4gICAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkIGFuZCBmaWxsZWRcbiAgICAgICAgLy8gIGFueXxub3QtbGVuLWFsaWduZWRcbiAgICAgICAgLy8gPC1cbiAgICAgICAgLy8gIG5vdC0wLWFsaWduZWQgb3Igc3RhcnR8YW55XG4gICAgICAgIHZhciBmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXg7XG4gICAgICAgIHZhciBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zO1xuXG4gICAgICAgIGZvciAodmFyIF9iaTYgPSBzZWFyY2hCbG9ja0luZGV4OyBfYmk2IDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmk2KSB7XG4gICAgICAgICAgdmFyIF9ibG9jazcgPSB0aGlzLl9ibG9ja3NbX2JpNl07XG5cbiAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M3ID0gX2Jsb2NrNy5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xuXG4gICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zNyAhPT0gX2Jsb2NrNy52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTYpICsgX2Jsb2NrSW5wdXRQb3M3O1xuICAgICAgICAgICAgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4ID0gX2JpNjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXggIT0gbnVsbCAmJiBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKHZhciBfYmk3ID0gZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4OyBfYmk3IDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmk3KSB7XG4gICAgICAgICAgICB2YXIgX2Jsb2NrOCA9IHRoaXMuX2Jsb2Nrc1tfYmk3XTtcblxuICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zOCA9IF9ibG9jazgubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCk7XG5cbiAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczggIT09IF9ibG9jazgudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTcpICsgX2Jsb2NrSW5wdXRQb3M4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCA/IHRoaXMudmFsdWUubGVuZ3RoIDogZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9iaTggPSBNYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7IF9iaTggPj0gMDsgLS1fYmk4KSB7XG4gICAgICAgICAgdmFyIF9ibG9jazkgPSB0aGlzLl9ibG9ja3NbX2JpOF07XG5cbiAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M5ID0gX2Jsb2NrOS5uZWFyZXN0SW5wdXRQb3MoX2Jsb2NrOS52YWx1ZS5sZW5ndGgsIERJUkVDVElPTi5MRUZUKTtcblxuICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczkgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBhbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk4KSArIF9ibG9ja0lucHV0UG9zOTtcblxuICAgICAgICAgICAgaWYgKGFsaWduZWRQb3MgPj0gY3Vyc29yUG9zKSByZXR1cm4gYWxpZ25lZFBvcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3Vyc29yUG9zO1xuICAgIH1cbiAgICAvKiogR2V0IGJsb2NrIGJ5IG5hbWUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1hc2tlZEJsb2NrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hc2tlZEJsb2NrKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hc2tlZEJsb2NrcyhuYW1lKVswXTtcbiAgICB9XG4gICAgLyoqIEdldCBhbGwgYmxvY2tzIGJ5IG5hbWUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1hc2tlZEJsb2Nrc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrZWRCbG9ja3MobmFtZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBpbmRpY2VzID0gdGhpcy5fbWFza2VkQmxvY2tzW25hbWVdO1xuICAgICAgaWYgKCFpbmRpY2VzKSByZXR1cm4gW107XG4gICAgICByZXR1cm4gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGdpKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuX2Jsb2Nrc1tnaV07XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFza2VkUGF0dGVybjtcbn0oTWFza2VkKTtcbk1hc2tlZFBhdHRlcm4uREVGQVVMVFMgPSB7XG4gIGxhenk6IHRydWUsXG4gIHBsYWNlaG9sZGVyQ2hhcjogJ18nXG59O1xuTWFza2VkUGF0dGVybi5TVE9QX0NIQVIgPSAnYCc7XG5NYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSID0gJ1xcXFwnO1xuTWFza2VkUGF0dGVybi5JbnB1dERlZmluaXRpb24gPSBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xuTWFza2VkUGF0dGVybi5GaXhlZERlZmluaXRpb24gPSBQYXR0ZXJuRml4ZWREZWZpbml0aW9uO1xuXG5mdW5jdGlvbiBpc0lucHV0KGJsb2NrKSB7XG4gIGlmICghYmxvY2spIHJldHVybiBmYWxzZTtcbiAgdmFyIHZhbHVlID0gYmxvY2sudmFsdWU7XG4gIHJldHVybiAhdmFsdWUgfHwgYmxvY2submVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKSAhPT0gdmFsdWUubGVuZ3RoO1xufVxuXG5JTWFzay5NYXNrZWRQYXR0ZXJuID0gTWFza2VkUGF0dGVybjtcblxuZXhwb3J0IHsgTWFza2VkUGF0dGVybiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBfIGFzIF9jcmVhdGVDbGFzcywgYSBhcyBfY2xhc3NDYWxsQ2hlY2ssIGIgYXMgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgQ29udGludW91c1RhaWxEZXRhaWxzIGZyb20gJy4uLy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uLy4uL2NvcmUvaG9sZGVyLmpzJztcblxudmFyIF9leGNsdWRlZCA9IFtcImNodW5rc1wiXTtcblxudmFyIENodW5rc1RhaWxEZXRhaWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqICovXG4gIGZ1bmN0aW9uIENodW5rc1RhaWxEZXRhaWxzKCkge1xuICAgIHZhciBjaHVua3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENodW5rc1RhaWxEZXRhaWxzKTtcblxuICAgIHRoaXMuY2h1bmtzID0gY2h1bmtzO1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2h1bmtzVGFpbERldGFpbHMsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2h1bmtzLm1hcChTdHJpbmcpLmpvaW4oJycpO1xuICAgIH0gLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0ZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YWlsQ2h1bmspIHtcbiAgICAgIGlmICghU3RyaW5nKHRhaWxDaHVuaykpIHJldHVybjtcbiAgICAgIGlmIChpc1N0cmluZyh0YWlsQ2h1bmspKSB0YWlsQ2h1bmsgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsQ2h1bmspKTtcbiAgICAgIHZhciBsYXN0Q2h1bmsgPSB0aGlzLmNodW5rc1t0aGlzLmNodW5rcy5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBleHRlbmRMYXN0ID0gbGFzdENodW5rICYmIChsYXN0Q2h1bmsuc3RvcCA9PT0gdGFpbENodW5rLnN0b3AgfHwgdGFpbENodW5rLnN0b3AgPT0gbnVsbCkgJiYgLy8gaWYgdGFpbCBjaHVuayBnb2VzIGp1c3QgYWZ0ZXIgbGFzdCBjaHVua1xuICAgICAgdGFpbENodW5rLmZyb20gPT09IGxhc3RDaHVuay5mcm9tICsgbGFzdENodW5rLnRvU3RyaW5nKCkubGVuZ3RoO1xuXG4gICAgICBpZiAodGFpbENodW5rIGluc3RhbmNlb2YgQ29udGludW91c1RhaWxEZXRhaWxzKSB7XG4gICAgICAgIC8vIGNoZWNrIHRoZSBhYmlsaXR5IHRvIGV4dGVuZCBwcmV2aW91cyBjaHVua1xuICAgICAgICBpZiAoZXh0ZW5kTGFzdCkge1xuICAgICAgICAgIC8vIGV4dGVuZCBwcmV2aW91cyBjaHVua1xuICAgICAgICAgIGxhc3RDaHVuay5leHRlbmQodGFpbENodW5rLnRvU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFwcGVuZCBuZXcgY2h1bmtcbiAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRhaWxDaHVuayk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFpbENodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMpIHtcbiAgICAgICAgaWYgKHRhaWxDaHVuay5zdG9wID09IG51bGwpIHtcbiAgICAgICAgICAvLyB1bndyYXAgZmxvYXRpbmcgY2h1bmtzIHRvIHBhcmVudCwga2VlcGluZyBgZnJvbWAgcG9zXG4gICAgICAgICAgdmFyIGZpcnN0VGFpbENodW5rO1xuXG4gICAgICAgICAgd2hpbGUgKHRhaWxDaHVuay5jaHVua3MubGVuZ3RoICYmIHRhaWxDaHVuay5jaHVua3NbMF0uc3RvcCA9PSBudWxsKSB7XG4gICAgICAgICAgICBmaXJzdFRhaWxDaHVuayA9IHRhaWxDaHVuay5jaHVua3Muc2hpZnQoKTtcbiAgICAgICAgICAgIGZpcnN0VGFpbENodW5rLmZyb20gKz0gdGFpbENodW5rLmZyb207XG4gICAgICAgICAgICB0aGlzLmV4dGVuZChmaXJzdFRhaWxDaHVuayk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmIHRhaWwgY2h1bmsgc3RpbGwgaGFzIHZhbHVlXG5cblxuICAgICAgICBpZiAodGFpbENodW5rLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAvLyBpZiBjaHVua3MgY29udGFpbnMgc3RvcHMsIHRoZW4gcG9wdXAgc3RvcCB0byBjb250YWluZXJcbiAgICAgICAgICB0YWlsQ2h1bmsuc3RvcCA9IHRhaWxDaHVuay5ibG9ja0luZGV4O1xuICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2godGFpbENodW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhcHBlbmRUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUbyhtYXNrZWQpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGlmICghKG1hc2tlZCBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZFBhdHRlcm4pKSB7XG4gICAgICAgIHZhciB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gdGFpbC5hcHBlbmRUbyhtYXNrZWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cbiAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCB0aGlzLmNodW5rcy5sZW5ndGggJiYgIWRldGFpbHMuc2tpcDsgKytjaSkge1xuICAgICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rc1tjaV07XG5cbiAgICAgICAgdmFyIGxhc3RCbG9ja0l0ZXIgPSBtYXNrZWQuX21hcFBvc1RvQmxvY2sobWFza2VkLnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgICAgdmFyIHN0b3AgPSBjaHVuay5zdG9wO1xuICAgICAgICB2YXIgY2h1bmtCbG9jayA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoc3RvcCAhPSBudWxsICYmICghbGFzdEJsb2NrSXRlciB8fCBsYXN0QmxvY2tJdGVyLmluZGV4IDw9IHN0b3ApKSB7XG4gICAgICAgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgfHwgLy8gZm9yIGNvbnRpbnVvdXMgYmxvY2sgYWxzbyBjaGVjayBpZiBzdG9wIGlzIGV4aXN0XG4gICAgICAgICAgbWFza2VkLl9zdG9wcy5pbmRleE9mKHN0b3ApID49IDApIHtcbiAgICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5fYXBwZW5kUGxhY2Vob2xkZXIoc3RvcCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNodW5rQmxvY2sgPSBjaHVuayBpbnN0YW5jZW9mIENodW5rc1RhaWxEZXRhaWxzICYmIG1hc2tlZC5fYmxvY2tzW3N0b3BdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNodW5rQmxvY2spIHtcbiAgICAgICAgICB2YXIgdGFpbERldGFpbHMgPSBjaHVua0Jsb2NrLmFwcGVuZFRhaWwoY2h1bmspO1xuICAgICAgICAgIHRhaWxEZXRhaWxzLnNraXAgPSBmYWxzZTsgLy8gYWx3YXlzIGlnbm9yZSBza2lwLCBpdCB3aWxsIGJlIHNldCBvbiBsYXN0XG5cbiAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0YWlsRGV0YWlscyk7XG4gICAgICAgICAgbWFza2VkLl92YWx1ZSArPSB0YWlsRGV0YWlscy5pbnNlcnRlZDsgLy8gZ2V0IG5vdCBpbnNlcnRlZCBjaGFyc1xuXG4gICAgICAgICAgdmFyIHJlbWFpbkNoYXJzID0gY2h1bmsudG9TdHJpbmcoKS5zbGljZSh0YWlsRGV0YWlscy5yYXdJbnNlcnRlZC5sZW5ndGgpO1xuICAgICAgICAgIGlmIChyZW1haW5DaGFycykgZGV0YWlscy5hZ2dyZWdhdGUobWFza2VkLmFwcGVuZChyZW1haW5DaGFycywge1xuICAgICAgICAgICAgdGFpbDogdHJ1ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuYXBwZW5kKGNodW5rLnRvU3RyaW5nKCksIHtcbiAgICAgICAgICAgIHRhaWw6IHRydWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2h1bmtzOiB0aGlzLmNodW5rcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5zdGF0ZTtcbiAgICAgICAgfSksXG4gICAgICAgIGZyb206IHRoaXMuZnJvbSxcbiAgICAgICAgc3RvcDogdGhpcy5zdG9wLFxuICAgICAgICBibG9ja0luZGV4OiB0aGlzLmJsb2NrSW5kZXhcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgdmFyIGNodW5rcyA9IHN0YXRlLmNodW5rcyxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzdGF0ZSwgX2V4Y2x1ZGVkKTtcblxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwcm9wcyk7XG4gICAgICB0aGlzLmNodW5rcyA9IGNodW5rcy5tYXAoZnVuY3Rpb24gKGNzdGF0ZSkge1xuICAgICAgICB2YXIgY2h1bmsgPSBcImNodW5rc1wiIGluIGNzdGF0ZSA/IG5ldyBDaHVua3NUYWlsRGV0YWlscygpIDogbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygpOyAvLyAkRmxvd0ZpeE1lIGFscmVhZHkgY2hlY2tlZCBhYm92ZVxuXG4gICAgICAgIGNodW5rLnN0YXRlID0gY3N0YXRlO1xuICAgICAgICByZXR1cm4gY2h1bms7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hpZnRCZWZvcmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnRCZWZvcmUocG9zKSB7XG4gICAgICBpZiAodGhpcy5mcm9tID49IHBvcyB8fCAhdGhpcy5jaHVua3MubGVuZ3RoKSByZXR1cm4gJyc7XG4gICAgICB2YXIgY2h1bmtTaGlmdFBvcyA9IHBvcyAtIHRoaXMuZnJvbTtcbiAgICAgIHZhciBjaSA9IDA7XG5cbiAgICAgIHdoaWxlIChjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aCkge1xuICAgICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rc1tjaV07XG4gICAgICAgIHZhciBzaGlmdENoYXIgPSBjaHVuay5zaGlmdEJlZm9yZShjaHVua1NoaWZ0UG9zKTtcblxuICAgICAgICBpZiAoY2h1bmsudG9TdHJpbmcoKSkge1xuICAgICAgICAgIC8vIGNodW5rIHN0aWxsIGNvbnRhaW5zIHZhbHVlXG4gICAgICAgICAgLy8gYnV0IG5vdCBzaGlmdGVkIC0gbWVhbnMgbm8gbW9yZSBhdmFpbGFibGUgY2hhcnMgdG8gc2hpZnRcbiAgICAgICAgICBpZiAoIXNoaWZ0Q2hhcikgYnJlYWs7XG4gICAgICAgICAgKytjaTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjbGVhbiBpZiBjaHVuayBoYXMgbm8gdmFsdWVcbiAgICAgICAgICB0aGlzLmNodW5rcy5zcGxpY2UoY2ksIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoaWZ0Q2hhcikgcmV0dXJuIHNoaWZ0Q2hhcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaHVua3NUYWlsRGV0YWlscztcbn0oKTtcblxuZXhwb3J0IHsgQ2h1bmtzVGFpbERldGFpbHMgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfY3JlYXRlQ2xhc3MsIGEgYXMgX2NsYXNzQ2FsbENoZWNrIH0gZnJvbSAnLi4vLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCB7IERJUkVDVElPTiwgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCBDb250aW51b3VzVGFpbERldGFpbHMgZnJvbSAnLi4vLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5cbnZhciBQYXR0ZXJuRml4ZWREZWZpbml0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG4gIGZ1bmN0aW9uIFBhdHRlcm5GaXhlZERlZmluaXRpb24ob3B0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXR0ZXJuRml4ZWREZWZpbml0aW9uKTtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYXR0ZXJuRml4ZWREZWZpbml0aW9uLCBbe1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1VubWFza2luZyA/IHRoaXMudmFsdWUgOiAnJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLl9pc1Jhd0lucHV0ID0gZmFsc2U7XG4gICAgICB0aGlzLl92YWx1ZSA9ICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuX3ZhbHVlLmxlbmd0aDtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fdmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLl92YWx1ZS5zbGljZSh0b1Bvcyk7XG4gICAgICBpZiAoIXRoaXMuX3ZhbHVlKSB0aGlzLl9pc1Jhd0lucHV0ID0gZmFsc2U7XG4gICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IERJUkVDVElPTi5OT05FO1xuICAgICAgdmFyIG1pblBvcyA9IDA7XG4gICAgICB2YXIgbWF4UG9zID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuXG4gICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuICAgICAgICAgIHJldHVybiBtaW5Qb3M7XG5cbiAgICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcbiAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG4gICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXhQb3M7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XG4gICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5fdmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHJldHVybiBmbGFncy5yYXcgJiYgdGhpcy5faXNSYXdJbnB1dCAmJiB0aGlzLl92YWx1ZS5zbGljZShmcm9tUG9zLCB0b1BvcykgfHwgJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQ29tcGxldGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYXBwZW5kQ2hhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihzdHIpIHtcbiAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuICAgICAgdmFyIGFwcGVuZGVkID0gdGhpcy5jaGFyID09PSBzdHJbMF07XG4gICAgICB2YXIgaXNSZXNvbHZlZCA9IGFwcGVuZGVkICYmICh0aGlzLmlzVW5tYXNraW5nIHx8IGZsYWdzLmlucHV0IHx8IGZsYWdzLnJhdykgJiYgIWZsYWdzLnRhaWw7XG4gICAgICBpZiAoaXNSZXNvbHZlZCkgZGV0YWlscy5yYXdJbnNlcnRlZCA9IHRoaXMuY2hhcjtcbiAgICAgIHRoaXMuX3ZhbHVlID0gZGV0YWlscy5pbnNlcnRlZCA9IHRoaXMuY2hhcjtcbiAgICAgIHRoaXMuX2lzUmF3SW5wdXQgPSBpc1Jlc29sdmVkICYmIChmbGFncy5yYXcgfHwgZmxhZ3MuaW5wdXQpO1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuICAgICAgdGhpcy5fdmFsdWUgPSBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5jaGFyO1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIHJldHVybiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKCcnKTtcbiAgICB9IC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuICB9LCB7XG4gICAga2V5OiBcImFwcGVuZFRhaWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCh0YWlsKSB7XG4gICAgICBpZiAoaXNTdHJpbmcodGFpbCkpIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSk7XG4gICAgICByZXR1cm4gdGFpbC5hcHBlbmRUbyh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGVuZENoYXIoc3RyLCBmbGFncyk7XG5cbiAgICAgIGlmICh0YWlsICE9IG51bGwpIHtcbiAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5hcHBlbmRUYWlsKHRhaWwpLnRhaWxTaGlmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRvQ29tbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge31cbiAgfSwge1xuICAgIGtleTogXCJzdGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3ZhbHVlOiB0aGlzLl92YWx1ZSxcbiAgICAgICAgX2lzUmF3SW5wdXQ6IHRoaXMuX2lzUmF3SW5wdXRcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhdHRlcm5GaXhlZERlZmluaXRpb247XG59KCk7XG5cbmV4cG9ydCB7IFBhdHRlcm5GaXhlZERlZmluaXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfY3JlYXRlQ2xhc3MsIGEgYXMgX2NsYXNzQ2FsbENoZWNrLCBiIGFzIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyB9IGZyb20gJy4uLy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IGNyZWF0ZU1hc2sgZnJvbSAnLi4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCB7IERJUkVDVElPTiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0ICcuLi8uLi9jb3JlL2hvbGRlci5qcyc7XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJtYXNrXCJdO1xudmFyIERFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMgPSB7XG4gICcwJzogL1xcZC8sXG4gICdhJzogL1tcXHUwMDQxLVxcdTAwNUFcXHUwMDYxLVxcdTAwN0FcXHUwMEFBXFx1MDBCNVxcdTAwQkFcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MjdcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4QTBcXHUwOEEyLVxcdTA4QUNcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk3N1xcdTA5NzktXFx1MDk3RlxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzMzXFx1MEMzNS1cXHUwQzM5XFx1MEMzRFxcdTBDNThcXHUwQzU5XFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENjBcXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxQ1xcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QzEtXFx1MTlDN1xcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxODNcXHUyMTg0XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyRTJGXFx1MzAwNVxcdTMwMDZcXHUzMDMxLVxcdTMwMzVcXHUzMDNCXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZDQ1xcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjk3XFx1QTZBMC1cXHVBNkU1XFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBNzhFXFx1QTc5MC1cXHVBNzkzXFx1QTdBMC1cXHVBN0FBXFx1QTdGOC1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE4MC1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQkMwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdLyxcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjIwNzUwNzBcbiAgJyonOiAvLi9cbn07XG4vKiogKi9cblxudmFyIFBhdHRlcm5JbnB1dERlZmluaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cbiAgZnVuY3Rpb24gUGF0dGVybklucHV0RGVmaW5pdGlvbihvcHRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdHRlcm5JbnB1dERlZmluaXRpb24pO1xuXG4gICAgdmFyIG1hc2sgPSBvcHRzLm1hc2ssXG4gICAgICAgIGJsb2NrT3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRzLCBfZXhjbHVkZWQpO1xuXG4gICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKHtcbiAgICAgIG1hc2s6IG1hc2tcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGJsb2NrT3B0cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGF0dGVybklucHV0RGVmaW5pdGlvbiwgW3tcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5tYXNrZWQucmVzZXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblxuICAgICAgaWYgKGZyb21Qb3MgPT09IDAgJiYgdG9Qb3MgPj0gMSkge1xuICAgICAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXNrZWQucmVtb3ZlKGZyb21Qb3MsIHRvUG9zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXNrZWQudmFsdWUgfHwgKHRoaXMuX2lzRmlsbGVkICYmICF0aGlzLmlzT3B0aW9uYWwgPyB0aGlzLnBsYWNlaG9sZGVyQ2hhciA6ICcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQ29tcGxldGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMubWFza2VkLnZhbHVlKSB8fCB0aGlzLmlzT3B0aW9uYWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hcHBlbmRDaGFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyKHN0cikge1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIGlmICh0aGlzLl9pc0ZpbGxlZCkgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLm1hc2tlZC5zdGF0ZTsgLy8gc2ltdWxhdGUgaW5wdXRcblxuICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLm1hc2tlZC5fYXBwZW5kQ2hhcihzdHIsIGZsYWdzKTtcblxuICAgICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQgJiYgdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IGRldGFpbHMucmF3SW5zZXJ0ZWQgPSAnJztcbiAgICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkZXRhaWxzLmluc2VydGVkICYmICF0aGlzLmlzT3B0aW9uYWwgJiYgIXRoaXMubGF6eSAmJiAhZmxhZ3MuaW5wdXQpIHtcbiAgICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IHRoaXMucGxhY2Vob2xkZXJDaGFyO1xuICAgICAgfVxuXG4gICAgICBkZXRhaWxzLnNraXAgPSAhZGV0YWlscy5pbnNlcnRlZCAmJiAhdGhpcy5pc09wdGlvbmFsO1xuICAgICAgdGhpcy5faXNGaWxsZWQgPSBCb29sZWFuKGRldGFpbHMuaW5zZXJ0ZWQpO1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICB2YXIgX3RoaXMkbWFza2VkO1xuXG4gICAgICByZXR1cm4gKF90aGlzJG1hc2tlZCA9IHRoaXMubWFza2VkKS5hcHBlbmQuYXBwbHkoX3RoaXMkbWFza2VkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYXBwZW5kUGxhY2Vob2xkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xuICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgICAgaWYgKHRoaXMuX2lzRmlsbGVkIHx8IHRoaXMuaXNPcHRpb25hbCkgcmV0dXJuIGRldGFpbHM7XG4gICAgICB0aGlzLl9pc0ZpbGxlZCA9IHRydWU7XG4gICAgICBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5wbGFjZWhvbGRlckNoYXI7XG4gICAgICByZXR1cm4gZGV0YWlscztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFRhaWwoKSB7XG4gICAgICB2YXIgX3RoaXMkbWFza2VkMjtcblxuICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQyID0gdGhpcy5tYXNrZWQpLmV4dHJhY3RUYWlsLmFwcGx5KF90aGlzJG1hc2tlZDIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGVuZFRhaWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCgpIHtcbiAgICAgIHZhciBfdGhpcyRtYXNrZWQzO1xuXG4gICAgICByZXR1cm4gKF90aGlzJG1hc2tlZDMgPSB0aGlzLm1hc2tlZCkuYXBwZW5kVGFpbC5hcHBseShfdGhpcyRtYXNrZWQzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcy5tYXNrZWQuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcbiAgICAgIHZhciBtaW5Qb3MgPSAwO1xuICAgICAgdmFyIG1heFBvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGJvdW5kUG9zID0gTWF0aC5taW4oTWF0aC5tYXgoY3Vyc29yUG9zLCBtaW5Qb3MpLCBtYXhQb3MpO1xuXG4gICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBib3VuZFBvcyA6IG1pblBvcztcblxuICAgICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcbiAgICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSA/IGJvdW5kUG9zIDogbWF4UG9zO1xuXG4gICAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGJvdW5kUG9zO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG4gICAgICB2YXIgX3RoaXMkbWFza2VkNCwgX3RoaXMkcGFyZW50O1xuXG4gICAgICByZXR1cm4gKF90aGlzJG1hc2tlZDQgPSB0aGlzLm1hc2tlZCkuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRtYXNrZWQ0LCBhcmd1bWVudHMpICYmICghdGhpcy5wYXJlbnQgfHwgKF90aGlzJHBhcmVudCA9IHRoaXMucGFyZW50KS5kb1ZhbGlkYXRlLmFwcGx5KF90aGlzJHBhcmVudCwgYXJndW1lbnRzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRvQ29tbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuICAgICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hc2tlZDogdGhpcy5tYXNrZWQuc3RhdGUsXG4gICAgICAgIF9pc0ZpbGxlZDogdGhpcy5faXNGaWxsZWRcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZS5tYXNrZWQ7XG4gICAgICB0aGlzLl9pc0ZpbGxlZCA9IHN0YXRlLl9pc0ZpbGxlZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGF0dGVybklucHV0RGVmaW5pdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgREVGQVVMVF9JTlBVVF9ERUZJTklUSU9OUywgUGF0dGVybklucHV0RGVmaW5pdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgY3JlYXRlTWFzayBmcm9tICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuXG4vKiogTWFzayBwaXBlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gdHlwZXMgKi9cblxudmFyIFBJUEVfVFlQRSA9IHtcbiAgTUFTS0VEOiAndmFsdWUnLFxuICBVTk1BU0tFRDogJ3VubWFza2VkVmFsdWUnLFxuICBUWVBFRDogJ3R5cGVkVmFsdWUnXG59O1xuLyoqIENyZWF0ZXMgbmV3IHBpcGUgZnVuY3Rpb24gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVBpcGUobWFzaykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogUElQRV9UWVBFLk1BU0tFRDtcbiAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQSVBFX1RZUEUuTUFTS0VEO1xuICB2YXIgbWFza2VkID0gY3JlYXRlTWFzayhtYXNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBtYXNrZWQucnVuSXNvbGF0ZWQoZnVuY3Rpb24gKG0pIHtcbiAgICAgIG1bZnJvbV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBtW3RvXTtcbiAgICB9KTtcbiAgfTtcbn1cbi8qKiBQaXBlcyB2YWx1ZSB0aHJvdWdoIG1hc2sgZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cbmZ1bmN0aW9uIHBpcGUodmFsdWUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBpcGVBcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwaXBlQXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUGlwZS5hcHBseSh2b2lkIDAsIHBpcGVBcmdzKSh2YWx1ZSk7XG59XG5JTWFzay5QSVBFX1RZUEUgPSBQSVBFX1RZUEU7XG5JTWFzay5jcmVhdGVQaXBlID0gY3JlYXRlUGlwZTtcbklNYXNrLnBpcGUgPSBwaXBlO1xuXG5leHBvcnQgeyBQSVBFX1RZUEUsIGNyZWF0ZVBpcGUsIHBpcGUgfTtcbiIsImltcG9ydCB7IGQgYXMgX2luaGVyaXRzLCBlIGFzIF9jcmVhdGVTdXBlciwgYSBhcyBfY2xhc3NDYWxsQ2hlY2ssIF8gYXMgX2NyZWF0ZUNsYXNzLCBnIGFzIF9nZXQsIGggYXMgX2dldFByb3RvdHlwZU9mLCBmIGFzIF9zbGljZWRUb0FycmF5IH0gZnJvbSAnLi4vX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy1hMGIzNDc2NC5qcyc7XG5pbXBvcnQgTWFza2VkUGF0dGVybiBmcm9tICcuL3BhdHRlcm4uanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL2Jhc2UuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2lucHV0LWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vZml4ZWQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9jaHVuay10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL3JlZ2V4cC5qcyc7XG5cbi8qKiBQYXR0ZXJuIHdoaWNoIGFjY2VwdHMgcmFuZ2VzICovXG5cbnZhciBNYXNrZWRSYW5nZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZFBhdHRlcm4pIHtcbiAgX2luaGVyaXRzKE1hc2tlZFJhbmdlLCBfTWFza2VkUGF0dGVybik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRSYW5nZSk7XG5cbiAgZnVuY3Rpb24gTWFza2VkUmFuZ2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFJhbmdlKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYXNrZWRSYW5nZSwgW3tcbiAgICBrZXk6IFwiX21hdGNoRnJvbVwiLFxuICAgIGdldDpcbiAgICAvKipcbiAgICAgIE9wdGlvbmFsbHkgc2V0cyBtYXggbGVuZ3RoIG9mIHBhdHRlcm4uXG4gICAgICBVc2VkIHdoZW4gcGF0dGVybiBsZW5ndGggaXMgbG9uZ2VyIHRoZW4gYHRvYCBwYXJhbSBsZW5ndGguIFBhZHMgemVyb3MgYXQgc3RhcnQgaW4gdGhpcyBjYXNlLlxuICAgICovXG5cbiAgICAvKiogTWluIGJvdW5kICovXG5cbiAgICAvKiogTWF4IGJvdW5kICovXG5cbiAgICAvKiogKi9cbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXhMZW5ndGggLSBTdHJpbmcodGhpcy5mcm9tKS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl91cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG4gICAgICAvLyBUT0RPIHR5cGVcbiAgICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG86IHRoaXMudG8gfHwgMCxcbiAgICAgICAgZnJvbTogdGhpcy5mcm9tIHx8IDBcbiAgICAgIH0sIG9wdHMpO1xuICAgICAgdmFyIG1heExlbmd0aCA9IFN0cmluZyhvcHRzLnRvKS5sZW5ndGg7XG4gICAgICBpZiAob3B0cy5tYXhMZW5ndGggIT0gbnVsbCkgbWF4TGVuZ3RoID0gTWF0aC5tYXgobWF4TGVuZ3RoLCBvcHRzLm1heExlbmd0aCk7XG4gICAgICBvcHRzLm1heExlbmd0aCA9IG1heExlbmd0aDtcbiAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKG9wdHMuZnJvbSkucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xuICAgICAgdmFyIHRvU3RyID0gU3RyaW5nKG9wdHMudG8pLnBhZFN0YXJ0KG1heExlbmd0aCwgJzAnKTtcbiAgICAgIHZhciBzYW1lQ2hhcnNDb3VudCA9IDA7XG5cbiAgICAgIHdoaWxlIChzYW1lQ2hhcnNDb3VudCA8IHRvU3RyLmxlbmd0aCAmJiB0b1N0cltzYW1lQ2hhcnNDb3VudF0gPT09IGZyb21TdHJbc2FtZUNoYXJzQ291bnRdKSB7XG4gICAgICAgICsrc2FtZUNoYXJzQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIG9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdChtYXhMZW5ndGggLSBzYW1lQ2hhcnNDb3VudCk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJhbmdlLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJpc0NvbXBsZXRlXCIsIHRoaXMpICYmIEJvb2xlYW4odGhpcy52YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJvdW5kYXJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYm91bmRhcmllcyhzdHIpIHtcbiAgICAgIHZhciBtaW5zdHIgPSAnJztcbiAgICAgIHZhciBtYXhzdHIgPSAnJztcblxuICAgICAgdmFyIF9yZWYgPSBzdHIubWF0Y2goL14oXFxEKikoXFxkKikoXFxEKikvKSB8fCBbXSxcbiAgICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDMpLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjJbMV0sXG4gICAgICAgICAgbnVtID0gX3JlZjJbMl07XG5cbiAgICAgIGlmIChudW0pIHtcbiAgICAgICAgbWluc3RyID0gJzAnLnJlcGVhdChwbGFjZWhvbGRlci5sZW5ndGgpICsgbnVtO1xuICAgICAgICBtYXhzdHIgPSAnOScucmVwZWF0KHBsYWNlaG9sZGVyLmxlbmd0aCkgKyBudW07XG4gICAgICB9XG5cbiAgICAgIG1pbnN0ciA9IG1pbnN0ci5wYWRFbmQodGhpcy5tYXhMZW5ndGgsICcwJyk7XG4gICAgICBtYXhzdHIgPSBtYXhzdHIucGFkRW5kKHRoaXMubWF4TGVuZ3RoLCAnOScpO1xuICAgICAgcmV0dXJuIFttaW5zdHIsIG1heHN0cl07XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvUHJlcGFyZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ByZXBhcmUoc3RyKSB7XG4gICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgc3RyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJkb1ByZXBhcmVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHIsIGZsYWdzKS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICAgICAgaWYgKCF0aGlzLmF1dG9maXgpIHJldHVybiBzdHI7XG4gICAgICB2YXIgZnJvbVN0ciA9IFN0cmluZyh0aGlzLmZyb20pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgICAgdmFyIHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgICAgdmFyIHZhbCA9IHRoaXMudmFsdWU7XG4gICAgICB2YXIgcHJlcFN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgc3RyLmxlbmd0aDsgKytjaSkge1xuICAgICAgICB2YXIgbmV4dFZhbCA9IHZhbCArIHByZXBTdHIgKyBzdHJbY2ldO1xuXG4gICAgICAgIHZhciBfdGhpcyRib3VuZGFyaWVzID0gdGhpcy5ib3VuZGFyaWVzKG5leHRWYWwpLFxuICAgICAgICAgICAgX3RoaXMkYm91bmRhcmllczIgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRib3VuZGFyaWVzLCAyKSxcbiAgICAgICAgICAgIG1pbnN0ciA9IF90aGlzJGJvdW5kYXJpZXMyWzBdLFxuICAgICAgICAgICAgbWF4c3RyID0gX3RoaXMkYm91bmRhcmllczJbMV07XG5cbiAgICAgICAgaWYgKE51bWJlcihtYXhzdHIpIDwgdGhpcy5mcm9tKSBwcmVwU3RyICs9IGZyb21TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTtlbHNlIGlmIChOdW1iZXIobWluc3RyKSA+IHRoaXMudG8pIHByZXBTdHIgKz0gdG9TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTtlbHNlIHByZXBTdHIgKz0gc3RyW2NpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXBTdHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAgQG92ZXJyaWRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRvVmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcbiAgICAgIHZhciBfZ2V0MjtcblxuICAgICAgdmFyIHN0ciA9IHRoaXMudmFsdWU7XG4gICAgICB2YXIgZmlyc3ROb25aZXJvID0gc3RyLnNlYXJjaCgvW14wXS8pO1xuICAgICAgaWYgKGZpcnN0Tm9uWmVybyA9PT0gLTEgJiYgc3RyLmxlbmd0aCA8PSB0aGlzLl9tYXRjaEZyb20pIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgX3RoaXMkYm91bmRhcmllczMgPSB0aGlzLmJvdW5kYXJpZXMoc3RyKSxcbiAgICAgICAgICBfdGhpcyRib3VuZGFyaWVzNCA9IF9zbGljZWRUb0FycmF5KF90aGlzJGJvdW5kYXJpZXMzLCAyKSxcbiAgICAgICAgICBtaW5zdHIgPSBfdGhpcyRib3VuZGFyaWVzNFswXSxcbiAgICAgICAgICBtYXhzdHIgPSBfdGhpcyRib3VuZGFyaWVzNFsxXTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZyb20gPD0gTnVtYmVyKG1heHN0cikgJiYgTnVtYmVyKG1pbnN0cikgPD0gdGhpcy50byAmJiAoX2dldDIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRSYW5nZS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXNrZWRSYW5nZTtcbn0oTWFza2VkUGF0dGVybik7XG5JTWFzay5NYXNrZWRSYW5nZSA9IE1hc2tlZFJhbmdlO1xuXG5leHBvcnQgeyBNYXNrZWRSYW5nZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBkIGFzIF9pbmhlcml0cywgZSBhcyBfY3JlYXRlU3VwZXIsIF8gYXMgX2NyZWF0ZUNsYXNzLCBhIGFzIF9jbGFzc0NhbGxDaGVjaywgZyBhcyBfZ2V0LCBoIGFzIF9nZXRQcm90b3R5cGVPZiB9IGZyb20gJy4uL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMtYTBiMzQ3NjQuanMnO1xuaW1wb3J0IE1hc2tlZCBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuLi9jb3JlL3V0aWxzLmpzJztcblxuLyoqIE1hc2tpbmcgYnkgUmVnRXhwICovXG5cbnZhciBNYXNrZWRSZWdFeHAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXNrZWQpIHtcbiAgX2luaGVyaXRzKE1hc2tlZFJlZ0V4cCwgX01hc2tlZCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRSZWdFeHApO1xuXG4gIGZ1bmN0aW9uIE1hc2tlZFJlZ0V4cCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkUmVnRXhwKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYXNrZWRSZWdFeHAsIFt7XG4gICAga2V5OiBcIl91cGRhdGVcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgIEBvdmVycmlkZVxuICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAqL1xuICAgIGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuICAgICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc2VhcmNoKG9wdHMubWFzaykgPj0gMDtcbiAgICAgIH07XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJlZ0V4cC5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFza2VkUmVnRXhwO1xufShNYXNrZWQpO1xuSU1hc2suTWFza2VkUmVnRXhwID0gTWFza2VkUmVnRXhwO1xuXG5leHBvcnQgeyBNYXNrZWRSZWdFeHAgYXMgZGVmYXVsdCB9O1xuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiAob2JqICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmXG4gICAgICAgIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQgPSB7fSwgc3JjID0ge30pIHtcbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gICAgYm9keToge30sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cigpIHsgfSxcbiAgICAgICAgbm9kZU5hbWU6ICcnLFxuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudCgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZSgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGltcG9ydE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICAgIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgICByZXR1cm4gZG9jO1xufVxuXG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlKCkgeyB9LFxuICAgICAgICBwdXNoU3RhdGUoKSB7IH0sXG4gICAgICAgIGdvKCkgeyB9LFxuICAgICAgICBiYWNrKCkgeyB9LFxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXIoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2UoKSB7IH0sXG4gICAgRGF0ZSgpIHsgfSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQoKSB7IH0sXG4gICAgY2xlYXJUaW1lb3V0KCkgeyB9LFxuICAgIG1hdGNoTWVkaWEoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGV4dGVuZCwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgc3NyRG9jdW1lbnQsIHNzcldpbmRvdyB9O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlID0gJ3dpbmRvdycsIGNvbnRhaW5lckVsKSB7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKHBvaW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcG9pbnRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG5cbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59IiwiaW1wb3J0IHNldEJyZWFrcG9pbnQgZnJvbSAnLi9zZXRCcmVha3BvaW50LmpzJztcbmltcG9ydCBnZXRCcmVha3BvaW50IGZyb20gJy4vZ2V0QnJlYWtwb2ludC5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnRcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbG9vcGVkU2xpZGVzID0gMCxcbiAgICBwYXJhbXMsXG4gICAgJGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcblxuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG5cbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcblxuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuXG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuXG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuXG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn0iLCJmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuXG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cblxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja092ZXJmbG93XG59OyIsImZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBjbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0Q2xhc3Nlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsXG4gICAgcGFyYW1zLFxuICAgIHJ0bCxcbiAgICAkZWwsXG4gICAgZGV2aWNlLFxuICAgIHN1cHBvcnRcbiAgfSA9IHN3aXBlcjsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdwb2ludGVyLWV2ZW50cyc6ICFzdXBwb3J0LnRvdWNoXG4gIH0sIHtcbiAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICB9LCB7XG4gICAgJ2F1dG9oZWlnaHQnOiBwYXJhbXMuYXV0b0hlaWdodFxuICB9LCB7XG4gICAgJ3J0bCc6IHJ0bFxuICB9LCB7XG4gICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICB9LCB7XG4gICAgJ2dyaWQtY29sdW1uJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbidcbiAgfSwge1xuICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWRcbiAgfSwge1xuICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gIH0sIHtcbiAgICAnY3NzLW1vZGUnOiBwYXJhbXMuY3NzTW9kZVxuICB9LCB7XG4gICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gICRlbC5hZGRDbGFzcyhbLi4uY2xhc3NOYW1lc10uam9pbignICcpKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59IiwiaW1wb3J0IGFkZENsYXNzZXMgZnJvbSAnLi9hZGRDbGFzc2VzLmpzJztcbmltcG9ydCByZW1vdmVDbGFzc2VzIGZyb20gJy4vcmVtb3ZlQ2xhc3Nlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgICRlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsIi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuLi9zaGFyZWQvZ2V0LXN1cHBvcnQuanMnO1xuaW1wb3J0IHsgZ2V0RGV2aWNlIH0gZnJvbSAnLi4vc2hhcmVkL2dldC1kZXZpY2UuanMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uL3NoYXJlZC9nZXQtYnJvd3Nlci5qcyc7XG5pbXBvcnQgUmVzaXplIGZyb20gJy4vbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMnO1xuaW1wb3J0IGV2ZW50c0VtaXR0ZXIgZnJvbSAnLi9ldmVudHMtZW1pdHRlci5qcyc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vdXBkYXRlL2luZGV4LmpzJztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnLi90cmFuc2l0aW9uL2luZGV4LmpzJztcbmltcG9ydCBzbGlkZSBmcm9tICcuL3NsaWRlL2luZGV4LmpzJztcbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcC9pbmRleC5qcyc7XG5pbXBvcnQgZ3JhYkN1cnNvciBmcm9tICcuL2dyYWItY3Vyc29yL2luZGV4LmpzJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9ldmVudHMvaW5kZXguanMnO1xuaW1wb3J0IGJyZWFrcG9pbnRzIGZyb20gJy4vYnJlYWtwb2ludHMvaW5kZXguanMnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9jbGFzc2VzL2luZGV4LmpzJztcbmltcG9ydCBpbWFnZXMgZnJvbSAnLi9pbWFnZXMvaW5kZXguanMnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgbW9kdWxlRXh0ZW5kUGFyYW1zIGZyb20gJy4vbW9kdWxlRXh0ZW5kUGFyYW1zLmpzJztcbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3NlcyxcbiAgaW1hZ2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIGlmIChwYXJhbXMuZWwgJiYgJChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgICQocGFyYW1zLmVsKS5lYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9IC8vIFN3aXBlciBJbnN0YW5jZVxuXG5cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcblxuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsTW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIHN3aXBlci5tb2R1bGVzLmZvckVhY2gobW9kID0+IHtcbiAgICAgIG1vZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcblxuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG5cbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpOyAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uQW55KSB7XG4gICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgfSAvLyBTYXZlIERvbSBsaWJcblxuXG4gICAgc3dpcGVyLiQgPSAkOyAvLyBFeHRlbmQgU3dpcGVyXG5cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiAkKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcblxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcblxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddO1xuICAgICAgICBjb25zdCBkZXNrdG9wID0gWydwb2ludGVyZG93bicsICdwb2ludGVybW92ZScsICdwb2ludGVydXAnXTtcbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcblxuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cblxuICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxKTtcbiAgICBjb25zdCBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgY29uc3QgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAobWF4IC0gbWluKSAqIHByb2dyZXNzICsgbWluO1xuICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cblxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cblxuICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3ID0gJ2N1cnJlbnQnLCBleGFjdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgIGxldCBicmVha0xvb3A7XG5cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcHY7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyOyAvLyBCcmVha3BvaW50c1xuXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIGxldCB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuXG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG5cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCkuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgbW91bnQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7IC8vIEZpbmQgZWxcblxuICAgIGNvbnN0ICRlbCA9ICQoZWwgfHwgc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuXG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9ICQoZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKSk7IC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG5cbiAgICAgICAgcmVzLmNoaWxkcmVuID0gb3B0aW9ucyA9PiAkZWwuY2hpbGRyZW4ob3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgfTsgLy8gRmluZCBXcmFwcGVyXG5cblxuICAgIGxldCAkd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuXG4gICAgaWYgKCR3cmFwcGVyRWwubGVuZ3RoID09PSAwICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICR3cmFwcGVyRWwgPSAkKHdyYXBwZXIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcztcbiAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAkZWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbCxcbiAgICAgICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7IC8vIFNldCBicmVha3BvaW50XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9IC8vIEFkZCBDbGFzc2VzXG5cblxuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7IC8vIENyZWF0ZSBsb29wXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH0gLy8gVXBkYXRlIHNpemVcblxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsgLy8gVXBkYXRlIHNsaWRlc1xuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9IC8vIFNldCBHcmFiIEN1cnNvclxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgfSAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG5cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSAvLyBBdHRhY2ggZXZlbnRzXG5cblxuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTsgLy8gSW5pdCBGbGFnXG5cbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlOyAvLyBFbWl0XG5cbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSA9IHRydWUsIGNsZWFuU3R5bGVzID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgJGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7IC8vIEluaXQgRmxhZ1xuXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7IC8vIERldGFjaCBldmVudHNcblxuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wXG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH0gLy8gQ2xlYW51cCBzdHlsZXNcblxuXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoW3BhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpOyAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcblxuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuXG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG5cbn1cblxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjsiLCJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgbG9vcEZpbGxHcm91cFdpdGhCbGFuazogZmFsc2UsXG4gIGxvb3BQcmV2ZW50c1NsaWRlOiB0cnVlLFxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG5cbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlciguLi5hcmdzKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcblxuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcblxuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBlbWl0KC4uLmFyZ3MpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuXG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG5cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCBvblRvdWNoU3RhcnQgZnJvbSAnLi9vblRvdWNoU3RhcnQuanMnO1xuaW1wb3J0IG9uVG91Y2hNb3ZlIGZyb20gJy4vb25Ub3VjaE1vdmUuanMnO1xuaW1wb3J0IG9uVG91Y2hFbmQgZnJvbSAnLi9vblRvdWNoRW5kLmpzJztcbmltcG9ydCBvblJlc2l6ZSBmcm9tICcuL29uUmVzaXplLmpzJztcbmltcG9ydCBvbkNsaWNrIGZyb20gJy4vb25DbGljay5qcyc7XG5pbXBvcnQgb25TY3JvbGwgZnJvbSAnLi9vblNjcm9sbC5qcyc7XG5sZXQgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hFdmVudHMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZSxcbiAgICBzdXBwb3J0XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kOyAvLyBUb3VjaCBFdmVudHNcblxuICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnRbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50W2RvbU1ldGhvZF0odG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogY2FwdHVyZSk7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtkb21NZXRob2RdKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHN1cHBvcnRcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuXG4gIGlmIChzdXBwb3J0LnRvdWNoICYmICFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZHVtbXlFdmVudExpc3RlbmVyKTtcbiAgICBkdW1teUV2ZW50QXR0YWNoZWQgPSB0cnVlO1xuICB9XG5cbiAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG59XG5cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjsgLy8gQnJlYWtwb2ludHNcblxuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfSAvLyBTYXZlIGxvY2tzXG5cblxuICBjb25zdCB7XG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjsgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfSAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG5cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAtMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG5cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59IiwiaW1wb3J0IHsgbm93LCBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuXG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfSAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcblxuXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9IC8vIFRpbWUgZGlmZlxuXG5cbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTsgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG5cbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0KTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG5cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG5cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuXG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvc1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcblxuXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuXG5cbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcblxuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgbm93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZS50eXBlICE9PSAndG91Y2htb3ZlJykgcmV0dXJuO1xuICBjb25zdCB0YXJnZXRUb3VjaCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzICYmIChlLnRhcmdldFRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVkgOiBlLnBhZ2VZO1xuXG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgLy8gaXNNb3ZlZCA9IHRydWU7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuXG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIGNvbnN0IGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChkaWZmWCAqKiAyICsgZGlmZlkgKiogMikgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cblxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJyk7XG4gICAgfVxuXG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cblxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAhc3dpcGVyLmFsbG93U2xpZGVOZXh0KSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfSAvLyBUaHJlc2hvbGRcblxuXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47IC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH0gLy8gVXBkYXRlIHByb2dyZXNzXG5cblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTsgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7IC8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuXG5mdW5jdGlvbiBjbG9zZXN0RWxlbWVudChzZWxlY3RvciwgYmFzZSA9IHRoaXMpIHtcbiAgZnVuY3Rpb24gX19jbG9zZXN0RnJvbShlbCkge1xuICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDtcbiAgICBjb25zdCBmb3VuZCA9IGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cblxuICByZXR1cm4gX19jbG9zZXN0RnJvbShiYXNlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgfVxuXG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcblxuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHN3aXBlci53cmFwcGVyRWwpLmxlbmd0aCkgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjsgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG5cbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuXG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50LnBhdGggJiYgZXZlbnQucGF0aFswXSkge1xuICAgICR0YXJnZXRFbCA9ICQoZXZlbnQucGF0aFswXSk7XG4gIH1cblxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTsgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG5cbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIGUudGFyZ2V0KSA6ICR0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKVswXSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVEZXRlY3Rpb247XG4gIGNvbnN0IGVkZ2VTd2lwZVRocmVzaG9sZCA9IHBhcmFtcy5lZGdlU3dpcGVUaHJlc2hvbGQgfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZVRocmVzaG9sZDtcblxuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuXG4gICAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICEkdGFyZ2V0RWxbMF0uaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufSIsImltcG9ydCBzZXRHcmFiQ3Vyc29yIGZyb20gJy4vc2V0R3JhYkN1cnNvci5qcyc7XG5pbXBvcnQgdW5zZXRHcmFiQ3Vyc29yIGZyb20gJy4vdW5zZXRHcmFiQ3Vyc29yLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xufSIsImltcG9ydCBsb2FkSW1hZ2UgZnJvbSAnLi9sb2FkSW1hZ2UuanMnO1xuaW1wb3J0IHByZWxvYWRJbWFnZXMgZnJvbSAnLi9wcmVsb2FkSW1hZ2VzLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZEltYWdlLFxuICBwcmVsb2FkSW1hZ2VzXG59OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IGltYWdlO1xuXG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICB9XG5cbiAgY29uc3QgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgIT09IHVuZGVmaW5lZCkgc3dpcGVyLmltYWdlc0xvYWRlZCArPSAxO1xuXG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLmltYWdlc1RvTG9hZFtpXTtcbiAgICBzd2lwZXIubG9hZEltYWdlKGltYWdlRWwsIGltYWdlRWwuY3VycmVudFNyYyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3JjJyksIGltYWdlRWwuc3Jjc2V0IHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSwgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSwgdHJ1ZSwgb25SZWFkeSk7XG4gIH1cbn0iLCJpbXBvcnQgbG9vcENyZWF0ZSBmcm9tICcuL2xvb3BDcmVhdGUuanMnO1xuaW1wb3J0IGxvb3BGaXggZnJvbSAnLi9sb29wRml4LmpzJztcbmltcG9ydCBsb29wRGVzdHJveSBmcm9tICcuL2xvb3BEZXN0cm95LmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcENyZWF0ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjsgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG5cbiAgY29uc3QgJHNlbGVjdG9yID0gJHdyYXBwZXJFbC5jaGlsZHJlbigpLmxlbmd0aCA+IDAgPyAkKCR3cmFwcGVyRWwuY2hpbGRyZW4oKVswXS5wYXJlbnROb2RlKSA6ICR3cmFwcGVyRWw7XG4gICRzZWxlY3Rvci5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9YCkucmVtb3ZlKCk7XG4gIGxldCBzbGlkZXMgPSAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuXG4gIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIGNvbnN0IGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICAgIGlmIChibGFua1NsaWRlc051bSAhPT0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsYW5rU2xpZGVzTnVtOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoYCR7cGFyYW1zLnNsaWRlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKTtcbiAgICAgICAgJHNlbGVjdG9yLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZXMgPSAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuXG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgY29uc3QgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXMgPSBbXTtcbiAgc2xpZGVzLmVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlID0gJChlbCk7XG5cbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICBzbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgfSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkc2VsZWN0b3IuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgJHNlbGVjdG9yLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzXG4gIH0gPSBzd2lwZXI7XG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSwuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVCbGFua0NsYXNzfWApLnJlbW92ZSgpO1xuICBzbGlkZXMucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRml4KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgc2xpZGVzLFxuICAgIGxvb3BlZFNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbmFwR3JpZCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICB9ID0gc3dpcGVyO1xuICBsZXQgbmV3SW5kZXg7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGNvbnN0IHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICBjb25zdCBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTsgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuXG4gIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIG5ld0luZGV4ID0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcyAqIDMgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVJbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgLy8gRml4IEZvciBQb3NpdGl2ZSBPdmVyc2xpZGluZ1xuICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn0iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaiA9IHt9KSB7XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGF1dG86IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICB9O1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT2JzZXJ2ZXIoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGNvbnN0IGF0dGFjaCA9ICh0YXJnZXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcblxuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIGF0dGFjaChzd2lwZXIuJGVsWzBdLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTsgLy8gT2JzZXJ2ZSB3cmFwcGVyXG5cbiAgICBhdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHtcbiAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcblxuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzaXplKHtcbiAgc3dpcGVyLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcblxuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgZW50cmllcy5mb3JFYWNoKCh7XG4gICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgdGFyZ2V0XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgcmVzaXplSGFuZGxlcigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcblxuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuXG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnJlc2l6ZU9ic2VydmVyICYmIHR5cGVvZiB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59IiwiaW1wb3J0IHNsaWRlVG8gZnJvbSAnLi9zbGlkZVRvLmpzJztcbmltcG9ydCBzbGlkZVRvTG9vcCBmcm9tICcuL3NsaWRlVG9Mb29wLmpzJztcbmltcG9ydCBzbGlkZU5leHQgZnJvbSAnLi9zbGlkZU5leHQuanMnO1xuaW1wb3J0IHNsaWRlUHJldiBmcm9tICcuL3NsaWRlUHJldi5qcyc7XG5pbXBvcnQgc2xpZGVSZXNldCBmcm9tICcuL3NsaWRlUmVzZXQuanMnO1xuaW1wb3J0IHNsaWRlVG9DbG9zZXN0IGZyb20gJy4vc2xpZGVUb0Nsb3Nlc3QuanMnO1xuaW1wb3J0IHNsaWRlVG9DbGlja2VkU2xpZGUgZnJvbSAnLi9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2xpZGVUbyxcbiAgc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dCxcbiAgc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZVxufTsiLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgYW5pbWF0aW5nLFxuICAgIGVuYWJsZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcbiAgbGV0IHBlckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cblxuICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYW5pbWF0aW5nLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuXG4gIGxldCBwcmV2SW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJpbXBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGluZGV4ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlICdpbmRleCcgYXJndW1lbnQgY2Fubm90IGhhdmUgdHlwZSBvdGhlciB0aGFuICdudW1iZXInIG9yICdzdHJpbmcnLiBbJHt0eXBlb2YgaW5kZXh9XSBnaXZlbi5gKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGBpbmRleGAgYXJndW1lbnQgY29udmVydGVkIGZyb20gYHN0cmluZ2AgdG8gYG51bWJlcmAuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGBpbmRleGAgYXJndW1lbnQgaXMgYSB2YWxpZCBgbnVtYmVyYFxuICAgICAqIGFmdGVyIGJlaW5nIGNvbnZlcnRlZCBmcm9tIHRoZSBgc3RyaW5nYCB0eXBlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgY29uc3QgaXNWYWxpZE51bWJlciA9IGlzRmluaXRlKGluZGV4QXNOdW1iZXIpO1xuXG4gICAgaWYgKCFpc1ZhbGlkTnVtYmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBwYXNzZWQtaW4gJ2luZGV4JyAoc3RyaW5nKSBjb3VsZG4ndCBiZSBjb252ZXJ0ZWQgdG8gJ251bWJlcicuIFske2luZGV4fV0gZ2l2ZW4uYCk7XG4gICAgfSAvLyBLbm93aW5nIHRoYXQgdGhlIGNvbnZlcnRlZCBgaW5kZXhgIGlzIGEgdmFsaWQgbnVtYmVyLFxuICAgIC8vIHdlIGNhbiB1cGRhdGUgdGhlIG9yaWdpbmFsIGFyZ3VtZW50J3MgdmFsdWUuXG5cblxuICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgfVxuXG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiB8fCAhZW5hYmxlZCAmJiAhaW50ZXJuYWwgJiYgIWluaXRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7IC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG5cbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuXG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHcmlkKSAvIDIpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnOyAvLyBVcGRhdGUgSW5kZXhcblxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7IC8vIFVwZGF0ZSBIZWlnaHRcblxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuXG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5fc3dpcGVySW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IHQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2UgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KWApLmVxKDApLmluZGV4KCk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwsIHRocmVzaG9sZCA9IDAuNSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpO1xuICBjb25zdCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoaW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcblxuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcblxuICAgIGlmICh0cmFuc2xhdGUgLSBwcmV2U25hcCA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBuZXdJbmRleCA9IGluZGV4O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KHtcbiAgc3dpcGVyLFxuICBydW5DYWxsYmFja3MsXG4gIGRpcmVjdGlvbixcbiAgc3RlcFxufSkge1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoYHNsaWRlQ2hhbmdlVHJhbnNpdGlvbiR7c3RlcH1gKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB0cmFuc2l0aW9uRW1pdCBmcm9tICcuL3RyYW5zaXRpb25FbWl0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnRW5kJ1xuICB9KTtcbn0iLCJpbXBvcnQgdHJhbnNpdGlvbkVtaXQgZnJvbSAnLi90cmFuc2l0aW9uRW1pdC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufSIsImltcG9ydCB7IGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneScpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB0cmFuc2xhdGUsXG4gICAgJHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGxldCBjdXJyZW50VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlKCR3cmFwcGVyRWxbMF0sIGF4aXMpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59IiwiaW1wb3J0IGdldFRyYW5zbGF0ZSBmcm9tICcuL2dldFRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgc2V0VHJhbnNsYXRlIGZyb20gJy4vc2V0VHJhbnNsYXRlLmpzJztcbmltcG9ydCBtaW5UcmFuc2xhdGUgZnJvbSAnLi9taW5UcmFuc2xhdGUuanMnO1xuaW1wb3J0IG1heFRyYW5zbGF0ZSBmcm9tICcuL21heFRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgdHJhbnNsYXRlVG8gZnJvbSAnLi90cmFuc2xhdGVUby5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYCk7XG4gIH1cblxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7IC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG5cbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG5cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59IiwiaW1wb3J0IHsgYW5pbWF0ZUNTU01vZGVTY3JvbGwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBjb25zdCBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIGxldCBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG5cbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB1cGRhdGVTaXplIGZyb20gJy4vdXBkYXRlU2l6ZS5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzIGZyb20gJy4vdXBkYXRlU2xpZGVzLmpzJztcbmltcG9ydCB1cGRhdGVBdXRvSGVpZ2h0IGZyb20gJy4vdXBkYXRlQXV0b0hlaWdodC5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzT2Zmc2V0IGZyb20gJy4vdXBkYXRlU2xpZGVzT2Zmc2V0LmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzJztcbmltcG9ydCB1cGRhdGVQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVByb2dyZXNzLmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNDbGFzc2VzIGZyb20gJy4vdXBkYXRlU2xpZGVzQ2xhc3Nlcy5qcyc7XG5pbXBvcnQgdXBkYXRlQWN0aXZlSW5kZXggZnJvbSAnLi91cGRhdGVBY3RpdmVJbmRleC5qcyc7XG5pbXBvcnQgdXBkYXRlQ2xpY2tlZFNsaWRlIGZyb20gJy4vdXBkYXRlQ2xpY2tlZFNsaWRlLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbmFwR3JpZCxcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgcmVhbEluZGV4OiBwcmV2aW91c1JlYWxJbmRleCxcbiAgICBzbmFwSW5kZXg6IHByZXZpb3VzU25hcEluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICBsZXQgc25hcEluZGV4O1xuXG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9IC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG5cblxuICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG5cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEdldCByZWFsIGluZGV4XG5cblxuICBjb25zdCByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgc25hcEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4XG4gIH0pO1xuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuXG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcblxuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG5cbiAgY29uc3QgZ2V0U2xpZGVCeUluZGV4ID0gaW5kZXggPT4ge1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA9PT0gaW5kZXgpWzBdO1xuICAgIH1cblxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXTtcbiAgfTsgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcblxuXG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLmVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfSAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9IC8vIFVwZGF0ZSBIZWlnaHRcblxuXG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCBzbGlkZSA9ICQoZSkuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClbMF07XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuXG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG5cbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCAkZWwgPSBzd2lwZXIuJGVsO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIGlmICh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgfHwgaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gU3VidHJhY3QgcGFkZGluZ3NcblxuXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHNldENTU1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9IC8vIHByZXR0aWVyLWlnbm9yZVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjsgLy8gcmVzZXQgbWFyZ2luc1xuXG4gIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgIG1hcmdpbkJvdHRvbTogJycsXG4gICAgbWFyZ2luVG9wOiAnJ1xuICB9KTtlbHNlIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICBtYXJnaW5Cb3R0b206ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7IC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG5cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcblxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlc0xlbmd0aCk7XG4gIH0gLy8gQ2FsYyBzbGlkZXNcblxuXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnO1xuICB9KS5sZW5ndGggPiAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuXG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShpLCBzbGlkZSwgc2xpZGVzTGVuZ3RoLCBnZXREaXJlY3Rpb25MYWJlbCk7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgYDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGVbMF07XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuXG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXTogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQsIGdldERpcmVjdGlvbkxhYmVsKTtcbiAgfSAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuXG5cbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jc3Moe1xuICAgICAgW2tleV06IGAke3NwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcblxuICAgIGlmIChhbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cblxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgJHdyYXBwZXJFbCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICByZWFsSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgc2xpZGVzLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVQcmV2Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzc31gKTtcbiAgbGV0IGFjdGl2ZVNsaWRlO1xuXG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9IC8vIEFjdGl2ZSBjbGFzc2VzXG5cblxuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICB9IC8vIE5leHQgU2xpZGVcblxuXG4gIGxldCBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9IC8vIFByZXYgU2xpZGVcblxuXG4gIGxldCBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgcHJldlNsaWRlID0gc2xpZGVzLmVxKC0xKTtcbiAgICBwcmV2U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3ByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXNcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcblxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgfVxuXG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cblxuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xufSIsImltcG9ydCBjbGFzc2VzVG9TZWxlY3RvciBmcm9tICcuLi8uLi9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEExMXkoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBhMTF5OiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICBmaXJzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGZpcnN0IHNsaWRlJyxcbiAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgIHNsaWRlTGFiZWxNZXNzYWdlOiAne3tpbmRleH19IC8ge3tzbGlkZXNMZW5ndGh9fScsXG4gICAgICBjb250YWluZXJNZXNzYWdlOiBudWxsLFxuICAgICAgY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgIGl0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgc2xpZGVSb2xlOiAnZ3JvdXAnXG4gICAgfVxuICB9KTtcbiAgbGV0IGxpdmVSZWdpb24gPSBudWxsO1xuXG4gIGZ1bmN0aW9uIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gbGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKCcnKTtcbiAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihzaXplID0gMTYpIHtcbiAgICBjb25zdCByYW5kb21DaGFyID0gKCkgPT4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTtcblxuICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJzAnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VFbE5vdEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnLTEnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAkZWwuYXR0cigncm9sZScsIHJvbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRWxSb2xlRGVzY3JpcHRpb24oJGVsLCBkZXNjcmlwdGlvbikge1xuICAgICRlbC5hdHRyKCdhcmlhLXJvbGVkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVsQ29udHJvbHMoJGVsLCBjb250cm9scykge1xuICAgICRlbC5hdHRyKCdhcmlhLWNvbnRyb2xzJywgY29udHJvbHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFbElkKCRlbCwgaWQpIHtcbiAgICAkZWwuYXR0cignaWQnLCBpZCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFbExpdmUoJGVsLCBsaXZlKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGl2ZScsIGxpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmFibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRW50ZXJPclNwYWNlS2V5KGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMyAmJiBlLmtleUNvZGUgIT09IDMyKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGNvbnN0ICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIG5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmICR0YXJnZXRFbC5pcyhjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkge1xuICAgICAgJHRhcmdldEVsWzBdLmNsaWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIGRpc2FibGVFbCgkcHJldkVsKTtcbiAgICAgICAgbWFrZUVsTm90Rm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIG1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgZGlzYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICBtYWtlRWxOb3RGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmFibGVFbCgkbmV4dEVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc1BhZ2luYXRpb24oKSB7XG4gICAgcmV0dXJuIHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkge1xuICAgIHJldHVybiBoYXNQYWdpbmF0aW9uKCkgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmICghaGFzUGFnaW5hdGlvbigpKSByZXR1cm47XG4gICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5lYWNoKGJ1bGxldEVsID0+IHtcbiAgICAgIGNvbnN0ICRidWxsZXRFbCA9ICQoYnVsbGV0RWwpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSkge1xuICAgICAgICBtYWtlRWxGb2N1c2FibGUoJGJ1bGxldEVsKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBhZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgYWRkRWxMYWJlbCgkYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sICRidWxsZXRFbC5pbmRleCgpICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgkYnVsbGV0RWwuaXMoYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRBY3RpdmVDbGFzc31gKSkge1xuICAgICAgICAkYnVsbGV0RWwuYXR0cignYXJpYS1jdXJyZW50JywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRidWxsZXRFbC5yZW1vdmVBdHRyKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGluaXROYXZFbCA9ICgkZWwsIHdyYXBwZXJJZCwgbWVzc2FnZSkgPT4ge1xuICAgIG1ha2VFbEZvY3VzYWJsZSgkZWwpO1xuXG4gICAgaWYgKCRlbFswXS50YWdOYW1lICE9PSAnQlVUVE9OJykge1xuICAgICAgYWRkRWxSb2xlKCRlbCwgJ2J1dHRvbicpO1xuICAgICAgJGVsLm9uKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH1cblxuICAgIGFkZEVsTGFiZWwoJGVsLCBtZXNzYWdlKTtcbiAgICBhZGRFbENvbnRyb2xzKCRlbCwgd3JhcHBlcklkKTtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBzd2lwZXIuJGVsLmFwcGVuZChsaXZlUmVnaW9uKTsgLy8gQ29udGFpbmVyXG5cbiAgICBjb25zdCAkY29udGFpbmVyRWwgPSBzd2lwZXIuJGVsO1xuXG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbigkY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsTGFiZWwoJGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgfSAvLyBXcmFwcGVyXG5cblxuICAgIGNvbnN0ICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICBjb25zdCB3cmFwcGVySWQgPSAkd3JhcHBlckVsLmF0dHIoJ2lkJykgfHwgYHN3aXBlci13cmFwcGVyLSR7Z2V0UmFuZG9tTnVtYmVyKDE2KX1gO1xuICAgIGNvbnN0IGxpdmUgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/ICdvZmYnIDogJ3BvbGl0ZSc7XG4gICAgYWRkRWxJZCgkd3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgIGFkZEVsTGl2ZSgkd3JhcHBlckVsLCBsaXZlKTsgLy8gU2xpZGVcblxuICAgIGlmIChwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgYWRkRWxSb2xlKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+ICFlbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKChzbGlkZUVsLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSAkKHNsaWRlRWwpO1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHBhcnNlSW50KCRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA6IGluZGV4O1xuICAgICAgY29uc3QgYXJpYUxhYmVsTWVzc2FnZSA9IHBhcmFtcy5zbGlkZUxhYmVsTWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIHNsaWRlSW5kZXggKyAxKS5yZXBsYWNlKC9cXHtcXHtzbGlkZXNMZW5ndGhcXH1cXH0vLCBzbGlkZXNMZW5ndGgpO1xuICAgICAgYWRkRWxMYWJlbCgkc2xpZGVFbCwgYXJpYUxhYmVsTWVzc2FnZSk7XG4gICAgfSk7IC8vIE5hdmlnYXRpb25cblxuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgaW5pdE5hdkVsKCRuZXh0RWwsIHdyYXBwZXJJZCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7XG4gICAgICBpbml0TmF2RWwoJHByZXZFbCwgd3JhcHBlcklkLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgfSAvLyBQYWdpbmF0aW9uXG5cblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vbigna2V5ZG93bicsIGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcyksIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChsaXZlUmVnaW9uICYmIGxpdmVSZWdpb24ubGVuZ3RoID4gMCkgbGl2ZVJlZ2lvbi5yZW1vdmUoKTtcbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkge1xuICAgICAgJHByZXZFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWw7XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9IC8vIFBhZ2luYXRpb25cblxuXG4gICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9mZigna2V5ZG93bicsIGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcyksIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG4gIH1cblxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBsaXZlUmVnaW9uID0gJChgPHNwYW4gY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzc31cIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIj48L3NwYW4+YCk7XG4gIH0pO1xuICBvbignYWZ0ZXJJbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlTmF2aWdhdGlvbigpO1xuICB9KTtcbiAgb24oJ3RvRWRnZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlTmF2aWdhdGlvbigpO1xuICB9KTtcbiAgb24oJ2Zyb21FZGdlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICB1cGRhdGVOYXZpZ2F0aW9uKCk7XG4gIH0pO1xuICBvbigncGFnaW5hdGlvblVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG59IiwiLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG5cbi8qIGVzbGludCBuby11c2UtYmVmb3JlLWRlZmluZTogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEF1dG9wbGF5KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGxldCB0aW1lb3V0O1xuICBzd2lwZXIuYXV0b3BsYXkgPSB7XG4gICAgcnVubmluZzogZmFsc2UsXG4gICAgcGF1c2VkOiBmYWxzZVxuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcnVuKCkge1xuICAgIGNvbnN0ICRhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIGxldCBkZWxheSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG5cbiAgICBpZiAoJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSkge1xuICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICBsZXQgYXV0b3BsYXlSZXN1bHQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJ1bigpO2Vsc2UgaWYgKGF1dG9wbGF5UmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBydW4oKTtcbiAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICBpZiAodHlwZW9mIHRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICBydW4oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgdGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gZmFsc2U7XG4gICAgZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZShzcGVlZCkge1xuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkgcmV0dXJuO1xuICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG5cbiAgICBpZiAoc3BlZWQgPT09IDAgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHJ1bigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBbJ3RyYW5zaXRpb25lbmQnLCAnd2Via2l0VHJhbnNpdGlvbkVuZCddLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25WaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBwYXVzZSgpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICBydW4oKTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZSkge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSByZXR1cm47XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBzd2lwZXIuJHdyYXBwZXJFbFswXSkgcmV0dXJuO1xuICAgIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvblRyYW5zaXRpb25FbmQpO1xuICAgIH0pO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcblxuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVuKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBzdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdXNlKCk7XG4gICAgfVxuXG4gICAgWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnXS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgcnVuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2hNb3VzZUV2ZW50cygpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5wYXVzZU9uTW91c2VFbnRlcikge1xuICAgICAgc3dpcGVyLiRlbC5vbignbW91c2VlbnRlcicsIG9uTW91c2VFbnRlcik7XG4gICAgICBzd2lwZXIuJGVsLm9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXRhY2hNb3VzZUV2ZW50cygpIHtcbiAgICBzd2lwZXIuJGVsLm9mZignbW91c2VlbnRlcicsIG9uTW91c2VFbnRlcik7XG4gICAgc3dpcGVyLiRlbC5vZmYoJ21vdXNlbGVhdmUnLCBvbk1vdXNlTGVhdmUpO1xuICB9XG5cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgc3RhcnQoKTtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgYXR0YWNoTW91c2VFdmVudHMoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYmVmb3JlVHJhbnNpdGlvblN0YXJ0JywgKF9zLCBzcGVlZCwgaW50ZXJuYWwpID0+IHtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZXJGaXJzdE1vdmUnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICBzdG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uKCd0b3VjaEVuZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgJiYgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHJ1bigpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRldGFjaE1vdXNlRXZlbnRzKCk7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5hdXRvcGxheSwge1xuICAgIHBhdXNlLFxuICAgIHJ1bixcbiAgICBzdGFydCxcbiAgICBzdG9wXG4gIH0pO1xufSIsIi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbmltcG9ydCB7IG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRyb2xsZXIoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjb250cm9sbGVyOiB7XG4gICAgICBjb250cm9sOiB1bmRlZmluZWQsXG4gICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgIGJ5OiAnc2xpZGUnIC8vIG9yICdjb250YWluZXInXG5cbiAgICB9XG4gIH0pO1xuICBzd2lwZXIuY29udHJvbGxlciA9IHtcbiAgICBjb250cm9sOiB1bmRlZmluZWRcbiAgfTtcblxuICBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgIGNvbnN0IGJpbmFyeVNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgIGxldCBtYXhJbmRleDtcbiAgICAgIGxldCBtaW5JbmRleDtcbiAgICAgIGxldCBndWVzcztcbiAgICAgIHJldHVybiAoYXJyYXksIHZhbCkgPT4ge1xuICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcblxuICAgICAgICAgIGlmIChhcnJheVtndWVzc10gPD0gdmFsKSB7XG4gICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXhJbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxOyAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuXG4gICAgbGV0IGkxO1xuICAgIGxldCBpMztcblxuICAgIHRoaXMuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh4Mikge1xuICAgICAgaWYgKCF4MikgcmV0dXJuIDA7IC8vIEdldCB0aGUgaW5kZXhlcyBvZiB4MSBhbmQgeDMgKHRoZSBhcnJheSBpbmRleGVzIGJlZm9yZSBhbmQgYWZ0ZXIgZ2l2ZW4geDIpOlxuXG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxOyAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuXG4gICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cblxuXG4gIGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBuZXcgTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDogbmV3IExpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShfdCwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IG11bHRpcGxpZXI7XG4gICAgbGV0IGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTsgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcblxuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gLXN3aXBlci5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdHJhbnNsYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250cm9sbGVkVHJhbnNsYXRlIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllciArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG5cbiAgICAgIGMudXBkYXRlUHJvZ3Jlc3MoY29udHJvbGxlZFRyYW5zbGF0ZSk7XG4gICAgICBjLnNldFRyYW5zbGF0ZShjb250cm9sbGVkVHJhbnNsYXRlLCBzd2lwZXIpO1xuICAgICAgYy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgYy51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IGk7XG5cbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG5cbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuXG4gICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgIGMubG9vcEZpeCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVTcGxpbmUoKSB7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgIH1cbiAgfVxuXG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgfSk7XG4gIG9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgcmVtb3ZlU3BsaW5lKCk7XG4gIH0pO1xuICBvbigncmVzaXplJywgKCkgPT4ge1xuICAgIHJlbW92ZVNwbGluZSgpO1xuICB9KTtcbiAgb24oJ29ic2VydmVyVXBkYXRlJywgKCkgPT4ge1xuICAgIHJlbW92ZVNwbGluZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsIChfcywgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpID0+IHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpID0+IHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuY29udHJvbGxlciwge1xuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uXG4gIH0pO1xufSIsImltcG9ydCBjcmVhdGVTaGFkb3cgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cuanMnO1xuaW1wb3J0IGVmZmVjdEluaXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC1pbml0LmpzJztcbmltcG9ydCBlZmZlY3RUYXJnZXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQuanMnO1xuaW1wb3J0IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDYXJkcyh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGNhcmRzRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICB0cmFuc2Zvcm1FbDogbnVsbFxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNhcmRzRWZmZWN0O1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YXJ0VHJhbnNsYXRlLFxuICAgICAgaXNUb3VjaGVkXG4gICAgfSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgY29uc3QgY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC00KSwgNCk7XG4gICAgICBsZXQgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGVYKCR7c3dpcGVyLm1pblRyYW5zbGF0ZSgpfXB4KWApO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgb2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgbGV0IHRYID0gc3dpcGVyLnBhcmFtcy5jc3NNb2RlID8gLW9mZnNldCAtIHN3aXBlci50cmFuc2xhdGUgOiAtb2Zmc2V0O1xuICAgICAgbGV0IHRZID0gMDtcbiAgICAgIGNvbnN0IHRaID0gLTEwMCAqIE1hdGguYWJzKHByb2dyZXNzKTtcbiAgICAgIGxldCBzY2FsZSA9IDE7XG4gICAgICBsZXQgcm90YXRlID0gLTIgKiBwcm9ncmVzcztcbiAgICAgIGxldCB0WEFkZCA9IDggLSBNYXRoLmFicyhwcm9ncmVzcykgKiAwLjc1O1xuICAgICAgY29uc3QgaXNTd2lwZVRvTmV4dCA9IChpID09PSBhY3RpdmVJbmRleCB8fCBpID09PSBhY3RpdmVJbmRleCAtIDEpICYmIHByb2dyZXNzID4gMCAmJiBwcm9ncmVzcyA8IDEgJiYgKGlzVG91Y2hlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpICYmIGN1cnJlbnRUcmFuc2xhdGUgPCBzdGFydFRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IGlzU3dpcGVUb1ByZXYgPSAoaSA9PT0gYWN0aXZlSW5kZXggfHwgaSA9PT0gYWN0aXZlSW5kZXggKyAxKSAmJiBwcm9ncmVzcyA8IDAgJiYgcHJvZ3Jlc3MgPiAtMSAmJiAoaXNUb3VjaGVkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgJiYgY3VycmVudFRyYW5zbGF0ZSA+IHN0YXJ0VHJhbnNsYXRlO1xuXG4gICAgICBpZiAoaXNTd2lwZVRvTmV4dCB8fCBpc1N3aXBlVG9QcmV2KSB7XG4gICAgICAgIGNvbnN0IHN1YlByb2dyZXNzID0gKDEgLSBNYXRoLmFicygoTWF0aC5hYnMocHJvZ3Jlc3MpIC0gMC41KSAvIDAuNSkpICoqIDAuNTtcbiAgICAgICAgcm90YXRlICs9IC0yOCAqIHByb2dyZXNzICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHNjYWxlICs9IC0wLjUgKiBzdWJQcm9ncmVzcztcbiAgICAgICAgdFhBZGQgKz0gOTYgKiBzdWJQcm9ncmVzcztcbiAgICAgICAgdFkgPSBgJHstMjUgKiBzdWJQcm9ncmVzcyAqIE1hdGguYWJzKHByb2dyZXNzKX0lYDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgICAvLyBuZXh0XG4gICAgICAgIHRYID0gYGNhbGMoJHt0WH1weCArICgke3RYQWRkICogTWF0aC5hYnMocHJvZ3Jlc3MpfSUpKWA7XG4gICAgICB9IGVsc2UgaWYgKHByb2dyZXNzID4gMCkge1xuICAgICAgICAvLyBwcmV2XG4gICAgICAgIHRYID0gYGNhbGMoJHt0WH1weCArICgtJHt0WEFkZCAqIE1hdGguYWJzKHByb2dyZXNzKX0lKSlgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdFggPSBgJHt0WH1weGA7XG4gICAgICB9XG5cbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGNvbnN0IHByZXZZID0gdFk7XG4gICAgICAgIHRZID0gdFg7XG4gICAgICAgIHRYID0gcHJldlk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlU3RyaW5nID0gcHJvZ3Jlc3MgPCAwID8gYCR7MSArICgxIC0gc2NhbGUpICogcHJvZ3Jlc3N9YCA6IGAkezEgLSAoMSAtIHNjYWxlKSAqIHByb2dyZXNzfWA7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgXG4gICAgICAgIHRyYW5zbGF0ZTNkKCR7dFh9LCAke3RZfSwgJHt0Wn1weClcbiAgICAgICAgcm90YXRlWigke3JvdGF0ZX1kZWcpXG4gICAgICAgIHNjYWxlKCR7c2NhbGVTdHJpbmd9KVxuICAgICAgYDtcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0ICRzaGFkb3dFbCA9ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRzaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkc2hhZG93RWwgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCAkc2xpZGVFbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNoYWRvd0VsLmxlbmd0aCkgJHNoYWRvd0VsWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heCgoTWF0aC5hYnMocHJvZ3Jlc3MpIC0gMC41KSAvIDAuNSwgMCksIDEpO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3QgJHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgJHNsaWRlRWwpO1xuICAgICAgJHRhcmdldEVsLnRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRyYW5zZm9ybUVsXG4gICAgfSA9IHN3aXBlci5wYXJhbXMuY2FyZHNFZmZlY3Q7XG4gICAgY29uc3QgJHRyYW5zaXRpb25FbGVtZW50cyA9IHRyYW5zZm9ybUVsID8gc3dpcGVyLnNsaWRlcy5maW5kKHRyYW5zZm9ybUVsKSA6IHN3aXBlci5zbGlkZXM7XG4gICAgJHRyYW5zaXRpb25FbGVtZW50cy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxcbiAgICB9KTtcbiAgfTtcblxuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjYXJkcycsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59IiwiaW1wb3J0IGNyZWF0ZVNoYWRvdyBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyc7XG5pbXBvcnQgZWZmZWN0SW5pdCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LWluaXQuanMnO1xuaW1wb3J0IGVmZmVjdFRhcmdldCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDb3ZlcmZsb3coe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgIHJvdGF0ZTogNTAsXG4gICAgICBzdHJldGNoOiAwLFxuICAgICAgZGVwdGg6IDEwMCxcbiAgICAgIHNjYWxlOiAxLFxuICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICB0cmFuc2Zvcm1FbDogbnVsbFxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7XG4gICAgY29uc3Qgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDsgLy8gRWFjaCBzbGlkZSBvZmZzZXQgZnJvbSBjZW50ZXJcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgY29uc3Qgc2xpZGVTaXplID0gc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3Qgc2xpZGVPZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IG9mZnNldE11bHRpcGxpZXIgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZSAqIHBhcmFtcy5tb2RpZmllcjtcbiAgICAgIGxldCByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICBsZXQgcm90YXRlWCA9IGlzSG9yaXpvbnRhbCA/IDAgOiByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyOyAvLyB2YXIgcm90YXRlWiA9IDBcblxuICAgICAgbGV0IHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoOyAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcblxuICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgc3RyZXRjaCA9IHBhcnNlRmxvYXQocGFyYW1zLnN0cmV0Y2gpIC8gMTAwICogc2xpZGVTaXplO1xuICAgICAgfVxuXG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHNjYWxlID0gMSAtICgxIC0gcGFyYW1zLnNjYWxlKSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpOyAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDtcbiAgICAgIGNvbnN0IHNsaWRlVHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSAgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpIHNjYWxlKCR7c2NhbGV9KWA7XG4gICAgICBjb25zdCAkdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCAkc2xpZGVFbCk7XG4gICAgICAkdGFyZ2V0RWwudHJhbnNmb3JtKHNsaWRlVHJhbnNmb3JtKTtcbiAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCAkc2hhZG93QmVmb3JlRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0ICRzaGFkb3dBZnRlckVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuXG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0JlZm9yZUVsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkc2hhZG93QWZ0ZXJFbCA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsLCBpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGgpICRzaGFkb3dCZWZvcmVFbFswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCkgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9IC1vZmZzZXRNdWx0aXBsaWVyID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0cmFuc2Zvcm1FbFxuICAgIH0gPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCAkdHJhbnNpdGlvbkVsZW1lbnRzID0gdHJhbnNmb3JtRWwgPyBzd2lwZXIuc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc3dpcGVyLnNsaWRlcztcbiAgICAkdHJhbnNpdGlvbkVsZW1lbnRzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9O1xuXG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2NvdmVyZmxvdycsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgY3JlYXRlU2hhZG93IGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93LmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0Q3JlYXRpdmUoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjcmVhdGl2ZUVmZmVjdDoge1xuICAgICAgdHJhbnNmb3JtRWw6IG51bGwsXG4gICAgICBsaW1pdFByb2dyZXNzOiAxLFxuICAgICAgc2hhZG93UGVyUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiAxLFxuICAgICAgcGVyc3BlY3RpdmU6IHRydWUsXG4gICAgICBwcmV2OiB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgc2NhbGU6IDFcbiAgICAgIH0sXG4gICAgICBuZXh0OiB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgc2NhbGU6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGdldFRyYW5zbGF0ZVZhbHVlID0gdmFsdWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG4gICAgcmV0dXJuIGAke3ZhbHVlfXB4YDtcbiAgfTtcblxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDtcbiAgICBjb25zdCB7XG4gICAgICBwcm9ncmVzc011bHRpcGxpZXI6IG11bHRpcGxpZXJcbiAgICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGlzQ2VudGVyZWRTbGlkZXMgPSBzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzO1xuXG4gICAgaWYgKGlzQ2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGNvbnN0IG1hcmdpbiA9IHNsaWRlc1NpemVzR3JpZFswXSAvIDIgLSBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwO1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke21hcmdpbn1weCkpYCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzO1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5wcm9ncmVzcywgLXBhcmFtcy5saW1pdFByb2dyZXNzKSwgcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpO1xuICAgICAgbGV0IG9yaWdpbmFsUHJvZ3Jlc3MgPSBwcm9ncmVzcztcblxuICAgICAgaWYgKCFpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG9yaWdpbmFsUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5vcmlnaW5hbFByb2dyZXNzLCAtcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpLCBwYXJhbXMubGltaXRQcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3QgdCA9IFtzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQsIDAsIDBdO1xuICAgICAgY29uc3QgciA9IFswLCAwLCAwXTtcbiAgICAgIGxldCBjdXN0b20gPSBmYWxzZTtcblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdFsxXSA9IHRbMF07XG4gICAgICAgIHRbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfTtcblxuICAgICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgICBkYXRhID0gcGFyYW1zLm5leHQ7XG4gICAgICAgIGN1c3RvbSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByb2dyZXNzID4gMCkge1xuICAgICAgICBkYXRhID0gcGFyYW1zLnByZXY7XG4gICAgICAgIGN1c3RvbSA9IHRydWU7XG4gICAgICB9IC8vIHNldCB0cmFuc2xhdGVcblxuXG4gICAgICB0LmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICB0W2luZGV4XSA9IGBjYWxjKCR7dmFsdWV9cHggKyAoJHtnZXRUcmFuc2xhdGVWYWx1ZShkYXRhLnRyYW5zbGF0ZVtpbmRleF0pfSAqICR7TWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKX0pKWA7XG4gICAgICB9KTsgLy8gc2V0IHJvdGF0ZXNcblxuICAgICAgci5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgcltpbmRleF0gPSBkYXRhLnJvdGF0ZVtpbmRleF0gKiBNYXRoLmFicyhwcm9ncmVzcyAqIG11bHRpcGxpZXIpO1xuICAgICAgfSk7XG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3QgdHJhbnNsYXRlU3RyaW5nID0gdC5qb2luKCcsICcpO1xuICAgICAgY29uc3Qgcm90YXRlU3RyaW5nID0gYHJvdGF0ZVgoJHtyWzBdfWRlZykgcm90YXRlWSgke3JbMV19ZGVnKSByb3RhdGVaKCR7clsyXX1kZWcpYDtcbiAgICAgIGNvbnN0IHNjYWxlU3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyBgc2NhbGUoJHsxICsgKDEgLSBkYXRhLnNjYWxlKSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyfSlgIDogYHNjYWxlKCR7MSAtICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYDtcbiAgICAgIGNvbnN0IG9wYWNpdHlTdHJpbmcgPSBvcmlnaW5hbFByb2dyZXNzIDwgMCA/IDEgKyAoMSAtIGRhdGEub3BhY2l0eSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllciA6IDEgLSAoMSAtIGRhdGEub3BhY2l0eSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcjtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVN0cmluZ30pICR7cm90YXRlU3RyaW5nfSAke3NjYWxlU3RyaW5nfWA7IC8vIFNldCBzaGFkb3dzXG5cbiAgICAgIGlmIChjdXN0b20gJiYgZGF0YS5zaGFkb3cgfHwgIWN1c3RvbSkge1xuICAgICAgICBsZXQgJHNoYWRvd0VsID0gJHNsaWRlRWwuY2hpbGRyZW4oJy5zd2lwZXItc2xpZGUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRzaGFkb3dFbC5sZW5ndGggPT09IDAgJiYgZGF0YS5zaGFkb3cpIHtcbiAgICAgICAgICAkc2hhZG93RWwgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCAkc2xpZGVFbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNoYWRvd0VsLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHNoYWRvd09wYWNpdHkgPSBwYXJhbXMuc2hhZG93UGVyUHJvZ3Jlc3MgPyBwcm9ncmVzcyAqICgxIC8gcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpIDogcHJvZ3Jlc3M7XG4gICAgICAgICAgJHNoYWRvd0VsWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhzaGFkb3dPcGFjaXR5KSwgMCksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsICRzbGlkZUVsKTtcbiAgICAgICR0YXJnZXRFbC50cmFuc2Zvcm0odHJhbnNmb3JtKS5jc3Moe1xuICAgICAgICBvcGFjaXR5OiBvcGFjaXR5U3RyaW5nXG4gICAgICB9KTtcblxuICAgICAgaWYgKGRhdGEub3JpZ2luKSB7XG4gICAgICAgICR0YXJnZXRFbC5jc3MoJ3RyYW5zZm9ybS1vcmlnaW4nLCBkYXRhLm9yaWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHJhbnNmb3JtRWxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDtcbiAgICBjb25zdCAkdHJhbnNpdGlvbkVsZW1lbnRzID0gdHJhbnNmb3JtRWwgPyBzd2lwZXIuc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc3dpcGVyLnNsaWRlcztcbiAgICAkdHJhbnNpdGlvbkVsZW1lbnRzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbCxcbiAgICAgIGFsbFNsaWRlczogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2NyZWF0aXZlJyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHN3aXBlci5wYXJhbXMuY3JlYXRpdmVFZmZlY3QucGVyc3BlY3RpdmUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDdWJlKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgIHNoYWRvd1NjYWxlOiAwLjk0XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgJGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgICAgYnJvd3NlclxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBsZXQgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgbGV0ICRjdWJlU2hhZG93RWw7XG5cbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkd3JhcHBlckVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRjdWJlU2hhZG93RWwuY3NzKHtcbiAgICAgICAgICBoZWlnaHQ6IGAke3N3aXBlcldpZHRofXB4YFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gaTtcblxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgIGxldCByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG5cbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICByb3VuZCA9IE1hdGguZmxvb3IoLXNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAwO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAzICogc3dpcGVyU2l6ZSArIHN3aXBlclNpemUgKiA0ICogcm91bmQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgdHggPSAtdHg7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHJvdGF0ZVgoJHtpc0hvcml6b250YWwgPyAwIDogLXNsaWRlQW5nbGV9ZGVnKSByb3RhdGVZKCR7aXNIb3Jpem9udGFsID8gc2xpZGVBbmdsZSA6IDB9ZGVnKSB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAke3R6fXB4KWA7XG5cbiAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgd3JhcHBlclJvdGF0ZSA9IHNsaWRlSW5kZXggKiA5MCArIHByb2dyZXNzICogOTA7XG4gICAgICAgIGlmIChydGwpIHdyYXBwZXJSb3RhdGUgPSAtc2xpZGVJbmRleCAqIDkwIC0gcHJvZ3Jlc3MgKiA5MDtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJXaWR0aCAvIDIgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hhZG93QW5nbGUgPSBNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAtIE1hdGguZmxvb3IoTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLyA5MCkgKiA5MDtcbiAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IDEuNSAtIChNYXRoLnNpbihzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIgKyBNYXRoLmNvcyhzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIpO1xuICAgICAgICBjb25zdCBzY2FsZTEgPSBwYXJhbXMuc2hhZG93U2NhbGU7XG4gICAgICAgIGNvbnN0IHNjYWxlMiA9IHBhcmFtcy5zaGFkb3dTY2FsZSAvIG11bHRpcGxpZXI7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHBhcmFtcy5zaGFkb3dPZmZzZXQ7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGBzY2FsZTNkKCR7c2NhbGUxfSwgMSwgJHtzY2FsZTJ9KSB0cmFuc2xhdGUzZCgwcHgsICR7c3dpcGVySGVpZ2h0IC8gMiArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgekZhY3RvciA9IGJyb3dzZXIuaXNTYWZhcmkgfHwgYnJvd3Nlci5pc1dlYlZpZXcgPyAtc3dpcGVyU2l6ZSAvIDIgOiAwO1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZX1kZWcpIHJvdGF0ZVkoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDB9ZGVnKWApO1xuICB9O1xuXG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgJGVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbikuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjdWJlJyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgZWZmZWN0SW5pdCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LWluaXQuanMnO1xuaW1wb3J0IGVmZmVjdFRhcmdldCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyc7XG5pbXBvcnQgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVmZmVjdEZhZGUoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBmYWRlRWZmZWN0OiB7XG4gICAgICBjcm9zc0ZhZGU6IGZhbHNlLFxuICAgICAgdHJhbnNmb3JtRWw6IG51bGxcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG5cbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgY29uc3QgJHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgJHNsaWRlRWwpO1xuICAgICAgJHRhcmdldEVsLmNzcyh7XG4gICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eVxuICAgICAgfSkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHJhbnNmb3JtRWxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0O1xuICAgIGNvbnN0ICR0cmFuc2l0aW9uRWxlbWVudHMgPSB0cmFuc2Zvcm1FbCA/IHN3aXBlci5zbGlkZXMuZmluZCh0cmFuc2Zvcm1FbCkgOiBzd2lwZXIuc2xpZGVzO1xuICAgICR0cmFuc2l0aW9uRWxlbWVudHMudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbCxcbiAgICAgIGFsbFNsaWRlczogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufSIsImltcG9ydCBjcmVhdGVTaGFkb3cgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cuanMnO1xuaW1wb3J0IGVmZmVjdEluaXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC1pbml0LmpzJztcbmltcG9ydCBlZmZlY3RUYXJnZXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQuanMnO1xuaW1wb3J0IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RGbGlwKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZSxcbiAgICAgIHRyYW5zZm9ybUVsOiBudWxsXG4gICAgfVxuICB9KTtcblxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIGxldCBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgIGxldCByb3RhdGVYID0gMDtcbiAgICAgIGxldCB0eCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDtcbiAgICAgIGxldCB0eSA9IDA7XG5cbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICByb3RhdGVZID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocnRsKSB7XG4gICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwsIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAncmlnaHQnIDogJ2JvdHRvbScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYDtcbiAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsICRzbGlkZUVsKTtcbiAgICAgICR0YXJnZXRFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0cmFuc2Zvcm1FbFxuICAgIH0gPSBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7XG4gICAgY29uc3QgJHRyYW5zaXRpb25FbGVtZW50cyA9IHRyYW5zZm9ybUVsID8gc3dpcGVyLnNsaWRlcy5maW5kKHRyYW5zZm9ybUVsKSA6IHN3aXBlci5zbGlkZXM7XG4gICAgJHRyYW5zaXRpb25FbGVtZW50cy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsXG4gICAgfSk7XG4gIH07XG5cbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnZmxpcCcsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59IiwiaW1wb3J0IHsgbm93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyZWVNb2RlKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIGVtaXQsXG4gIG9uY2Vcbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBmcmVlTW9kZToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtb21lbnR1bTogdHJ1ZSxcbiAgICAgIG1vbWVudHVtUmF0aW86IDEsXG4gICAgICBtb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgICAgIG1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gICAgICBtb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gICAgICBzdGlja3k6IGZhbHNlLFxuICAgICAgbWluaW11bVZlbG9jaXR5OiAwLjAyXG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IGRhdGEsXG4gICAgICB0b3VjaGVzXG4gICAgfSA9IHN3aXBlcjsgLy8gVmVsb2NpdHlcblxuICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICB0aW1lOiBub3coKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCh7XG4gICAgY3VycmVudFBvc1xuICB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgc25hcEdyaWQsXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IGRhdGFcbiAgICB9ID0gc3dpcGVyOyAvLyBUaW1lIGRpZmZcblxuICAgIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICAgIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtKSB7XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc3QgbGFzdE1vdmVFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgY29uc3QgdmVsb2NpdHlFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSA8IHBhcmFtcy5mcmVlTW9kZS5taW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9IC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuXG5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgbm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtVmVsb2NpdHlSYXRpbztcbiAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgbGV0IG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtUmF0aW87XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcbiAgICAgIGxldCBuZXdQb3NpdGlvbiA9IHN3aXBlci50cmFuc2xhdGUgKyBtb21lbnR1bURpc3RhbmNlO1xuICAgICAgaWYgKHJ0bCkgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICBsZXQgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgIGxldCBhZnRlckJvdW5jZVBvc2l0aW9uO1xuICAgICAgY29uc3QgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBsZXQgbmVlZHNMb29wRml4O1xuXG4gICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICBsZXQgbmV4dFNsaWRlO1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICBvbmNlKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBGaXggZHVyYXRpb25cblxuXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICAvLyBJZiBmcmVlTW9kZS5zdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgY29uc3QgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG5cbiAgICAgICAgICBpZiAobW92ZURpc3RhbmNlIDwgY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgIGVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGZyZWVNb2RlOiB7XG4gICAgICBvblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hFbmRcbiAgICB9XG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdyaWQoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtc1xufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGdyaWQ6IHtcbiAgICAgIHJvd3M6IDEsXG4gICAgICBmaWxsOiAnY29sdW1uJ1xuICAgIH1cbiAgfSk7XG4gIGxldCBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICBsZXQgc2xpZGVzUGVyUm93O1xuICBsZXQgbnVtRnVsbENvbHVtbnM7XG5cbiAgY29uc3QgaW5pdFNsaWRlcyA9IHNsaWRlc0xlbmd0aCA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzUGVyVmlld1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvd3MsXG4gICAgICBmaWxsXG4gICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDtcbiAgICBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gcm93cztcbiAgICBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcm93cyk7XG5cbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyByb3dzKSA9PT0gc2xpZGVzTGVuZ3RoIC8gcm93cykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IHNsaWRlc0xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyByb3dzKSAqIHJvd3M7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBmaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHNsaWRlc1BlclZpZXcgKiByb3dzKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlU2xpZGUgPSAoaSwgc2xpZGUsIHNsaWRlc0xlbmd0aCwgZ2V0RGlyZWN0aW9uTGFiZWwpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJHcm91cCxcbiAgICAgIHNwYWNlQmV0d2VlblxuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvd3MsXG4gICAgICBmaWxsXG4gICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDsgLy8gU2V0IHNsaWRlcyBvcmRlclxuXG4gICAgbGV0IG5ld1NsaWRlT3JkZXJJbmRleDtcbiAgICBsZXQgY29sdW1uO1xuICAgIGxldCByb3c7XG5cbiAgICBpZiAoZmlsbCA9PT0gJ3JvdycgJiYgc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cEluZGV4ID0gTWF0aC5mbG9vcihpIC8gKHNsaWRlc1Blckdyb3VwICogcm93cykpO1xuICAgICAgY29uc3Qgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcm93cyAqIHNsaWRlc1Blckdyb3VwICogZ3JvdXBJbmRleDtcbiAgICAgIGNvbnN0IGNvbHVtbnNJbkdyb3VwID0gZ3JvdXBJbmRleCA9PT0gMCA/IHNsaWRlc1Blckdyb3VwIDogTWF0aC5taW4oTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBncm91cEluZGV4ICogcm93cyAqIHNsaWRlc1Blckdyb3VwKSAvIHJvd3MpLCBzbGlkZXNQZXJHcm91cCk7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJHcm91cDtcbiAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyByb3dzO1xuICAgICAgc2xpZGUuY3NzKHtcbiAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHJvd3MpO1xuICAgICAgcm93ID0gaSAtIGNvbHVtbiAqIHJvd3M7XG5cbiAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gcm93cyAtIDEpIHtcbiAgICAgICAgcm93ICs9IDE7XG5cbiAgICAgICAgaWYgKHJvdyA+PSByb3dzKSB7XG4gICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICB9XG5cbiAgICBzbGlkZS5jc3MoZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpbi10b3AnKSwgcm93ICE9PSAwID8gc3BhY2VCZXR3ZWVuICYmIGAke3NwYWNlQmV0d2Vlbn1weGAgOiAnJyk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlV3JhcHBlclNpemUgPSAoc2xpZGVTaXplLCBzbmFwR3JpZCwgZ2V0RGlyZWN0aW9uTGFiZWwpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzcGFjZUJldHdlZW4sXG4gICAgICBjZW50ZXJlZFNsaWRlcyxcbiAgICAgIHJvdW5kTGVuZ3Roc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvd3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IChzbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcm93cykgLSBzcGFjZUJldHdlZW47XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIFtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV06IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcblxuICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgc25hcEdyaWQuc3BsaWNlKDAsIHNuYXBHcmlkLmxlbmd0aCk7XG4gICAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgIGlmIChyb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBzbmFwR3JpZC5wdXNoKC4uLm5ld1NsaWRlc0dyaWQpO1xuICAgIH1cbiAgfTtcblxuICBzd2lwZXIuZ3JpZCA9IHtcbiAgICBpbml0U2xpZGVzLFxuICAgIHVwZGF0ZVNsaWRlLFxuICAgIHVwZGF0ZVdyYXBwZXJTaXplXG4gIH07XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIYXNoTmF2aWdhdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBlbWl0LFxuICBvblxufSkge1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgd2F0Y2hTdGF0ZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IG9uSGFzaENoYW5nZSA9ICgpID0+IHtcbiAgICBlbWl0KCdoYXNoQ2hhbmdlJyk7XG4gICAgY29uc3QgbmV3SGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICBjb25zdCBhY3RpdmVTbGlkZUhhc2ggPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG5cbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICBjb25zdCBuZXdJbmRleCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0SGFzaCA9ICgpID0+IHtcbiAgICBpZiAoIWluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLnJlcGxhY2VTdGF0ZSAmJiB3aW5kb3cuaGlzdG9yeSAmJiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBgIyR7c3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpfWAgfHwgJycpO1xuICAgICAgZW1pdCgnaGFzaFNldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIGNvbnN0IGhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBoYXNoIHx8ICcnO1xuICAgICAgZW1pdCgnaGFzaFNldCcpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBjb25zdCBoYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuXG4gICAgaWYgKGhhc2gpIHtcbiAgICAgIGNvbnN0IHNwZWVkID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcblxuICAgICAgICBpZiAoc2xpZGVIYXNoID09PSBoYXNoICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgaW5pdCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgIGRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHNldEhhc2goKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc2V0SGFzaCgpO1xuICAgIH1cbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIaXN0b3J5KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgaGlzdG9yeToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByb290OiAnJyxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICBrZXk6ICdzbGlkZXMnXG4gICAgfVxuICB9KTtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGxldCBwYXRocyA9IHt9O1xuXG4gIGNvbnN0IHNsdWdpZnkgPSB0ZXh0ID0+IHtcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfTtcblxuICBjb25zdCBnZXRQYXRoVmFsdWVzID0gdXJsT3ZlcnJpZGUgPT4ge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGxldCBsb2NhdGlvbjtcblxuICAgIGlmICh1cmxPdmVycmlkZSkge1xuICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHVybE92ZXJyaWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIocGFydCA9PiBwYXJ0ICE9PSAnJyk7XG4gICAgY29uc3QgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgIGNvbnN0IHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBzZXRIaXN0b3J5ID0gKGtleSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIWluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGxldCBsb2NhdGlvbjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVybCkge1xuICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgfVxuXG4gICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KTtcbiAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290O1xuICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgdmFsdWUgPSBgJHtyb290fS8ke2tleX0vJHt2YWx1ZX1gO1xuICAgIH0gZWxzZSBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHZhbHVlID0gYCR7a2V5fS8ke3ZhbHVlfWA7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG5cbiAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2Nyb2xsVG9TbGlkZSA9IChzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBzbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcblxuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNldEhpc3RvcnlQb3BTdGF0ZSA9ICgpID0+IHtcbiAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIHNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgc3dpcGVyLnBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuXG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBpZiAoIXBhdGhzLmtleSAmJiAhcGF0aHMudmFsdWUpIHJldHVybjtcbiAgICBzY3JvbGxUb1NsaWRlKDAsIHBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgaW5pdCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgfVxuICB9KTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBLZXlib2FyZCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBzd2lwZXIua2V5Ym9hcmQgPSB7XG4gICAgZW5hYmxlZDogZmFsc2VcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBrZXlib2FyZDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICAgIHBhZ2VVcERvd246IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG5cbiAgICBjb25zdCBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIGNvbnN0IHBhZ2VVcERvd24gPSBzd2lwZXIucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd247XG4gICAgY29uc3QgaXNQYWdlVXAgPSBwYWdlVXBEb3duICYmIGtjID09PSAzMztcbiAgICBjb25zdCBpc1BhZ2VEb3duID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzQ7XG4gICAgY29uc3QgaXNBcnJvd0xlZnQgPSBrYyA9PT0gMzc7XG4gICAgY29uc3QgaXNBcnJvd1JpZ2h0ID0ga2MgPT09IDM5O1xuICAgIGNvbnN0IGlzQXJyb3dVcCA9IGtjID09PSAzODtcbiAgICBjb25zdCBpc0Fycm93RG93biA9IGtjID09PSA0MDsgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93UmlnaHQgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiBpc0Fycm93RG93biB8fCBpc1BhZ2VEb3duKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd0xlZnQgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiBpc0Fycm93VXAgfHwgaXNQYWdlVXApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lICYmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5vbmx5SW5WaWV3cG9ydCAmJiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQgfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSkge1xuICAgICAgbGV0IGluVmlldyA9IGZhbHNlOyAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcblxuICAgICAgaWYgKHN3aXBlci4kZWwucGFyZW50cyhgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0ICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICBjb25zdCBzd2lwZXJXaWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IHN3aXBlckhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY29uc3Qgc3dpcGVyT2Zmc2V0ID0gc3dpcGVyLiRlbC5vZmZzZXQoKTtcbiAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDtcbiAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuXG4gICAgICAgIGlmIChwb2ludFswXSA+PSAwICYmIHBvaW50WzBdIDw9IHdpbmRvd1dpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgaWYgKHBvaW50WzBdID09PSAwICYmIHBvaW50WzFdID09PSAwKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICAgaW5WaWV3ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWluVmlldykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQpIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc1BhZ2VEb3duIHx8IGlzQXJyb3dSaWdodCkgJiYgIXJ0bCB8fCAoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgaWYgKChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgIXJ0bCB8fCAoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGFnZURvd24gfHwgaXNBcnJvd0Rvd24pIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc0Fycm93VXApIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9XG5cbiAgICBlbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICQoZG9jdW1lbnQpLm9uKCdrZXlkb3duJywgaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICghc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24nLCBoYW5kbGUpO1xuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5rZXlib2FyZCwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlXG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXp5KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgbGF6eToge1xuICAgICAgY2hlY2tJblZpZXc6IGZhbHNlLFxuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBsb2FkUHJldk5leHQ6IGZhbHNlLFxuICAgICAgbG9hZFByZXZOZXh0QW1vdW50OiAxLFxuICAgICAgbG9hZE9uVHJhbnNpdGlvblN0YXJ0OiBmYWxzZSxcbiAgICAgIHNjcm9sbGluZ0VsZW1lbnQ6ICcnLFxuICAgICAgZWxlbWVudENsYXNzOiAnc3dpcGVyLWxhenknLFxuICAgICAgbG9hZGluZ0NsYXNzOiAnc3dpcGVyLWxhenktbG9hZGluZycsXG4gICAgICBsb2FkZWRDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRlZCcsXG4gICAgICBwcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcidcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubGF6eSA9IHt9O1xuICBsZXQgc2Nyb2xsSGFuZGxlckF0dGFjaGVkID0gZmFsc2U7XG4gIGxldCBpbml0aWFsSW1hZ2VMb2FkZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBsb2FkSW5TbGlkZShpbmRleCwgbG9hZEluRHVwbGljYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubGF6eTtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGNvbnN0ICRzbGlkZUVsID0gaXNWaXJ0dWFsID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgY29uc3QgJGltYWdlcyA9ICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5lbGVtZW50Q2xhc3N9Om5vdCguJHtwYXJhbXMubG9hZGVkQ2xhc3N9KTpub3QoLiR7cGFyYW1zLmxvYWRpbmdDbGFzc30pYCk7XG5cbiAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmVsZW1lbnRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpKSB7XG4gICAgICAkaW1hZ2VzLnB1c2goJHNsaWRlRWxbMF0pO1xuICAgIH1cblxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICRpbWFnZXMuZWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGNvbnN0ICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgY29uc3QgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgY29uc3Qgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgIGNvbnN0IHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICBjb25zdCBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgIGNvbnN0ICRwaWN0dXJlRWwgPSAkaW1hZ2VFbC5wYXJlbnQoJ3BpY3R1cmUnKTtcbiAgICAgIHN3aXBlci5sb2FkSW1hZ2UoJGltYWdlRWxbMF0sIHNyYyB8fCBiYWNrZ3JvdW5kLCBzcmNzZXQsIHNpemVzLCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyICYmICFzd2lwZXIucGFyYW1zIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICRpbWFnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoXCIke2JhY2tncm91bmR9XCIpYCk7XG4gICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJHBpY3R1cmVFbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRwaWN0dXJlRWwuY2hpbGRyZW4oJ3NvdXJjZScpLmVhY2goc291cmNlRWwgPT4ge1xuICAgICAgICAgICAgICBjb25zdCAkc291cmNlID0gJChzb3VyY2VFbCk7XG5cbiAgICAgICAgICAgICAgaWYgKCRzb3VyY2UuYXR0cignZGF0YS1zcmNzZXQnKSkge1xuICAgICAgICAgICAgICAgICRzb3VyY2UuYXR0cignc3Jjc2V0JywgJHNvdXJjZS5hdHRyKCdkYXRhLXNyY3NldCcpKTtcbiAgICAgICAgICAgICAgICAkc291cmNlLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIHNyYyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5wcmVsb2FkZXJDbGFzc31gKS5yZW1vdmUoKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG5cbiAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl06bm90KC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCk7XG4gICAgICAgICAgICBsb2FkSW5TbGlkZShvcmlnaW5hbFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl1gKTtcbiAgICAgICAgICAgIGxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdCgnbGF6eUltYWdlUmVhZHknLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGVtaXQoJ2xhenlJbWFnZUxvYWQnLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZCgpIHtcbiAgICBjb25zdCB7XG4gICAgICAkd3JhcHBlckVsLFxuICAgICAgcGFyYW1zOiBzd2lwZXJQYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyUGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTtcbiAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlclBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpZGVFeGlzdChpbmRleCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBpZiAoJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtpbmRleH1cIl1gKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZXNbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChzbGlkZUVsKS5pbmRleCgpO1xuICAgIH1cblxuICAgIGlmICghaW5pdGlhbEltYWdlTG9hZGVkKSBpbml0aWFsSW1hZ2VMb2FkZWQgPSB0cnVlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzfWApLmVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXNWaXJ0dWFsID8gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIDogJChzbGlkZUVsKS5pbmRleCgpO1xuICAgICAgICBsb2FkSW5TbGlkZShpbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgbG9hZEluU2xpZGUoaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvYWRQcmV2TmV4dCkge1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgJiYgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCA+IDEpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgY29uc3Qgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApOyAvLyBOZXh0IFNsaWRlc1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgPCBtYXhJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIGxvYWRJblNsaWRlKGkpO1xuICAgICAgICB9IC8vIFByZXYgU2xpZGVzXG5cblxuICAgICAgICBmb3IgKGxldCBpID0gbWluSW5kZXg7IGkgPCBhY3RpdmVJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIGxvYWRJblNsaWRlKGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXh0U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVOZXh0Q2xhc3N9YCk7XG4gICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgbG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcbiAgICAgICAgY29uc3QgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlUHJldkNsYXNzfWApO1xuICAgICAgICBpZiAocHJldlNsaWRlLmxlbmd0aCA+IDApIGxvYWRJblNsaWRlKHNsaWRlSW5kZXgocHJldlNsaWRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tJblZpZXdPbkxvYWQoKSB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0ICRzY3JvbGxFbGVtZW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5LnNjcm9sbGluZ0VsZW1lbnQgPyAkKHN3aXBlci5wYXJhbXMubGF6eS5zY3JvbGxpbmdFbGVtZW50KSA6ICQod2luZG93KTtcbiAgICBjb25zdCBpc1dpbmRvdyA9ICRzY3JvbGxFbGVtZW50WzBdID09PSB3aW5kb3c7XG4gICAgY29uc3Qgc2Nyb2xsRWxlbWVudFdpZHRoID0gaXNXaW5kb3cgPyB3aW5kb3cuaW5uZXJXaWR0aCA6ICRzY3JvbGxFbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGNvbnN0IHNjcm9sbEVsZW1lbnRIZWlnaHQgPSBpc1dpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6ICRzY3JvbGxFbGVtZW50WzBdLm9mZnNldEhlaWdodDtcbiAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgaW5WaWV3ID0gZmFsc2U7XG4gICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0O1xuICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLCBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuXG4gICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSBzY3JvbGxFbGVtZW50V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSBzY3JvbGxFbGVtZW50SGVpZ2h0KSB7XG4gICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN3aXBlci5zdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG5cbiAgICBpZiAoaW5WaWV3KSB7XG4gICAgICBsb2FkKCk7XG4gICAgICAkc2Nyb2xsRWxlbWVudC5vZmYoJ3Njcm9sbCcsIGNoZWNrSW5WaWV3T25Mb2FkLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSBpZiAoIXNjcm9sbEhhbmRsZXJBdHRhY2hlZCkge1xuICAgICAgc2Nyb2xsSGFuZGxlckF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwnLCBjaGVja0luVmlld09uTG9hZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuY2hlY2tJblZpZXcpIHtcbiAgICAgICAgY2hlY2tJblZpZXdPbkxvYWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBvbignc2Nyb2xsJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgIGxvYWQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2Nyb2xsYmFyRHJhZ01vdmUgcmVzaXplIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5jaGVja0luVmlldykge1xuICAgICAgICBjaGVja0luVmlld09uTG9hZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uU3RhcnQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCAmJiAhaW5pdGlhbEltYWdlTG9hZGVkKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuY2hlY2tJblZpZXcpIHtcbiAgICAgICAgICBjaGVja0luVmlld09uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5jaGVja0luVmlldykge1xuICAgICAgICBjaGVja0luVmlld09uTG9hZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBsYXp5LFxuICAgICAgY3NzTW9kZSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3MsXG4gICAgICB0b3VjaFJlbGVhc2VPbkVkZ2VzLFxuICAgICAgcmVzaXN0YW5jZVJhdGlvXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG5cbiAgICBpZiAobGF6eS5lbmFibGVkICYmIChjc3NNb2RlIHx8IHdhdGNoU2xpZGVzUHJvZ3Jlc3MgJiYgKHRvdWNoUmVsZWFzZU9uRWRnZXMgfHwgcmVzaXN0YW5jZVJhdGlvID09PSAwKSkpIHtcbiAgICAgIGxvYWQoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5sYXp5LCB7XG4gICAgbG9hZCxcbiAgICBsb2FkSW5TbGlkZVxuICB9KTtcbn0iLCJpbXBvcnQgYXBwZW5kU2xpZGUgZnJvbSAnLi9tZXRob2RzL2FwcGVuZFNsaWRlLmpzJztcbmltcG9ydCBwcmVwZW5kU2xpZGUgZnJvbSAnLi9tZXRob2RzL3ByZXBlbmRTbGlkZS5qcyc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnLi9tZXRob2RzL2FkZFNsaWRlLmpzJztcbmltcG9ydCByZW1vdmVTbGlkZSBmcm9tICcuL21ldGhvZHMvcmVtb3ZlU2xpZGUuanMnO1xuaW1wb3J0IHJlbW92ZUFsbFNsaWRlcyBmcm9tICcuL21ldGhvZHMvcmVtb3ZlQWxsU2xpZGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hbmlwdWxhdGlvbih7XG4gIHN3aXBlclxufSkge1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgIGFkZFNsaWRlOiBhZGRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlcy5iaW5kKHN3aXBlcilcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIH1cblxuICBjb25zdCBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGNvbnN0IHNsaWRlc0J1ZmZlciA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgY29uc3QgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICBjdXJyZW50U2xpZGUucmVtb3ZlKCk7XG4gICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNCdWZmZXJbaV0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghcGFyYW1zLm9ic2VydmVyKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy5vYnNlcnZlcikge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy5vYnNlcnZlcikge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG5cbiAgc3dpcGVyLnJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICB9XG5cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGxldCBpbmRleFRvUmVtb3ZlO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy5vYnNlcnZlcikge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW91c2V3aGVlbCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubW91c2V3aGVlbCA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBsZXQgdGltZW91dDtcbiAgbGV0IGxhc3RTY3JvbGxUaW1lID0gbm93KCk7XG4gIGxldCBsYXN0RXZlbnRCZWZvcmVTbmFwO1xuICBjb25zdCByZWNlbnRXaGVlbEV2ZW50cyA9IFtdO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIGNvbnN0IFBJWEVMX1NURVAgPSAxMDtcbiAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIGNvbnN0IFBBR0VfSEVJR0hUID0gODAwO1xuICAgIGxldCBzWCA9IDA7XG4gICAgbGV0IHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG5cbiAgICBsZXQgcFggPSAwO1xuICAgIGxldCBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG4gICAgLy8gTGVnYWN5XG5cbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cblxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG5cblxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuXG4gICAgaWYgKCdkZWx0YVgnIGluIGUpIHtcbiAgICAgIHBYID0gZS5kZWx0YVg7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG5cbiAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICB9XG4gICAgfSAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuXG5cbiAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICBzWSA9IHBZIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSAmJiBuZXdFdmVudC5kZWx0YSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkge1xuICAgICAgLy8gUHJldmVudCBpZiBkZWx0YSBvZiB3aGVlbCBzY3JvbGwgZGVsdGEgaXMgYmVsb3cgY29uZmlndXJlZCB0aHJlc2hvbGRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBsYXN0U2Nyb2xsVGltZSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIHRpbWUgYmV0d2VlbiBzY3JvbGxzIGlzIGJlbG93IGNvbmZpZ3VyZWQgdGhyZXNob2xkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBJZiB0aGUgbW92ZW1lbnQgaXMgTk9UIGJpZyBlbm91Z2ggYW5kXG4gICAgLy8gaWYgdGhlIGxhc3QgdGltZSB0aGUgdXNlciBzY3JvbGxlZCB3YXMgdG9vIGNsb3NlIHRvIHRoZSBjdXJyZW50IG9uZSAoYXZvaWQgY29udGludW91c2x5IHRyaWdnZXJpbmcgdGhlIHNsaWRlcik6XG4gICAgLy8gICBEb24ndCBnbyBhbnkgZnVydGhlciAoYXZvaWQgaW5zaWduaWZpY2FudCBzY3JvbGwgbW92ZW1lbnQpLlxuXG5cbiAgICBpZiAobmV3RXZlbnQuZGVsdGEgPj0gNiAmJiBub3coKSAtIGxhc3RTY3JvbGxUaW1lIDwgNjApIHtcbiAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gSWYgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgZW5kOlxuICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgIC8vICAgICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIC8vIEVsc2UgKHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBiZWdpbm5pbmcpIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgIC8vICAgZW1pdCBhIHNjcm9sbCBldmVudC5cblxuXG4gICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiA8IDApIHtcbiAgICAgIGlmICgoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIGVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfSAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgbGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICF0YXJnZXRbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIGxldCBkZWx0YSA9IDA7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICBjb25zdCBkYXRhID0gbm9ybWFsaXplKGUpO1xuXG4gICAgaWYgKHBhcmFtcy5mb3JjZVRvQXhpcykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWSkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWCkpIGRlbHRhID0gLWRhdGEucGl4ZWxZO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpID8gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yIDogLWRhdGEucGl4ZWxZO1xuICAgIH1cblxuICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhOyAvLyBHZXQgdGhlIHNjcm9sbCBwb3NpdGlvbnNcblxuICAgIGxldCBwb3NpdGlvbnMgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyBkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eTtcbiAgICBpZiAocG9zaXRpb25zID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGlmIChwb3NpdGlvbnMgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7IC8vIFdoZW4gbG9vcCBpcyB0cnVlOlxuICAgIC8vICAgICB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgLy8gV2hlbiBsb29wIGlzIGZhbHNlOlxuICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBpcyBub3Qgb24gZWRnZSxcbiAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnMsXG4gICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSBmYWxzZS5cblxuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyB0cnVlIDogIShwb3NpdGlvbnMgPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbnMgPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSk7XG4gICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIgJiYgc3dpcGVyLnBhcmFtcy5uZXN0ZWQpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUgfHwgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSksXG4gICAgICAgIHJhdzogZXZlbnRcbiAgICAgIH07IC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuXG4gICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpOyAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG5cbiAgICAgIGlmIChwcmV2RXZlbnQpIHtcbiAgICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbiB8fCBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC50aW1lID4gcHJldkV2ZW50LnRpbWUgKyAxNTApIHtcbiAgICAgICAgICBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICB9IC8vIElmIGl0J3MgdGltZSB0byByZWxlYXNlIHRoZSBzY3JvbGw6XG4gICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG5cblxuICAgICAgaWYgKHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSlcbiAgICAgIH07XG4gICAgICBjb25zdCBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJiBuZXdFdmVudC5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhICYmIG5ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICBjb25zdCB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIGNvbnN0IHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgICBpZiAoIXdhc0JlZ2lubmluZyAmJiBzd2lwZXIuaXNCZWdpbm5pbmcgfHwgIXdhc0VuZCAmJiBzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgZmlyc3RFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzWzBdO1xuICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuXG4gICAgICAgICAgaWYgKHByZXZFdmVudCAmJiAobmV3RXZlbnQuZGVsdGEgPiBwcmV2RXZlbnQuZGVsdGEgfHwgbmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUgJiYgbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMCAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gbmV3RXZlbnQuZGVsdGEgPj0gMSAmJiBuZXdFdmVudC5kZWx0YSA8PSA2KSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgLy8gdG8gd2FpdCBmb3IgbW9yZSBldmVudHMuIFNuYXAgQVNBUCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgICAgICAgICAgLy8gQWxzbywgYmVjYXVzZSB0aGVyZSdzIHNvbWUgcmVtYWluaW5nIG1vbWVudHVtIHdlJ2xsIGJpYXMgdGhlIHNuYXAgaW4gdGhlXG4gICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgLy8gaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBzY3JvbGwgaW5zdGVhZCBvZiByZXZlcnNpbmcgdG8gc25hcC4gIFRoZXJlZm9yZSxcbiAgICAgICAgICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBtb3JlIHRoYW4gMjAlIGluIHRoZSBjdXJyZW50IGRpcmVjdGlvbiwga2VlcCBnb2luZy5cbiAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDtcbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvXG4gICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCBcImNvbXBsZXRlXCIgd2hlbiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgLy8gZm9yIDUwMG1zLlxuICAgICAgICAgICAgdGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc25hcFRvVGhyZXNob2xkID0gMC41O1xuICAgICAgICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwID0gbmV3RXZlbnQ7XG4gICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIEVtaXQgZXZlbnRcblxuXG4gICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIGVtaXQoJ3Njcm9sbCcsIGUpOyAvLyBTdG9wIGF1dG9wbGF5XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpOyAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbiA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHtcbiAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICB9XG5cbiAgICB0YXJnZXRbbWV0aG9kXSgnbW91c2VlbnRlcicsIGhhbmRsZU1vdXNlRW50ZXIpO1xuICAgIHRhcmdldFttZXRob2RdKCdtb3VzZWxlYXZlJywgaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0W21ldGhvZF0oJ3doZWVsJywgaGFuZGxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgZXZlbnRzKCdvbicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICBldmVudHMoJ29mZicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBkaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSBlbmFibGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIGVuYWJsZSgpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBkaXNhYmxlKCk7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5tb3VzZXdoZWVsLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGVcbiAgfSk7XG59IiwiaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2aWdhdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5uYXZpZ2F0aW9uID0ge1xuICAgIG5leHRFbDogbnVsbCxcbiAgICAkbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbCxcbiAgICAkcHJldkVsOiBudWxsXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgJGVsO1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICAkZWwgPSAkKGVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiBzd2lwZXIuJGVsLmZpbmQoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQoZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAkZWw7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVFbCgkZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRlbCAmJiAkZWwubGVuZ3RoID4gMCkge1xuICAgICAgJGVsW2Rpc2FibGVkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIGlmICgkZWxbMF0gJiYgJGVsWzBdLnRhZ05hbWUgPT09ICdCVVRUT04nKSAkZWxbMF0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkZWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIHRvZ2dsZUVsKCRwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyk7XG4gICAgdG9nZ2xlRWwoJG5leHRFbCwgc3dpcGVyLmlzRW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICB9KTtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgY29uc3QgJG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgIGNvbnN0ICRwcmV2RWwgPSBnZXRFbChwYXJhbXMucHJldkVsKTtcblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5leHRFbC5vbignY2xpY2snLCBvbk5leHRDbGljayk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIG9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgbmV4dEVsOiAkbmV4dEVsICYmICRuZXh0RWxbMF0sXG4gICAgICAkcHJldkVsLFxuICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF1cbiAgICB9KTtcblxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIGlmICgkbmV4dEVsKSAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgaWYgKCRwcmV2RWwpICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgJHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBvbk5leHRDbGljayk7XG4gICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgb25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgJHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICEkKHRhcmdldEVsKS5pcygkcHJldkVsKSAmJiAhJCh0YXJnZXRFbCkuaXMoJG5leHRFbCkpIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcblxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgaXNIaWRkZW4gPSAkcHJldkVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgY2xhc3Nlc1RvU2VsZWN0b3IgZnJvbSAnLi4vLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IuanMnO1xuaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZ2luYXRpb24oe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgY29uc3QgcGZ4ID0gJ3N3aXBlci1wYWdpbmF0aW9uJztcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBmb3JtYXRGcmFjdGlvblRvdGFsOiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgYnVsbGV0Q2xhc3M6IGAke3BmeH0tYnVsbGV0YCxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiBgJHtwZnh9LWJ1bGxldC1hY3RpdmVgLFxuICAgICAgbW9kaWZpZXJDbGFzczogYCR7cGZ4fS1gLFxuICAgICAgY3VycmVudENsYXNzOiBgJHtwZnh9LWN1cnJlbnRgLFxuICAgICAgdG90YWxDbGFzczogYCR7cGZ4fS10b3RhbGAsXG4gICAgICBoaWRkZW5DbGFzczogYCR7cGZ4fS1oaWRkZW5gLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItZmlsbGAsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItb3Bwb3NpdGVgLFxuICAgICAgY2xpY2thYmxlQ2xhc3M6IGAke3BmeH0tY2xpY2thYmxlYCxcbiAgICAgIGxvY2tDbGFzczogYCR7cGZ4fS1sb2NrYCxcbiAgICAgIGhvcml6b250YWxDbGFzczogYCR7cGZ4fS1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGAke3BmeH0tdmVydGljYWxgXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnBhZ2luYXRpb24gPSB7XG4gICAgZWw6IG51bGwsXG4gICAgJGVsOiBudWxsLFxuICAgIGJ1bGxldHM6IFtdXG4gIH07XG4gIGxldCBidWxsZXRTaXplO1xuICBsZXQgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcblxuICBmdW5jdGlvbiBpc1BhZ2luYXRpb25EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoJGJ1bGxldEVsLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAkYnVsbGV0RWxbcG9zaXRpb25dKCkuYWRkQ2xhc3MoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259YClbcG9zaXRpb25dKCkuYWRkQ2xhc3MoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsgLy8gQ3VycmVudC9Ub3RhbFxuXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgICAgIGlmIChjdXJyZW50ID4gc2xpZGVzTGVuZ3RoIC0gMSAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSB7XG4gICAgICAgIGN1cnJlbnQgLT0gc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSBjdXJyZW50IC09IHRvdGFsO1xuICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9IC8vIFR5cGVzXG5cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBidWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YCk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIHN3aXBlci5wcmV2aW91c0luZGV4O1xuXG4gICAgICAgICAgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZmlyc3RJbmRleCA9IGN1cnJlbnQgLSBkeW5hbWljQnVsbGV0SW5kZXg7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cblxuICAgICAgYnVsbGV0cy5yZW1vdmVDbGFzcyhbJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKS5qb2luKCcgJykpO1xuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5lYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgY29uc3QgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcblxuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0ICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgY29uc3QgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnVsbGV0cy5lcShpKS5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBpKS5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkZmlyc3REaXNwbGF5ZWRCdWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKCRsYXN0RGlzcGxheWVkQnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkZmlyc3REaXNwbGF5ZWRCdWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkbGFzdERpc3BsYXllZEJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldHNPZmZzZXQgPSAoYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoIC0gYnVsbGV0U2l6ZSkgLyAyIC0gbWlkSW5kZXggKiBidWxsZXRTaXplO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBgJHtidWxsZXRzT2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuY3VycmVudENsYXNzKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcblxuICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgIGxldCBzY2FsZVkgPSAxO1xuXG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuXG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWApLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgJGVsWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsICRlbFswXSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgJGVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICBsZXQgcGFnaW5hdGlvbkhUTUwgPSAnJztcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkge1xuICAgICAgICBudW1iZXJPZkJ1bGxldHMgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5jdXJyZW50Q2xhc3N9XCI+PC9zcGFuPmAgKyAnIC8gJyArIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnRvdGFsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24sIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwge1xuICAgICAgZWw6ICdzd2lwZXItcGFnaW5hdGlvbidcbiAgICB9KTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICBsZXQgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSkge1xuICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7IC8vIGNoZWNrIGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBuZXN0ZWQgU3dpcGVyXG5cbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAkZWwgPSAkZWwuZmlsdGVyKGVsID0+IHtcbiAgICAgICAgICBpZiAoJChlbCkucGFyZW50cygnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcyksIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIGluZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF1cbiAgICB9KTtcblxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24pO1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub2ZmKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpO1xuICAgIH1cbiAgfVxuXG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlc0xlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgJGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuXG4gICAgaWYgKCRlbCkge1xuICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgY29uc3Qge1xuICAgICAgJGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgJGVsLmxlbmd0aCA+IDAgJiYgISQodGFyZ2V0RWwpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9ICRlbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuXG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG5cbiAgICAgICRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhcmFsbGF4KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFyYWxsYXg6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9KTtcblxuICBjb25zdCBzZXRUcmFuc2Zvcm0gPSAoZWwsIHByb2dyZXNzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcnRsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG4gICAgY29uc3QgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICBsZXQgeCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgbGV0IHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteScpO1xuICAgIGNvbnN0IHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgY29uc3Qgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cblxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xuICAgIH1cblxuICAgIGlmICh5LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB5ID0gYCR7cGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3N9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBgJHt5ICogcHJvZ3Jlc3N9cHhgO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gY3VycmVudE9wYWNpdHk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweCkgc2NhbGUoJHtjdXJyZW50U2NhbGV9KWApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgJGVsLFxuICAgICAgc2xpZGVzLFxuICAgICAgcHJvZ3Jlc3MsXG4gICAgICBzbmFwR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChlbCA9PiB7XG4gICAgICBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICB9KTtcbiAgICBzbGlkZXMuZWFjaCgoc2xpZGVFbCwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgbGV0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChlbCA9PiB7XG4gICAgICAgIHNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gKGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICRlbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgJGVsLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5lYWNoKHBhcmFsbGF4RWwgPT4ge1xuICAgICAgY29uc3QgJHBhcmFsbGF4RWwgPSAkKHBhcmFsbGF4RWwpO1xuICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludCgkcGFyYWxsYXhFbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICBpZiAoZHVyYXRpb24gPT09IDApIHBhcmFsbGF4RHVyYXRpb24gPSAwO1xuICAgICAgJHBhcmFsbGF4RWwudHJhbnNpdGlvbihwYXJhbGxheER1cmF0aW9uKTtcbiAgICB9KTtcbiAgfTtcblxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICB9KTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zd2lwZXIsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNjcm9sbGJhcih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1N0YXJ0UG9zO1xuICBsZXQgZHJhZ1NpemU7XG4gIGxldCB0cmFja1NpemU7XG4gIGxldCBkaXZpZGVyO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnNjcm9sbGJhciA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBkcmFnRWw6IG51bGwsXG4gICAgJGVsOiBudWxsLFxuICAgICRkcmFnRWw6IG51bGxcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgcHJvZ3Jlc3NcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgICRkcmFnRWwsXG4gICAgICAkZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGxldCBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgbGV0IG5ld1BvcyA9ICh0cmFja1NpemUgLSBkcmFnU2l6ZSkgKiBwcm9ncmVzcztcblxuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG5cbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7bmV3UG9zfXB4LCAwLCAwKWApO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IGAke25ld1NpemV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMHB4LCAke25ld1Bvc31weCwgMClgKTtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICAkZHJhZ0VsLFxuICAgICAgJGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkZWxbMF0ub2Zmc2V0V2lkdGggOiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIChzd2lwZXIudmlydHVhbFNpemUgKyBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAtIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLnNuYXBHcmlkWzBdIDogMCkpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgIGRyYWdTaXplID0gdHJhY2tTaXplICogZGl2aWRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH1cblxuICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc2Nyb2xsYmFyLiRlbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgICRlbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgbGV0IHBvc2l0aW9uUmF0aW87XG4gICAgcG9zaXRpb25SYXRpbyA9IChnZXRQb2ludGVyUG9zaXRpb24oZSkgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuXG4gICAgaWYgKHJ0bCkge1xuICAgICAgcG9zaXRpb25SYXRpbyA9IDEgLSBwb3NpdGlvblJhdGlvO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICAkd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICAkZWwsXG4gICAgICAkZHJhZ0VsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgIGRyYWdTdGFydFBvcyA9IGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsID8gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICBzZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcblxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDEpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICdub25lJyk7XG4gICAgfVxuXG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkRyYWdNb3ZlKGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICAkd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICAkZWwsXG4gICAgICAkZHJhZ0VsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgJHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgJGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJycpO1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKCcnKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChkcmFnVGltZW91dCk7XG4gICAgICBkcmFnVGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ0VuZCcsIGUpO1xuXG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHMobWV0aG9kKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgdG91Y2hFdmVudHNUb3VjaCxcbiAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHN1cHBvcnRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0ICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgY29uc3QgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgY29uc3QgZXZlbnRNZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldFtldmVudE1ldGhvZF0odG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBvbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnRbZXZlbnRNZXRob2RdKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBvbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudFtldmVudE1ldGhvZF0odG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgb25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRbZXZlbnRNZXRob2RdKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIG9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXRbZXZlbnRNZXRob2RdKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgb25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0W2V2ZW50TWV0aG9kXSh0b3VjaEV2ZW50c1RvdWNoLmVuZCwgb25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgZXZlbnRzKCdvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgZXZlbnRzKCdvZmYnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgJGVsOiAkc3dpcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5zY3JvbGxiYXIsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLCB7XG4gICAgICBlbDogJ3N3aXBlci1zY3JvbGxiYXInXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICBsZXQgJGVsID0gJChwYXJhbXMuZWwpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgbGV0ICRkcmFnRWwgPSAkZWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApO1xuXG4gICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkZHJhZ0VsID0gJChgPGRpdiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfVwiPjwvZGl2PmApO1xuICAgICAgJGVsLmFwcGVuZCgkZHJhZ0VsKTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHNjcm9sbGJhciwge1xuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICBlbmFibGVEcmFnZ2FibGUoKTtcbiAgICB9XG5cbiAgICBpZiAoJGVsKSB7XG4gICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGRpc2FibGVEcmFnZ2FibGUoKTtcbiAgfVxuXG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGVTaXplKCk7XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH0pO1xuICBvbigndXBkYXRlIHJlc2l6ZSBvYnNlcnZlclVwZGF0ZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGVTaXplKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgJGVsXG4gICAgfSA9IHN3aXBlci5zY3JvbGxiYXI7XG5cbiAgICBpZiAoJGVsKSB7XG4gICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5zY3JvbGxiYXIsIHtcbiAgICB1cGRhdGVTaXplLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaHVtYih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci10aHVtYnMnXG4gICAgfVxuICB9KTtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGxldCBzd2lwZXJDcmVhdGVkID0gZmFsc2U7XG4gIHN3aXBlci50aHVtYnMgPSB7XG4gICAgc3dpcGVyOiBudWxsXG4gIH07XG5cbiAgZnVuY3Rpb24gb25UaHVtYkNsaWNrKCkge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgY29uc3QgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICBjb25zdCBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgIGlmIChjbGlja2VkU2xpZGUgJiYgJChjbGlja2VkU2xpZGUpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNsaWRlVG9JbmRleDtcblxuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KCQodGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgICAgaWYgKHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVUb0luZGV4fVwiXWApLmVxKDApLmluZGV4KCk7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkubmV4dEFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZVRvSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIGlmICh0eXBlb2YgcHJldkluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O2Vsc2UgaWYgKHR5cGVvZiBuZXh0SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7ZWxzZSBpZiAobmV4dEluZGV4IC0gY3VycmVudEluZGV4IDwgY3VycmVudEluZGV4IC0gcHJldkluZGV4KSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7ZWxzZSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7XG4gICAgfVxuXG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJzOiB0aHVtYnNQYXJhbXNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTtcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG5cbiAgICBpZiAodGh1bWJzUGFyYW1zLnN3aXBlciBpbnN0YW5jZW9mIFN3aXBlckNsYXNzKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRodW1ic1BhcmFtcy5zd2lwZXIpKSB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXJQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyKTtcbiAgICAgIE9iamVjdC5hc3NpZ24odGh1bWJzU3dpcGVyUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKHRodW1ic1N3aXBlclBhcmFtcyk7XG4gICAgICBzd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBvblRodW1iQ2xpY2spO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKGluaXRpYWwpIHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcblxuICAgIGlmIChzd2lwZXIucmVhbEluZGV4ICE9PSB0aHVtYnNTd2lwZXIucmVhbEluZGV4IHx8IHVzZU9mZnNldCkge1xuICAgICAgbGV0IGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGxldCBuZXdUaHVtYnNJbmRleDtcbiAgICAgIGxldCBkaXJlY3Rpb247XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5oYXNDbGFzcyh0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICAgICAgICB0aHVtYnNTd2lwZXIuX2NsaWVudExlZnQgPSB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICAgIGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgfSAvLyBGaW5kIGFjdHVhbCB0aHVtYnMgaW5kZXggdG8gc2xpZGUgdG9cblxuXG4gICAgICAgIGNvbnN0IHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5wcmV2QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgY29uc3QgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLm5leHRBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleH1cIl1gKS5lcSgwKS5pbmRleCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcHJldlRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXh0VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4ID09PSBjdXJyZW50VGh1bWJzSW5kZXggLSBwcmV2VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gbmV4dFRodW1ic0luZGV4IDogY3VycmVudFRodW1ic0luZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA8IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aW9uID0gc3dpcGVyLmFjdGl2ZUluZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICAgIGRpcmVjdGlvbiA9IG5ld1RodW1ic0luZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9XG5cbiAgICAgIGlmICh1c2VPZmZzZXQpIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggKz0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyBhdXRvU2Nyb2xsT2Zmc2V0IDogLTEgKiBhdXRvU2Nyb2xsT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzICYmIHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKG5ld1RodW1ic0luZGV4KSA8IDApIHtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggKyBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4ICYmIHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHsvLyBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gLy8gQWN0aXZhdGUgdGh1bWJzXG5cblxuICAgIGxldCB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICBjb25zdCB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icykge1xuICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgfVxuXG4gICAgdGh1bWJzVG9BY3RpdmF0ZSA9IE1hdGguZmxvb3IodGh1bWJzVG9BY3RpdmF0ZSk7XG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcblxuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJzXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKHRydWUpO1xuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlIHVwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignYmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlckNyZWF0ZWQgJiYgdGh1bWJzU3dpcGVyKSB7XG4gICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icywge1xuICAgIGluaXQsXG4gICAgdXBkYXRlXG4gIH0pO1xufSIsImltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgc2V0Q1NTUHJvcGVydHkgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVmlydHVhbCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHZpcnR1YWw6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiB0cnVlLFxuICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDBcbiAgICB9XG4gIH0pO1xuICBsZXQgY3NzTW9kZVRpbWVvdXQ7XG4gIHN3aXBlci52aXJ0dWFsID0ge1xuICAgIGNhY2hlOiB7fSxcbiAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgdG86IHVuZGVmaW5lZCxcbiAgICBzbGlkZXM6IFtdLFxuICAgIG9mZnNldDogMCxcbiAgICBzbGlkZXNHcmlkOiBbXVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcblxuICAgIGlmIChwYXJhbXMuY2FjaGUgJiYgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgIH1cblxuICAgIGNvbnN0ICRzbGlkZUVsID0gcGFyYW1zLnJlbmRlclNsaWRlID8gJChwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpIDogJChgPGRpdiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVwiIGRhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtpbmRleH1cIj4ke3NsaWRlfTwvZGl2PmApO1xuICAgIGlmICghJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7XG4gICAgcmV0dXJuICRzbGlkZUVsO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzUGVyVmlldyxcbiAgICAgIHNsaWRlc1Blckdyb3VwLFxuICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCB7XG4gICAgICBhZGRTbGlkZXNCZWZvcmUsXG4gICAgICBhZGRTbGlkZXNBZnRlclxuICAgIH0gPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgY29uc3Qge1xuICAgICAgZnJvbTogcHJldmlvdXNGcm9tLFxuICAgICAgdG86IHByZXZpb3VzVG8sXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkOiBwcmV2aW91c1NsaWRlc0dyaWQsXG4gICAgICBvZmZzZXQ6IHByZXZpb3VzT2Zmc2V0XG4gICAgfSA9IHN3aXBlci52aXJ0dWFsO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgbGV0IG9mZnNldFByb3A7XG4gICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIG9mZnNldFByb3AgPSAncmlnaHQnO2Vsc2Ugb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIGxldCBzbGlkZXNBZnRlcjtcbiAgICBsZXQgc2xpZGVzQmVmb3JlO1xuXG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9XG5cbiAgICBjb25zdCBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTtcbiAgICBjb25zdCB0byA9IE1hdGgubWluKChhY3RpdmVJbmRleCB8fCAwKSArIHNsaWRlc0FmdGVyLCBzbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKHN3aXBlci5zbGlkZXNHcmlkW2Zyb21dIHx8IDApIC0gKHN3aXBlci5zbGlkZXNHcmlkWzBdIHx8IDApO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICBpZiAoc3dpcGVyLmxhenkgJiYgc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2aW91c0Zyb20gPT09IGZyb20gJiYgcHJldmlvdXNUbyA9PT0gdG8gJiYgIWZvcmNlKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc0dyaWQgIT09IHByZXZpb3VzU2xpZGVzR3JpZCAmJiBvZmZzZXQgIT09IHByZXZpb3VzT2Zmc2V0KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZXMuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzd2lwZXIsIHtcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBmcm9tLFxuICAgICAgICB0byxcbiAgICAgICAgc2xpZGVzOiBmdW5jdGlvbiBnZXRTbGlkZXMoKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVzVG9SZW5kZXIgPSBbXTtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc2xpZGVzVG9SZW5kZXI7XG4gICAgICAgIH0oKVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWxVcGRhdGUpIHtcbiAgICAgICAgb25SZW5kZXJlZCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJlcGVuZEluZGV4ZXMgPSBbXTtcbiAgICBjb25zdCBhcHBlbmRJbmRleGVzID0gW107XG5cbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2l9XCJdYCkucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgPj0gZnJvbSAmJiBpIDw9IHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgaWYgKGkgPCBwcmV2aW91c0Zyb20pIHByZXBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuYXBwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgfSk7XG4gICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApO1xuICAgIG9uUmVuZGVyZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBsZXQgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgY29uc3QgY2FjaGUgPSBzd2lwZXIudmlydHVhbC5jYWNoZTtcbiAgICAgIGNvbnN0IG5ld0NhY2hlID0ge307XG4gICAgICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaChjYWNoZWRJbmRleCA9PiB7XG4gICAgICAgIGNvbnN0ICRjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9ICRjYWNoZWRFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuXG4gICAgICAgIGlmIChjYWNoZWRFbEluZGV4KSB7XG4gICAgICAgICAgJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3Q2FjaGVbcGFyc2VJbnQoY2FjaGVkSW5kZXgsIDEwKSArIG51bWJlck9mTmV3U2xpZGVzXSA9ICRjYWNoZWRFbDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG5cbiAgICB1cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc2xpZGVzSW5kZXhlcyA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2xpZGVzSW5kZXhlc1tpXSA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnNwbGljZShzbGlkZXNJbmRleGVzLCAxKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc107XG4gICAgICB9XG5cbiAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG5cbiAgICB1cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXgsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICB1cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8oMCwgMCk7XG4gIH1cblxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcztcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc312aXJ0dWFsYCk7XG4gICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgIXN3aXBlci5faW1tZWRpYXRlVmlydHVhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGNzc01vZGVUaW1lb3V0KTtcbiAgICAgIGNzc01vZGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2luaXQgdXBkYXRlIHJlc2l6ZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItdmlydHVhbC1zaXplJywgYCR7c3dpcGVyLnZpcnR1YWxTaXplfXB4YCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIudmlydHVhbCwge1xuICAgIGFwcGVuZFNsaWRlLFxuICAgIHByZXBlbmRTbGlkZSxcbiAgICByZW1vdmVTbGlkZSxcbiAgICByZW1vdmVBbGxTbGlkZXMsXG4gICAgdXBkYXRlXG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICB6b29tOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgbWluUmF0aW86IDEsXG4gICAgICB0b2dnbGU6IHRydWUsXG4gICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICB6b29tZWRTbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXpvb21lZCdcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIuem9vbSA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBsZXQgY3VycmVudFNjYWxlID0gMTtcbiAgbGV0IGlzU2NhbGluZyA9IGZhbHNlO1xuICBsZXQgZ2VzdHVyZXNFbmFibGVkO1xuICBsZXQgZmFrZUdlc3R1cmVUb3VjaGVkO1xuICBsZXQgZmFrZUdlc3R1cmVNb3ZlZDtcbiAgY29uc3QgZ2VzdHVyZSA9IHtcbiAgICAkc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICRpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgbWF4UmF0aW86IDNcbiAgfTtcbiAgY29uc3QgaW1hZ2UgPSB7XG4gICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICBtaW5YOiB1bmRlZmluZWQsXG4gICAgbWluWTogdW5kZWZpbmVkLFxuICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICBtYXhZOiB1bmRlZmluZWQsXG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBzdGFydFg6IHVuZGVmaW5lZCxcbiAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgIHRvdWNoZXNDdXJyZW50OiB7fVxuICB9O1xuICBjb25zdCB2ZWxvY2l0eSA9IHtcbiAgICB4OiB1bmRlZmluZWQsXG4gICAgeTogdW5kZWZpbmVkLFxuICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICBwcmV2UG9zaXRpb25ZOiB1bmRlZmluZWQsXG4gICAgcHJldlRpbWU6IHVuZGVmaW5lZFxuICB9O1xuICBsZXQgc2NhbGUgPSAxO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3dpcGVyLnpvb20sICdzY2FsZScsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfSxcblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICBjb25zdCBpbWFnZUVsID0gZ2VzdHVyZS4kaW1hZ2VFbCA/IGdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHNsaWRlRWwgPSBnZXN0dXJlLiRzbGlkZUVsID8gZ2VzdHVyZS4kc2xpZGVFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgZW1pdCgnem9vbUNoYW5nZScsIHZhbHVlLCBpbWFnZUVsLCBzbGlkZUVsKTtcbiAgICAgIH1cblxuICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKSB7XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm4gMTtcbiAgICBjb25zdCB4MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICBjb25zdCB5MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICBjb25zdCB4MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWDtcbiAgICBjb25zdCB5MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeDIgLSB4MSkgKiogMiArICh5MiAtIHkxKSAqKiAyKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH0gLy8gRXZlbnRzXG5cblxuICBmdW5jdGlvbiBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICBmYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlU3RhcnQgPSBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgIH1cblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCkuZXEoMCkuZmluZCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpLmVxKDApO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG5cbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLiRpbWFnZUVsKSB7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMCk7XG4gICAgfVxuXG4gICAgaXNTY2FsaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uR2VzdHVyZUNoYW5nZShlKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTtcbiAgICAgIGdlc3R1cmUuc2NhbGVNb3ZlID0gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChlLnR5cGUgPT09ICdnZXN0dXJlY2hhbmdlJykgb25HZXN0dXJlU3RhcnQoZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHpvb20uc2NhbGUgPSBlLnNjYWxlICogY3VycmVudFNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQgKiBjdXJyZW50U2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPiBnZXN0dXJlLm1heFJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyAoem9vbS5zY2FsZSAtIGdlc3R1cmUubWF4UmF0aW8gKyAxKSAqKiAwLjU7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgIHpvb20uc2NhbGUgPSBwYXJhbXMubWluUmF0aW8gKyAxIC0gKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUgKyAxKSAqKiAwLjU7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICB9XG5cbiAgZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcbiAgICBjb25zdCBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIGNvbnN0IHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoIWZha2VHZXN0dXJlVG91Y2hlZCB8fCAhZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7XG4gICAgY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICBpc1NjYWxpbmcgPSBmYWxzZTtcbiAgICBpZiAoem9vbS5zY2FsZSA9PT0gMSkgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgY29uc3QgZGV2aWNlID0gc3dpcGVyLmRldmljZTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGRldmljZS5hbmRyb2lkICYmIGUuY2FuY2VsYWJsZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd4JykgfHwgMDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3knKSB8fCAwO1xuICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgfSAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG5cblxuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICFpc1NjYWxpbmcpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnggfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueCkpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiBpbWFnZS50b3VjaGVzU3RhcnQueSkpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCArIGltYWdlLnN0YXJ0WDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSArIGltYWdlLnN0YXJ0WTtcblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWluWCArIDEgLSAoaW1hZ2UubWluWCAtIGltYWdlLmN1cnJlbnRYICsgMSkgKiogMC44O1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyAoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYICsgMSkgKiogMC44O1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UubWluWSArIDEgLSAoaW1hZ2UubWluWSAtIGltYWdlLmN1cnJlbnRZICsgMSkgKiogMC44O1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UubWF4WSAtIDEgKyAoaW1hZ2UuY3VycmVudFkgLSBpbWFnZS5tYXhZICsgMSkgKiogMC44O1xuICAgIH0gLy8gVmVsb2NpdHlcblxuXG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICB2ZWxvY2l0eS55ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHZlbG9jaXR5LnkgPSAwO1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBsZXQgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25ZID0gMzAwO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZVkgPSB2ZWxvY2l0eS55ICogbW9tZW50dW1EdXJhdGlvblk7XG4gICAgY29uc3QgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTsgLy8gRml4IGR1cmF0aW9uXG5cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIGNvbnN0IG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZOyAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG5cbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgIGltYWdlLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFgsIGltYWdlLm1heFgpLCBpbWFnZS5taW5YKTtcbiAgICBpbWFnZS5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRZLCBpbWFnZS5tYXhZKSwgaW1hZ2UubWluWSk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG5cbiAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgfVxuXG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHpvb21JbihlKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQpIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKS5lcSgwKS5maW5kKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JykuZXEoMCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwIHx8ICFnZXN0dXJlLiRpbWFnZVdyYXBFbCB8fCBnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5hZGRDbGFzcyhgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICBsZXQgdG91Y2hYO1xuICAgIGxldCB0b3VjaFk7XG4gICAgbGV0IG9mZnNldFg7XG4gICAgbGV0IG9mZnNldFk7XG4gICAgbGV0IGRpZmZYO1xuICAgIGxldCBkaWZmWTtcbiAgICBsZXQgdHJhbnNsYXRlWDtcbiAgICBsZXQgdHJhbnNsYXRlWTtcbiAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICBsZXQgaW1hZ2VIZWlnaHQ7XG4gICAgbGV0IHNjYWxlZFdpZHRoO1xuICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblg7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblk7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFk7XG4gICAgbGV0IHNsaWRlV2lkdGg7XG4gICAgbGV0IHNsaWRlSGVpZ2h0O1xuXG4gICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG5cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBjdXJyZW50U2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgIG9mZnNldFkgPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLnRvcCArIHdpbmRvdy5zY3JvbGxZO1xuICAgICAgZGlmZlggPSBvZmZzZXRYICsgc2xpZGVXaWR0aCAvIDIgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuXG4gICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgsMClgKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICB9XG5cbiAgZnVuY3Rpb24gem9vbU91dCgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApLmVxKDApLmZpbmQoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKS5lcSgwKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDAgfHwgIWdlc3R1cmUuJGltYWdlV3JhcEVsIHx8IGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9ICcnO1xuICAgIH1cblxuICAgIHpvb20uc2NhbGUgPSAxO1xuICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsLnJlbW92ZUNsYXNzKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH0gLy8gVG9nZ2xlIFpvb21cblxuXG4gIGZ1bmN0aW9uIHpvb21Ub2dnbGUoZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcblxuICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgIC8vIFpvb20gT3V0XG4gICAgICB6b29tT3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFpvb20gSW5cbiAgICAgIHpvb21JbihlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9IDogdHJ1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTbGlkZVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVHZXN0dXJlcyhtZXRob2QpIHtcbiAgICBjb25zdCB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXJcbiAgICB9ID0gZ2V0TGlzdGVuZXJzKCk7XG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGdldFNsaWRlU2VsZWN0b3IoKTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlc3RhcnQnLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlY2hhbmdlJywgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVlbmQnLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBlbmFibGVHZXN0dXJlcygpIHtcbiAgICBpZiAoZ2VzdHVyZXNFbmFibGVkKSByZXR1cm47XG4gICAgZ2VzdHVyZXNFbmFibGVkID0gdHJ1ZTtcbiAgICB0b2dnbGVHZXN0dXJlcygnb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGVHZXN0dXJlcygpIHtcbiAgICBpZiAoIWdlc3R1cmVzRW5hYmxlZCkgcmV0dXJuO1xuICAgIGdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRvZ2dsZUdlc3R1cmVzKCdvZmYnKTtcbiAgfSAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgem9vbS5lbmFibGVkID0gdHJ1ZTtcbiAgICBjb25zdCBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcbiAgICBjb25zdCBzbGlkZVNlbGVjdG9yID0gZ2V0U2xpZGVTZWxlY3RvcigpOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgZW5hYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBkaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSAvLyBNb3ZlIGltYWdlXG5cblxuICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWAsIG9uVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHpvb20uZW5hYmxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhc3NpdmVMaXN0ZW5lcixcbiAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmVcbiAgICB9ID0gZ2V0TGlzdGVuZXJzKCk7XG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGdldFNsaWRlU2VsZWN0b3IoKTsgLy8gU2NhbGUgaW1hZ2VcblxuICAgIGlmIChzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBlbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBkaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIHNsaWRlU2VsZWN0b3IsIG9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gLy8gTW92ZSBpbWFnZVxuXG5cbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCwgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9XG5cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkaXNhYmxlKCk7XG4gIH0pO1xuICBvbigndG91Y2hTdGFydCcsIChfcywgZSkgPT4ge1xuICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIG9uVG91Y2hTdGFydChlKTtcbiAgfSk7XG4gIG9uKCd0b3VjaEVuZCcsIChfcywgZSkgPT4ge1xuICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIG9uVG91Y2hFbmQoZSk7XG4gIH0pO1xuICBvbignZG91YmxlVGFwJywgKF9zLCBlKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgem9vbVRvZ2dsZShlKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuem9vbSwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIGluOiB6b29tSW4sXG4gICAgb3V0OiB6b29tT3V0LFxuICAgIHRvZ2dsZTogem9vbVRvZ2dsZVxuICB9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzID0gJycpIHtcbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohXFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gc3dpcGVyLiRlbC5jaGlsZHJlbihgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuJGVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyYW1zO1xufSIsImltcG9ydCAkIGZyb20gJy4vZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsLCBzaWRlKSB7XG4gIGNvbnN0IHNoYWRvd0NsYXNzID0gYHN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9YDtcbiAgY29uc3QgJHNoYWRvd0NvbnRhaW5lciA9IHBhcmFtcy50cmFuc2Zvcm1FbCA/ICRzbGlkZUVsLmZpbmQocGFyYW1zLnRyYW5zZm9ybUVsKSA6ICRzbGlkZUVsO1xuICBsZXQgJHNoYWRvd0VsID0gJHNoYWRvd0NvbnRhaW5lci5jaGlsZHJlbihgLiR7c2hhZG93Q2xhc3N9YCk7XG5cbiAgaWYgKCEkc2hhZG93RWwubGVuZ3RoKSB7XG4gICAgJHNoYWRvd0VsID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9XCI+PC9kaXY+YCk7XG4gICAgJHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoJHNoYWRvd0VsKTtcbiAgfVxuXG4gIHJldHVybiAkc2hhZG93RWw7XG59IiwiaW1wb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgb24sIG9mZiwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQsIHN0eWxlcywgb2Zmc2V0LCBjc3MsIGVhY2gsIGh0bWwsIHRleHQsIGlzLCBpbmRleCwgZXEsIGFwcGVuZCwgcHJlcGVuZCwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgZmlsdGVyLCByZW1vdmUgfSBmcm9tICdkb203JztcbmNvbnN0IE1ldGhvZHMgPSB7XG4gIGFkZENsYXNzLFxuICByZW1vdmVDbGFzcyxcbiAgaGFzQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzLFxuICBhdHRyLFxuICByZW1vdmVBdHRyLFxuICB0cmFuc2Zvcm0sXG4gIHRyYW5zaXRpb24sXG4gIG9uLFxuICBvZmYsXG4gIHRyaWdnZXIsXG4gIHRyYW5zaXRpb25FbmQsXG4gIG91dGVyV2lkdGgsXG4gIG91dGVySGVpZ2h0LFxuICBzdHlsZXMsXG4gIG9mZnNldCxcbiAgY3NzLFxuICBlYWNoLFxuICBodG1sLFxuICB0ZXh0LFxuICBpcyxcbiAgaW5kZXgsXG4gIGVxLFxuICBhcHBlbmQsXG4gIHByZXBlbmQsXG4gIG5leHQsXG4gIG5leHRBbGwsXG4gIHByZXYsXG4gIHByZXZBbGwsXG4gIHBhcmVudCxcbiAgcGFyZW50cyxcbiAgY2xvc2VzdCxcbiAgZmluZCxcbiAgY2hpbGRyZW4sXG4gIGZpbHRlcixcbiAgcmVtb3ZlXG59O1xuT2JqZWN0LmtleXMoTWV0aG9kcykuZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KCQuZm4sIG1ldGhvZE5hbWUsIHtcbiAgICB2YWx1ZTogTWV0aG9kc1ttZXRob2ROYW1lXSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgJDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZmZlY3RJbml0KHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgZWZmZWN0LFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXMsXG4gICAgcGVyc3BlY3RpdmVcbiAgfSA9IHBhcmFtcztcbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2VmZmVjdH1gKTtcblxuICAgIGlmIChwZXJzcGVjdGl2ZSAmJiBwZXJzcGVjdGl2ZSgpKSB7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgIH1cblxuICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWZmZWN0VGFyZ2V0KGVmZmVjdFBhcmFtcywgJHNsaWRlRWwpIHtcbiAgaWYgKGVmZmVjdFBhcmFtcy50cmFuc2Zvcm1FbCkge1xuICAgIHJldHVybiAkc2xpZGVFbC5maW5kKGVmZmVjdFBhcmFtcy50cmFuc2Zvcm1FbCkuY3NzKHtcbiAgICAgICdiYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbicsXG4gICAgICAnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbidcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAkc2xpZGVFbDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gIHN3aXBlcixcbiAgZHVyYXRpb24sXG4gIHRyYW5zZm9ybUVsLFxuICBhbGxTbGlkZXNcbn0pIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhY3RpdmVJbmRleCxcbiAgICAkd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgIGxldCAkdHJhbnNpdGlvbkVuZFRhcmdldDtcblxuICAgIGlmIChhbGxTbGlkZXMpIHtcbiAgICAgICR0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWwgPyBzbGlkZXMuZmluZCh0cmFuc2Zvcm1FbCkgOiBzbGlkZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWwgPyBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmZpbmQodHJhbnNmb3JtRWwpIDogc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgICB9XG5cbiAgICAkdHJhbnNpdGlvbkVuZFRhcmdldC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmxldCBicm93c2VyO1xuXG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cblxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZXhwb3J0IHsgZ2V0QnJvd3NlciB9OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4vZ2V0LXN1cHBvcnQuanMnO1xubGV0IGRldmljZUNhY2hlZDtcblxuZnVuY3Rpb24gY2FsY0RldmljZSh7XG4gIHVzZXJBZ2VudFxufSA9IHt9KSB7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7IC8vIGlQYWRPcyAxMyBmaXhcblxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuXG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfSAvLyBBbmRyb2lkXG5cblxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cblxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9IC8vIEV4cG9ydCBvYmplY3RcblxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMgPSB7fSkge1xuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZXZpY2VDYWNoZWQ7XG59XG5cbmV4cG9ydCB7IGdldERldmljZSB9OyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmxldCBzdXBwb3J0O1xuXG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpLFxuICAgIHBhc3NpdmVMaXN0ZW5lcjogZnVuY3Rpb24gY2hlY2tQYXNzaXZlTGlzdGVuZXIoKSB7XG4gICAgICBsZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCksXG4gICAgZ2VzdHVyZXM6IGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmV4cG9ydCB7IGdldFN1cHBvcnQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7Ly8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5ID0gMCkge1xuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuXG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG5cbiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIH1cblxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG5cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcyA9ICd4Jykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgfSAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG5cblxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cblxuICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoLi4uYXJncykge1xuICBjb25zdCB0byA9IE9iamVjdChhcmdzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gYXJnc1tpXTtcblxuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG5cbiAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcblxuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG5cbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICBzd2lwZXIsXG4gIHRhcmdldFBvc2l0aW9uLFxuICBzaWRlXG59KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBzdGFydFBvc2l0aW9uID0gLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICBsZXQgdGltZTtcbiAgY29uc3QgZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgY29uc3QgZGlyID0gdGFyZ2V0UG9zaXRpb24gPiBzdGFydFBvc2l0aW9uID8gJ25leHQnIDogJ3ByZXYnO1xuXG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG5cbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuXG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuXG4gICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgIH0pO1xuXG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG5cbiAgYW5pbWF0ZSgpO1xufVxuXG5leHBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCwgZGVsZXRlUHJvcHMsIG5leHRUaWNrLCBub3csIGdldFRyYW5zbGF0ZSwgaXNPYmplY3QsIGV4dGVuZCwgZ2V0Q29tcHV0ZWRTdHlsZSwgc2V0Q1NTUHJvcGVydHkgfTsiLCIvKipcbiAqIFN3aXBlciA3LjMuNFxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcbiAqIGh0dHBzOi8vc3dpcGVyanMuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAyMSBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAyMiwgMjAyMVxuICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3dpcGVyLCBkZWZhdWx0IH0gZnJvbSAnLi9jb3JlL2NvcmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBWaXJ0dWFsIH0gZnJvbSAnLi9tb2R1bGVzL3ZpcnR1YWwvdmlydHVhbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEtleWJvYXJkIH0gZnJvbSAnLi9tb2R1bGVzL2tleWJvYXJkL2tleWJvYXJkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTW91c2V3aGVlbCB9IGZyb20gJy4vbW9kdWxlcy9tb3VzZXdoZWVsL21vdXNld2hlZWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOYXZpZ2F0aW9uIH0gZnJvbSAnLi9tb2R1bGVzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFBhZ2luYXRpb24gfSBmcm9tICcuL21vZHVsZXMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2Nyb2xsYmFyIH0gZnJvbSAnLi9tb2R1bGVzL3Njcm9sbGJhci9zY3JvbGxiYXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXJhbGxheCB9IGZyb20gJy4vbW9kdWxlcy9wYXJhbGxheC9wYXJhbGxheC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFpvb20gfSBmcm9tICcuL21vZHVsZXMvem9vbS96b29tLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGF6eSB9IGZyb20gJy4vbW9kdWxlcy9sYXp5L2xhenkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb250cm9sbGVyIH0gZnJvbSAnLi9tb2R1bGVzL2NvbnRyb2xsZXIvY29udHJvbGxlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEExMXkgfSBmcm9tICcuL21vZHVsZXMvYTExeS9hMTF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSGlzdG9yeSB9IGZyb20gJy4vbW9kdWxlcy9oaXN0b3J5L2hpc3RvcnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIYXNoTmF2aWdhdGlvbiB9IGZyb20gJy4vbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24vaGFzaC1uYXZpZ2F0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQXV0b3BsYXkgfSBmcm9tICcuL21vZHVsZXMvYXV0b3BsYXkvYXV0b3BsYXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUaHVtYnMgfSBmcm9tICcuL21vZHVsZXMvdGh1bWJzL3RodW1icy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZyZWVNb2RlIH0gZnJvbSAnLi9tb2R1bGVzL2ZyZWUtbW9kZS9mcmVlLW1vZGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHcmlkIH0gZnJvbSAnLi9tb2R1bGVzL2dyaWQvZ3JpZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hbmlwdWxhdGlvbiB9IGZyb20gJy4vbW9kdWxlcy9tYW5pcHVsYXRpb24vbWFuaXB1bGF0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWZmZWN0RmFkZSB9IGZyb20gJy4vbW9kdWxlcy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEVmZmVjdEN1YmUgfSBmcm9tICcuL21vZHVsZXMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFZmZlY3RGbGlwIH0gZnJvbSAnLi9tb2R1bGVzL2VmZmVjdC1mbGlwL2VmZmVjdC1mbGlwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWZmZWN0Q292ZXJmbG93IH0gZnJvbSAnLi9tb2R1bGVzL2VmZmVjdC1jb3ZlcmZsb3cvZWZmZWN0LWNvdmVyZmxvdy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEVmZmVjdENyZWF0aXZlIH0gZnJvbSAnLi9tb2R1bGVzL2VmZmVjdC1jcmVhdGl2ZS9lZmZlY3QtY3JlYXRpdmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFZmZlY3RDYXJkcyB9IGZyb20gJy4vbW9kdWxlcy9lZmZlY3QtY2FyZHMvZWZmZWN0LWNhcmRzLmpzJzsiLCJpbXBvcnQgeyB0b2dnbGVNZW51IH0gZnJvbSBcIi4vbW9kdWxlcy9tZW51XCI7XHJcbmltcG9ydCB7IHRvZ2dsZU5hdmlnYXRpb24gfSBmcm9tIFwiLi9tb2R1bGVzL25hdmlnYXRpb25cIjtcclxuaW1wb3J0IHsgdG9nZ2xlQ2FyZCB9IGZyb20gXCIuL21vZHVsZXMvdG9nZ2xlXCI7XHJcbmltcG9ydCB7IFNsaWRlciB9IGZyb20gXCIuL21vZHVsZXMvc3dpcGVyXCI7XHJcbmltcG9ydCB7IHNjcm9sbFRvVG9wIH0gZnJvbSBcIi4vbW9kdWxlcy9zY3JvbGxUb1RvcFwiO1xyXG5pbXBvcnQgeyB0b2dnbGVNb2RhbCB9IGZyb20gXCIuL21vZHVsZXMvbW9kYWxcIjtcclxuaW1wb3J0IHsgdmFsaWRhdGVGb3JtIH0gZnJvbSBcIi4vbW9kdWxlcy92YWxpZGF0ZUZvcm1cIjtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICB0b2dnbGVOYXZpZ2F0aW9uKCk7XHJcbiAgdG9nZ2xlTWVudSgpO1xyXG4gIHRvZ2dsZUNhcmQoKTtcclxuICBjb25zdCBnYWxsZXJ5ID0gbmV3IFNsaWRlcihcIi5zd2lwZXJcIik7XHJcbiAgZ2FsbGVyeS5zdGFydCgpO1xyXG4gIGNvbnN0IGNsaWVudHNHYWxsZXJ5ID0gbmV3IFNsaWRlcihcIi5tYWluX19jbGllbnRzLXN3aXBlclwiKTtcclxuICBjbGllbnRzR2FsbGVyeS5zdGFydCgpO1xyXG4gIHRvZ2dsZU1vZGFsKCk7XHJcbiAgc2Nyb2xsVG9Ub3AoKTtcclxuICB2YWxpZGF0ZUZvcm0oKTtcclxufSk7XHJcbiIsImV4cG9ydCBjb25zdCB0b2dnbGVNZW51ID0gKCkgPT4ge1xyXG4gIGxldCB0b2dnbGUgPSBmYWxzZTtcclxuICBjb25zdCBtZW51QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX21lbnUtYnRuXCIpO1xyXG4gIGNvbnN0IG1vYmlsZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZS1tZW51XCIpO1xyXG4gIGxldCBtZW51SWNvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lbnUtYnRuLWljb25cIik7XHJcbiAgbWVudUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgdG9nZ2xlID0gIXRvZ2dsZTtcclxuICAgIGlmICh0b2dnbGUpIHtcclxuICAgICAgbWVudUljb25zWzBdLmNsYXNzTGlzdC50b2dnbGUoXCJtZW51LXRvZ2dsZWRcIik7XHJcbiAgICAgIG1lbnVJY29uc1sxXS5jbGFzc0xpc3QudG9nZ2xlKFwibWVudS10b2dnbGVkXCIpO1xyXG4gICAgICBtb2JpbGVNZW51LmNsYXNzTGlzdC50b2dnbGUoXCJtb2JpbGUtbWVudS0tb3BlblwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1lbnVJY29uc1swXS5jbGFzc0xpc3QudG9nZ2xlKFwibWVudS10b2dnbGVkXCIpO1xyXG4gICAgICBtZW51SWNvbnNbMV0uY2xhc3NMaXN0LnRvZ2dsZShcIm1lbnUtdG9nZ2xlZFwiKTtcclxuICAgICAgbW9iaWxlTWVudS5jbGFzc0xpc3QudG9nZ2xlKFwibW9iaWxlLW1lbnUtLW9wZW5cIik7XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSBcIjEyNDBcIikge1xyXG4gICAgICAgIHRvZ2dsZSA9IGZhbHNlO1xyXG4gICAgICAgIG1vYmlsZU1lbnUuY2xhc3NMaXN0LnJlbW92ZShcIm1vYmlsZS1tZW51LS1vcGVuXCIpO1xyXG4gICAgICAgIG1lbnVJY29uc1swXS5jbGFzc0xpc3QucmVtb3ZlKFwibWVudS10b2dnbGVkXCIpO1xyXG4gICAgICAgIG1lbnVJY29uc1sxXS5jbGFzc0xpc3QuYWRkKFwibWVudS10b2dnbGVkXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IHRvZ2dsZU1vZGFsID0gKCkgPT4ge1xyXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbFwiKTtcclxuICBjb25zdCBjbG9zZU1vZGFsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2UtYnRuXCIpO1xyXG4gIGNvbnN0IG1vZGFsQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIub3Blbi1tb2RhbFwiKTtcclxuICBtb2RhbEJ0bnMuZm9yRWFjaCgobW9kYWxCdG4sIGkpID0+IHtcclxuICAgIG1vZGFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC50b2dnbGUoXCJtb2RhbC1vcGVuXCIpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgY2xvc2VNb2RhbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsLW9wZW5cIik7XHJcbiAgfSk7XHJcbiAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBlLnRhcmdldCA9PT0gbW9kYWwgPyBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWwtb3BlblwiKSA6IFwiXCI7XHJcbiAgfSk7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB0b2dnbGVOYXZpZ2F0aW9uID0gKCkgPT4ge1xyXG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG4gIGNvbnN0IG1vYmlsZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZS1tZW51XCIpO1xyXG4gIGxldCBsYXN0U2Nyb2xsID0gMDtcclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgKCkgPT4ge1xyXG4gICAgbGV0IGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRTY3JvbGwgPiBsYXN0U2Nyb2xsICYmICFib2R5LmNsYXNzTGlzdC5jb250YWlucyhcInNjcm9sbC1kb3duXCIpKSB7XHJcbiAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZChcInNjcm9sbC1kb3duXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGN1cnJlbnRTY3JvbGwgPCBsYXN0U2Nyb2xsICYmIGJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2Nyb2xsLWRvd25cIikpIHtcclxuICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwic2Nyb2xsLWRvd25cIik7XHJcbiAgICB9XHJcbiAgICBpZiAobW9iaWxlTWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2JpbGUtbWVudS0tb3BlblwiKSkge1xyXG4gICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJzY3JvbGwtZG93blwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0U2Nyb2xsID0gY3VycmVudFNjcm9sbDtcclxuICB9KTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IHNjcm9sbFRvVG9wID0gKCkgPT4ge1xyXG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vdGVyX19idG4tc2Nyb2xsXCIpO1xyXG4gIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcclxuICB9KTtcclxufTtcclxuIiwiaW1wb3J0IFN3aXBlciwgeyBOYXZpZ2F0aW9uLCBBdXRvcGxheSwgTGF6eSB9IGZyb20gXCJzd2lwZXJcIjtcclxuXHJcblN3aXBlci51c2UoW05hdmlnYXRpb24sIEF1dG9wbGF5LCBMYXp5XSk7XHJcblxyXG5leHBvcnQgY2xhc3MgU2xpZGVyIHtcclxuICBjb25zdHJ1Y3RvcihlbCkge1xyXG4gICAgdGhpcy5lbCA9IGVsO1xyXG4gICAgdGhpcy5zd2lwZXIgPSB0aGlzLl9pbml0U3dpcGVyKCk7XHJcbiAgfVxyXG5cclxuICBfaW5pdFN3aXBlcigpIHtcclxuICAgIHJldHVybiBuZXcgU3dpcGVyKHRoaXMuZWwsIHtcclxuICAgICAgcHJlbG9hZEltYWdlczogZmFsc2UsXHJcbiAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXHJcbiAgICAgIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXHJcbiAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICBncmFiQ3Vyc29yOiB0cnVlLFxyXG4gICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgIG5leHRFbDogXCIuc3dpcGVyLWJ1dHRvbi1uZXh0XCIsXHJcbiAgICAgICAgcHJldkVsOiBcIi5zd2lwZXItYnV0dG9uLXByZXZcIixcclxuICAgICAgfSxcclxuICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAyODA6IHtcclxuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICBzcGFjZUJldHdlZW46IDIwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgNzIwOiB7XHJcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxyXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIDEyNDA6IHtcclxuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICBzcGFjZUJldHdlZW46IDQwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXJ0KG9wdGlvbnMgPSB7fSkge1xyXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgIHtcclxuICAgICAgICBkZWxheTogNDAwMCxcclxuICAgICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXHJcbiAgICAgIH0sXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgICB0aGlzLnN3aXBlci5wYXJhbXMuYXV0b3BsYXkgPSBvcHRpb25zO1xyXG4gICAgdGhpcy5zd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHN0b3AoKSB7XHJcbiAgICB0aGlzLnN3aXBlci5hdXRvcGxheS5zdG9wKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuXHJcbmV4cG9ydCBjb25zdCB0b2dnbGVDYXJkID0gKCkgPT4ge1xyXG4gIGNvbnN0IGFjY29yZGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1haW5fX2FjY29yZGlvbi1jb250ZW50XCIpO1xyXG4gIGNvbnN0IGFjY29yZGlvbkl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tYWluX19hY2NvcmRpb24taXRlbVwiKTtcclxuICBjb25zdCBhcnJvd0J0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1haW5fX2FjY29yZGlvbi10b2dnbGVcIik7XHJcbiAgY29uc3QgYXJyb3dJY29ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWFpbl9fYWNjb3JkaW9uLXRvZ2dsZS1pY29uXCIpO1xyXG4gIGNvbnN0IGNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tYWluX19hY2NvcmRpb24tY29udGVudFwiKTtcclxuICBjb25zdCB0ZXh0c09uSG92ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1haW5fX3RleHQtLWhvdmVyXCIpO1xyXG4gIGNvbnN0IHNob3cgPSAoaSkgPT4ge1xyXG4gICAgdGV4dHNPbkhvdmVyW2ldLnN0eWxlLm1heEhlaWdodCA9IHRleHRzT25Ib3ZlcltpXS5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XHJcbiAgfTtcclxuICBjb25zdCBoaWRlID0gKGkpID0+IHtcclxuICAgIHRleHRzT25Ib3ZlcltpXS5zdHlsZS5tYXhIZWlnaHQgPSAwO1xyXG4gIH07XHJcbiAgYXJyb3dCdG5zLmZvckVhY2goKGFycm93QnRuLCBpKSA9PiB7XHJcbiAgICBhcnJvd0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBhcnJvd0ljb25zW2ldLmNsYXNzTGlzdC50b2dnbGUoXCJpY29uLS1yb3RhdGVcIik7XHJcbiAgICAgIGNhcmRzW2ldLmNsYXNzTGlzdC50b2dnbGUoXCJhY2NvcmRpb24tLWFjdGl2ZVwiKTtcclxuICAgICAgaWYgKGNhcmRzW2ldLmNsYXNzTGlzdC5jb250YWlucyhcImFjY29yZGlvbi0tYWN0aXZlXCIpKSB7XHJcbiAgICAgICAgYWNjb3JkaW9uc1tpXS5zdHlsZS5tYXhIZWlnaHQgPSBhY2NvcmRpb25zW2ldLnNjcm9sbEhlaWdodCArIFwicHhcIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhY2NvcmRpb25zW2ldLnN0eWxlLm1heEhlaWdodCA9IDA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGFjY29yZGlvbkl0ZW1zLmZvckVhY2goKGFjY29yZGlvbkl0ZW0sIGkpID0+IHtcclxuICAgIGFjY29yZGlvbkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4gc2hvdyhpKSk7XHJcbiAgICBhY2NvcmRpb25JdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBzaG93KGkpKTtcclxuICAgIGFjY29yZGlvbkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCkgPT4gaGlkZShpKSk7XHJcbiAgICBhY2NvcmRpb25JdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCAoKSA9PiBoaWRlKGkpKTtcclxuICB9KTtcclxufTtcclxuIiwiaW1wb3J0IEltYXNrIGZyb20gXCJpbWFza1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRm9ybSA9ICgpID0+IHtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJudW1iZXJcIik7XHJcbiAgY29uc3QgbWFza09wdGlvbnMgPSB7XHJcbiAgICBtYXNrOiBcIit7N30gKDAwMCkgMDAwLTAwLTAwXCIsXHJcbiAgfTtcclxuICBjb25zdCBtYXNrID0gSU1hc2soZWxlbWVudCwgbWFza09wdGlvbnMpO1xyXG4gIG1hc2sudXBkYXRlVmFsdWUoKTtcclxuXHJcbiAgY29uc3QgbW9kYWxGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idG5cIik7XHJcbiAgY29uc3QgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XHJcbiAgY29uc3QgbGFiZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9fbGFiZWxcIik7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfTtcclxuXHJcbiAgc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBpbnB1dHMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcclxuICAgICAgaWYgKGlucHV0c1tpXS52YWx1ZS5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgIGlucHV0c1tpXS5jbGFzc0xpc3QuYWRkKFwidmFsaWRhdGUtaW5wdXRcIik7XHJcbiAgICAgICAgbGFiZWxzW2ldLmNsYXNzTGlzdC5hZGQoXCJ2YWxpZGF0ZS1sYWJlbFwiKTtcclxuICAgICAgICBtb2RhbEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBoYW5kbGVTdWJtaXQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0c1tpXS5jbGFzc0xpc3QucmVtb3ZlKFwidmFsaWRhdGUtaW5wdXRcIik7XHJcbiAgICAgICAgbGFiZWxzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJ2YWxpZGF0ZS1sYWJlbFwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcbiJdfQ==\n"]}